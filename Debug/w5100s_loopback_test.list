
w5100s_loopback_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000525c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005668  08005668  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08005668  08005668  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005668  08005668  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005668  08005668  00015668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800566c  0800566c  0001566c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08005670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020f0  200000b4  08005724  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021a4  08005724  000221a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9bc  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028cd  00000000  00000000  0002ca99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0002f368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  0002ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e4d  00000000  00000000  00030a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9a3  00000000  00000000  0004989d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a54a  00000000  00000000  00056240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e078a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000376c  00000000  00000000  000e07e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08005350 	.word	0x08005350

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08005350 	.word	0x08005350

0800014c <csEnable>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void csEnable(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2140      	movs	r1, #64	; 0x40
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <csEnable+0x14>)
 8000156:	f000 fffd 	bl	8001154 <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010c00 	.word	0x40010c00

08000164 <csDisable>:

void csDisable(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2140      	movs	r1, #64	; 0x40
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <csDisable+0x14>)
 800016e:	f000 fff1 	bl	8001154 <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010c00 	.word	0x40010c00

0800017c <spiWriteByte>:

void spiWriteByte(uint8_t tx)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b086      	sub	sp, #24
 8000180:	af02      	add	r7, sp, #8
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
	uint8_t rx;
	HAL_SPI_TransmitReceive(&hspi2, &tx, &rx, 1, 10);
 8000186:	f107 020f 	add.w	r2, r7, #15
 800018a:	1df9      	adds	r1, r7, #7
 800018c:	230a      	movs	r3, #10
 800018e:	9300      	str	r3, [sp, #0]
 8000190:	2301      	movs	r3, #1
 8000192:	4803      	ldr	r0, [pc, #12]	; (80001a0 <spiWriteByte+0x24>)
 8000194:	f001 fcb6 	bl	8001b04 <HAL_SPI_TransmitReceive>
}
 8000198:	bf00      	nop
 800019a:	3710      	adds	r7, #16
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	200000f4 	.word	0x200000f4

080001a4 <spiReadByte>:

uint8_t spiReadByte(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b084      	sub	sp, #16
 80001a8:	af02      	add	r7, sp, #8
	uint8_t rx = 0, tx = 0xFF;
 80001aa:	2300      	movs	r3, #0
 80001ac:	71fb      	strb	r3, [r7, #7]
 80001ae:	23ff      	movs	r3, #255	; 0xff
 80001b0:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi2, &tx, &rx, 1, 10);
 80001b2:	1dfa      	adds	r2, r7, #7
 80001b4:	1db9      	adds	r1, r7, #6
 80001b6:	230a      	movs	r3, #10
 80001b8:	9300      	str	r3, [sp, #0]
 80001ba:	2301      	movs	r3, #1
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <spiReadByte+0x28>)
 80001be:	f001 fca1 	bl	8001b04 <HAL_SPI_TransmitReceive>
	return rx;
 80001c2:	79fb      	ldrb	r3, [r7, #7]
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	200000f4 	.word	0x200000f4

080001d0 <W5100s_Initialze>:
void W5100s_Initialze(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
	csDisable();
 80001d6:	f7ff ffc5 	bl	8000164 <csDisable>
	reg_wizchip_cs_cbfunc(csEnable, csDisable);
 80001da:	4921      	ldr	r1, [pc, #132]	; (8000260 <W5100s_Initialze+0x90>)
 80001dc:	4821      	ldr	r0, [pc, #132]	; (8000264 <W5100s_Initialze+0x94>)
 80001de:	f003 fc91 	bl	8003b04 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spiReadByte,spiWriteByte);
 80001e2:	4921      	ldr	r1, [pc, #132]	; (8000268 <W5100s_Initialze+0x98>)
 80001e4:	4821      	ldr	r0, [pc, #132]	; (800026c <W5100s_Initialze+0x9c>)
 80001e6:	f003 fcb1 	bl	8003b4c <reg_wizchip_spi_cbfunc>

#if _WIZCHIP_ == W5100
  HAL_Delay(3000);
#endif
#if _WIZCHIP_ == W5100S
  printf("version:%2x\r\n", getVER());
 80001ea:	2080      	movs	r0, #128	; 0x80
 80001ec:	f002 fcf6 	bl	8002bdc <WIZCHIP_READ>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4619      	mov	r1, r3
 80001f4:	481e      	ldr	r0, [pc, #120]	; (8000270 <W5100s_Initialze+0xa0>)
 80001f6:	f004 f97b 	bl	80044f0 <iprintf>
  printf("TMSR:%2x\r\n", getTMSR());
 80001fa:	201b      	movs	r0, #27
 80001fc:	f002 fcee 	bl	8002bdc <WIZCHIP_READ>
 8000200:	4603      	mov	r3, r0
 8000202:	4619      	mov	r1, r3
 8000204:	481b      	ldr	r0, [pc, #108]	; (8000274 <W5100s_Initialze+0xa4>)
 8000206:	f004 f973 	bl	80044f0 <iprintf>
	uint8_t tmp;
	//w5500, w5200
#if _WIZCHIP_SOCK_NUM_ == 8
	uint8_t memsize[2][8] = { {2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
#else
	uint8_t memsize[2][4] = { {2,2,2,2},{2,2,2,2}};
 800020a:	4a1b      	ldr	r2, [pc, #108]	; (8000278 <W5100s_Initialze+0xa8>)
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000212:	e883 0003 	stmia.w	r3, {r0, r1}
#endif
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4619      	mov	r1, r3
 800021a:	2001      	movs	r0, #1
 800021c:	f003 fcc2 	bl	8003ba4 <ctlwizchip>
 8000220:	4603      	mov	r3, r0
 8000222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000226:	d105      	bne.n	8000234 <W5100s_Initialze+0x64>
	{
		//myprintf("WIZCHIP Initialized fail.\r\n");
		printf("WIZCHIP Initialized fail.\r\n", 1, 10);
 8000228:	220a      	movs	r2, #10
 800022a:	2101      	movs	r1, #1
 800022c:	4813      	ldr	r0, [pc, #76]	; (800027c <W5100s_Initialze+0xac>)
 800022e:	f004 f95f 	bl	80044f0 <iprintf>
	  return;
 8000232:	e012      	b.n	800025a <W5100s_Initialze+0x8a>
	}
	/* PHY link status check */
	do {
		if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 8000234:	f107 030f 	add.w	r3, r7, #15
 8000238:	4619      	mov	r1, r3
 800023a:	200f      	movs	r0, #15
 800023c:	f003 fcb2 	bl	8003ba4 <ctlwizchip>
 8000240:	4603      	mov	r3, r0
 8000242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000246:	d105      	bne.n	8000254 <W5100s_Initialze+0x84>
		{
			printf("Unknown PHY Link status.\r\n", 1, 10);
 8000248:	220a      	movs	r2, #10
 800024a:	2101      	movs	r1, #1
 800024c:	480c      	ldr	r0, [pc, #48]	; (8000280 <W5100s_Initialze+0xb0>)
 800024e:	f004 f94f 	bl	80044f0 <iprintf>
		  return;
 8000252:	e002      	b.n	800025a <W5100s_Initialze+0x8a>
		}
	} while (tmp == PHY_LINK_OFF);
 8000254:	7bfb      	ldrb	r3, [r7, #15]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d0ec      	beq.n	8000234 <W5100s_Initialze+0x64>
}
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	08000165 	.word	0x08000165
 8000264:	0800014d 	.word	0x0800014d
 8000268:	0800017d 	.word	0x0800017d
 800026c:	080001a5 	.word	0x080001a5
 8000270:	08005368 	.word	0x08005368
 8000274:	08005378 	.word	0x08005378
 8000278:	080053bc 	.word	0x080053bc
 800027c:	08005384 	.word	0x08005384
 8000280:	080053a0 	.word	0x080053a0

08000284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000288:	f000 fb9c 	bl	80009c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028c:	f000 f82e 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000290:	f000 f8ce 	bl	8000430 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000294:	f000 f8a2 	bl	80003dc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000298:	f000 f86a 	bl	8000370 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  printf("\t - W5100S Project - \r\n");
 800029c:	480f      	ldr	r0, [pc, #60]	; (80002dc <main+0x58>)
 800029e:	f004 f9ad 	bl	80045fc <puts>
  resetAssert();
 80002a2:	f000 fb51 	bl	8000948 <resetAssert>
  HAL_Delay(1000);
 80002a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002aa:	f000 fbed 	bl	8000a88 <HAL_Delay>
  resetDeassert();
 80002ae:	f000 fb57 	bl	8000960 <resetDeassert>
  HAL_Delay(1000);
 80002b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b6:	f000 fbe7 	bl	8000a88 <HAL_Delay>
  printf("\t - WizChip Init - \r\n");
 80002ba:	4809      	ldr	r0, [pc, #36]	; (80002e0 <main+0x5c>)
 80002bc:	f004 f99e 	bl	80045fc <puts>

  //WIZCHIPInitialize();
  W5100s_Initialze();
 80002c0:	f7ff ff86 	bl	80001d0 <W5100s_Initialze>

  wizchip_setnetinfo(&defaultNetInfo);
 80002c4:	4807      	ldr	r0, [pc, #28]	; (80002e4 <main+0x60>)
 80002c6:	f003 ffc3 	bl	8004250 <wizchip_setnetinfo>
  print_network_information();
 80002ca:	f000 f91f 	bl	800050c <print_network_information>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  loopback_tcps(0, ethBuf0, 5000);
 80002ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80002d2:	4905      	ldr	r1, [pc, #20]	; (80002e8 <main+0x64>)
 80002d4:	2000      	movs	r0, #0
 80002d6:	f002 fb35 	bl	8002944 <loopback_tcps>
  {
 80002da:	e7f8      	b.n	80002ce <main+0x4a>
 80002dc:	080053c4 	.word	0x080053c4
 80002e0:	080053dc 	.word	0x080053dc
 80002e4:	20000000 	.word	0x20000000
 80002e8:	20001990 	.word	0x20001990

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b090      	sub	sp, #64	; 0x40
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	2228      	movs	r2, #40	; 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f004 f84a 	bl	8004394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030e:	2302      	movs	r3, #2
 8000310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000312:	2301      	movs	r3, #1
 8000314:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000316:	2310      	movs	r3, #16
 8000318:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031a:	2302      	movs	r3, #2
 800031c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800031e:	2300      	movs	r3, #0
 8000320:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000322:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000326:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000328:	f107 0318 	add.w	r3, r7, #24
 800032c:	4618      	mov	r0, r3
 800032e:	f000 ff4b 	bl	80011c8 <HAL_RCC_OscConfig>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000338:	f000 f978 	bl	800062c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033c:	230f      	movs	r3, #15
 800033e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000340:	2302      	movs	r3, #2
 8000342:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800034c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2102      	movs	r1, #2
 8000356:	4618      	mov	r0, r3
 8000358:	f001 f9b6 	bl	80016c8 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000362:	f000 f963 	bl	800062c <Error_Handler>
  }
}
 8000366:	bf00      	nop
 8000368:	3740      	adds	r7, #64	; 0x40
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <MX_SPI2_Init+0x64>)
 8000376:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <MX_SPI2_Init+0x68>)
 8000378:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <MX_SPI2_Init+0x64>)
 800037c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000380:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_SPI2_Init+0x64>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_SPI2_Init+0x64>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_SPI2_Init+0x64>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_SPI2_Init+0x64>)
 8000396:	2200      	movs	r2, #0
 8000398:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <MX_SPI2_Init+0x64>)
 800039c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <MX_SPI2_Init+0x64>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <MX_SPI2_Init+0x64>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <MX_SPI2_Init+0x64>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b4:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <MX_SPI2_Init+0x64>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_SPI2_Init+0x64>)
 80003bc:	220a      	movs	r2, #10
 80003be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <MX_SPI2_Init+0x64>)
 80003c2:	f001 fb1b 	bl	80019fc <HAL_SPI_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80003cc:	f000 f92e 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200000f4 	.word	0x200000f4
 80003d8:	40003800 	.word	0x40003800

080003dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003e2:	4a12      	ldr	r2, [pc, #72]	; (800042c <MX_USART2_UART_Init+0x50>)
 80003e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 8000402:	220c      	movs	r2, #12
 8000404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000412:	4805      	ldr	r0, [pc, #20]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 8000414:	f001 fdbe 	bl	8001f94 <HAL_UART_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800041e:	f000 f905 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	2000114c 	.word	0x2000114c
 800042c:	40004400 	.word	0x40004400

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000444:	4b2d      	ldr	r3, [pc, #180]	; (80004fc <MX_GPIO_Init+0xcc>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a2c      	ldr	r2, [pc, #176]	; (80004fc <MX_GPIO_Init+0xcc>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <MX_GPIO_Init+0xcc>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0310 	and.w	r3, r3, #16
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800045c:	4b27      	ldr	r3, [pc, #156]	; (80004fc <MX_GPIO_Init+0xcc>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a26      	ldr	r2, [pc, #152]	; (80004fc <MX_GPIO_Init+0xcc>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b24      	ldr	r3, [pc, #144]	; (80004fc <MX_GPIO_Init+0xcc>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0320 	and.w	r3, r3, #32
 8000470:	60bb      	str	r3, [r7, #8]
 8000472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b21      	ldr	r3, [pc, #132]	; (80004fc <MX_GPIO_Init+0xcc>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a20      	ldr	r2, [pc, #128]	; (80004fc <MX_GPIO_Init+0xcc>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <MX_GPIO_Init+0xcc>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048c:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <MX_GPIO_Init+0xcc>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a1a      	ldr	r2, [pc, #104]	; (80004fc <MX_GPIO_Init+0xcc>)
 8000492:	f043 0308 	orr.w	r3, r3, #8
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b18      	ldr	r3, [pc, #96]	; (80004fc <MX_GPIO_Init+0xcc>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0308 	and.w	r3, r3, #8
 80004a0:	603b      	str	r3, [r7, #0]
 80004a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2140      	movs	r1, #64	; 0x40
 80004a8:	4815      	ldr	r0, [pc, #84]	; (8000500 <MX_GPIO_Init+0xd0>)
 80004aa:	f000 fe53 	bl	8001154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004b4:	4b13      	ldr	r3, [pc, #76]	; (8000504 <MX_GPIO_Init+0xd4>)
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	4811      	ldr	r0, [pc, #68]	; (8000508 <MX_GPIO_Init+0xd8>)
 80004c4:	f000 fcc2 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004c8:	2340      	movs	r3, #64	; 0x40
 80004ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004cc:	2301      	movs	r3, #1
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d4:	2302      	movs	r3, #2
 80004d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4619      	mov	r1, r3
 80004de:	4808      	ldr	r0, [pc, #32]	; (8000500 <MX_GPIO_Init+0xd0>)
 80004e0:	f000 fcb4 	bl	8000e4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2100      	movs	r1, #0
 80004e8:	2028      	movs	r0, #40	; 0x28
 80004ea:	f000 fbc8 	bl	8000c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004ee:	2028      	movs	r0, #40	; 0x28
 80004f0:	f000 fbe1 	bl	8000cb6 <HAL_NVIC_EnableIRQ>

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010c00 	.word	0x40010c00
 8000504:	10110000 	.word	0x10110000
 8000508:	40011000 	.word	0x40011000

0800050c <print_network_information>:

/* USER CODE BEGIN 4 */
void print_network_information(void)
{
 800050c:	b5b0      	push	{r4, r5, r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af04      	add	r7, sp, #16
	wizchip_getnetinfo(&defaultNetInfo);
 8000512:	4830      	ldr	r0, [pc, #192]	; (80005d4 <print_network_information+0xc8>)
 8000514:	f003 fed8 	bl	80042c8 <wizchip_getnetinfo>
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",defaultNetInfo.mac[0],defaultNetInfo.mac[1],defaultNetInfo.mac[2],defaultNetInfo.mac[3],defaultNetInfo.mac[4],defaultNetInfo.mac[5]);
 8000518:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <print_network_information+0xc8>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <print_network_information+0xc8>)
 8000520:	785b      	ldrb	r3, [r3, #1]
 8000522:	461c      	mov	r4, r3
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <print_network_information+0xc8>)
 8000526:	789b      	ldrb	r3, [r3, #2]
 8000528:	461d      	mov	r5, r3
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <print_network_information+0xc8>)
 800052c:	78db      	ldrb	r3, [r3, #3]
 800052e:	461a      	mov	r2, r3
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <print_network_information+0xc8>)
 8000532:	791b      	ldrb	r3, [r3, #4]
 8000534:	4619      	mov	r1, r3
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <print_network_information+0xc8>)
 8000538:	795b      	ldrb	r3, [r3, #5]
 800053a:	9302      	str	r3, [sp, #8]
 800053c:	9101      	str	r1, [sp, #4]
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	462b      	mov	r3, r5
 8000542:	4622      	mov	r2, r4
 8000544:	4601      	mov	r1, r0
 8000546:	4824      	ldr	r0, [pc, #144]	; (80005d8 <print_network_information+0xcc>)
 8000548:	f003 ffd2 	bl	80044f0 <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",defaultNetInfo.ip[0],defaultNetInfo.ip[1],defaultNetInfo.ip[2],defaultNetInfo.ip[3]);
 800054c:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <print_network_information+0xc8>)
 800054e:	799b      	ldrb	r3, [r3, #6]
 8000550:	4619      	mov	r1, r3
 8000552:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <print_network_information+0xc8>)
 8000554:	79db      	ldrb	r3, [r3, #7]
 8000556:	461a      	mov	r2, r3
 8000558:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <print_network_information+0xc8>)
 800055a:	7a1b      	ldrb	r3, [r3, #8]
 800055c:	4618      	mov	r0, r3
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <print_network_information+0xc8>)
 8000560:	7a5b      	ldrb	r3, [r3, #9]
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	4603      	mov	r3, r0
 8000566:	481d      	ldr	r0, [pc, #116]	; (80005dc <print_network_information+0xd0>)
 8000568:	f003 ffc2 	bl	80044f0 <iprintf>
	printf("SM Mask	   : %d.%d.%d.%d\n\r",defaultNetInfo.sn[0],defaultNetInfo.sn[1],defaultNetInfo.sn[2],defaultNetInfo.sn[3]);
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <print_network_information+0xc8>)
 800056e:	7a9b      	ldrb	r3, [r3, #10]
 8000570:	4619      	mov	r1, r3
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <print_network_information+0xc8>)
 8000574:	7adb      	ldrb	r3, [r3, #11]
 8000576:	461a      	mov	r2, r3
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <print_network_information+0xc8>)
 800057a:	7b1b      	ldrb	r3, [r3, #12]
 800057c:	4618      	mov	r0, r3
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <print_network_information+0xc8>)
 8000580:	7b5b      	ldrb	r3, [r3, #13]
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	4603      	mov	r3, r0
 8000586:	4816      	ldr	r0, [pc, #88]	; (80005e0 <print_network_information+0xd4>)
 8000588:	f003 ffb2 	bl	80044f0 <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",defaultNetInfo.gw[0],defaultNetInfo.gw[1],defaultNetInfo.gw[2],defaultNetInfo.gw[3]);
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <print_network_information+0xc8>)
 800058e:	7b9b      	ldrb	r3, [r3, #14]
 8000590:	4619      	mov	r1, r3
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <print_network_information+0xc8>)
 8000594:	7bdb      	ldrb	r3, [r3, #15]
 8000596:	461a      	mov	r2, r3
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <print_network_information+0xc8>)
 800059a:	7c1b      	ldrb	r3, [r3, #16]
 800059c:	4618      	mov	r0, r3
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <print_network_information+0xc8>)
 80005a0:	7c5b      	ldrb	r3, [r3, #17]
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	4603      	mov	r3, r0
 80005a6:	480f      	ldr	r0, [pc, #60]	; (80005e4 <print_network_information+0xd8>)
 80005a8:	f003 ffa2 	bl	80044f0 <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",defaultNetInfo.dns[0],defaultNetInfo.dns[1],defaultNetInfo.dns[2],defaultNetInfo.dns[3]);
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <print_network_information+0xc8>)
 80005ae:	7c9b      	ldrb	r3, [r3, #18]
 80005b0:	4619      	mov	r1, r3
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <print_network_information+0xc8>)
 80005b4:	7cdb      	ldrb	r3, [r3, #19]
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <print_network_information+0xc8>)
 80005ba:	7d1b      	ldrb	r3, [r3, #20]
 80005bc:	4618      	mov	r0, r3
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <print_network_information+0xc8>)
 80005c0:	7d5b      	ldrb	r3, [r3, #21]
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	4603      	mov	r3, r0
 80005c6:	4808      	ldr	r0, [pc, #32]	; (80005e8 <print_network_information+0xdc>)
 80005c8:	f003 ff92 	bl	80044f0 <iprintf>
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bdb0      	pop	{r4, r5, r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000000 	.word	0x20000000
 80005d8:	080053f4 	.word	0x080053f4
 80005dc:	08005424 	.word	0x08005424
 80005e0:	08005440 	.word	0x08005440
 80005e4:	0800545c 	.word	0x0800545c
 80005e8:	08005478 	.word	0x08005478

080005ec <_write>:

int _write(int fd, char *str, int len)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	e00b      	b.n	8000616 <_write+0x2a>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	18d1      	adds	r1, r2, r3
 8000604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000608:	2201      	movs	r2, #1
 800060a:	4807      	ldr	r0, [pc, #28]	; (8000628 <_write+0x3c>)
 800060c:	f001 fd0f 	bl	800202e <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	3301      	adds	r3, #1
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	697a      	ldr	r2, [r7, #20]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	429a      	cmp	r2, r3
 800061c:	dbef      	blt.n	80005fe <_write+0x12>
	}
	return len;
 800061e:	687b      	ldr	r3, [r7, #4]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3718      	adds	r7, #24
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000114c 	.word	0x2000114c

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	e7fe      	b.n	8000634 <Error_Handler+0x8>
	...

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_MspInit+0x5c>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <HAL_MspInit+0x5c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6193      	str	r3, [r2, #24]
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_MspInit+0x5c>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_MspInit+0x5c>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_MspInit+0x5c>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_MspInit+0x5c>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_MspInit+0x60>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <HAL_MspInit+0x60>)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	40021000 	.word	0x40021000
 8000698:	40010000 	.word	0x40010000

0800069c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a1c      	ldr	r2, [pc, #112]	; (8000728 <HAL_SPI_MspInit+0x8c>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d131      	bne.n	8000720 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <HAL_SPI_MspInit+0x90>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	4a1a      	ldr	r2, [pc, #104]	; (800072c <HAL_SPI_MspInit+0x90>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	61d3      	str	r3, [r2, #28]
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <HAL_SPI_MspInit+0x90>)
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <HAL_SPI_MspInit+0x90>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a14      	ldr	r2, [pc, #80]	; (800072c <HAL_SPI_MspInit+0x90>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <HAL_SPI_MspInit+0x90>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0308 	and.w	r3, r3, #8
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80006ec:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80006f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <HAL_SPI_MspInit+0x94>)
 8000702:	f000 fba3 	bl	8000e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000706:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800070a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	4619      	mov	r1, r3
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <HAL_SPI_MspInit+0x94>)
 800071c:	f000 fb96 	bl	8000e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000720:	bf00      	nop
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40003800 	.word	0x40003800
 800072c:	40021000 	.word	0x40021000
 8000730:	40010c00 	.word	0x40010c00

08000734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <HAL_UART_MspInit+0x80>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d12b      	bne.n	80007ac <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_UART_MspInit+0x84>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <HAL_UART_MspInit+0x84>)
 800075a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800075e:	61d3      	str	r3, [r2, #28]
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_UART_MspInit+0x84>)
 8000762:	69db      	ldr	r3, [r3, #28]
 8000764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_UART_MspInit+0x84>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a11      	ldr	r2, [pc, #68]	; (80007b8 <HAL_UART_MspInit+0x84>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_UART_MspInit+0x84>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000784:	230c      	movs	r3, #12
 8000786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2302      	movs	r3, #2
 800078e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4619      	mov	r1, r3
 8000796:	4809      	ldr	r0, [pc, #36]	; (80007bc <HAL_UART_MspInit+0x88>)
 8000798:	f000 fb58 	bl	8000e4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	2026      	movs	r0, #38	; 0x26
 80007a2:	f000 fa6c 	bl	8000c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007a6:	2026      	movs	r0, #38	; 0x26
 80007a8:	f000 fa85 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40004400 	.word	0x40004400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010800 	.word	0x40010800

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <NMI_Handler+0x4>

080007c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <MemManage_Handler+0x4>

080007d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <UsageFault_Handler+0x4>

080007de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr

08000802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000806:	f000 f923 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <USART2_IRQHandler+0x10>)
 8000816:	f001 fc9d 	bl	8002154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000114c 	.word	0x2000114c

08000824 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000828:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800082c:	f000 fcaa 	bl	8001184 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}

08000834 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	e00a      	b.n	800085c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000846:	f3af 8000 	nop.w
 800084a:	4601      	mov	r1, r0
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	60ba      	str	r2, [r7, #8]
 8000852:	b2ca      	uxtb	r2, r1
 8000854:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	3301      	adds	r3, #1
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697a      	ldr	r2, [r7, #20]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	429a      	cmp	r2, r3
 8000862:	dbf0      	blt.n	8000846 <_read+0x12>
	}

return len;
 8000864:	687b      	ldr	r3, [r7, #4]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <_close>:
	}
	return len;
}

int _close(int file)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	return -1;
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000894:	605a      	str	r2, [r3, #4]
	return 0;
 8000896:	2300      	movs	r3, #0
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <_isatty>:

int _isatty(int file)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
	return 1;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr

080008b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b085      	sub	sp, #20
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	60f8      	str	r0, [r7, #12]
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
	return 0;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
	...

080008d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d8:	4a14      	ldr	r2, [pc, #80]	; (800092c <_sbrk+0x5c>)
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <_sbrk+0x60>)
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <_sbrk+0x64>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <_sbrk+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d207      	bcs.n	8000910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000900:	f003 fd1e 	bl	8004340 <__errno>
 8000904:	4603      	mov	r3, r0
 8000906:	220c      	movs	r2, #12
 8000908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	e009      	b.n	8000924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	4a05      	ldr	r2, [pc, #20]	; (8000934 <_sbrk+0x64>)
 8000920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20005000 	.word	0x20005000
 8000930:	00000400 	.word	0x00000400
 8000934:	200000d0 	.word	0x200000d0
 8000938:	200021a8 	.word	0x200021a8

0800093c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <resetAssert>:


}

void resetAssert(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2180      	movs	r1, #128	; 0x80
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <resetAssert+0x14>)
 8000952:	f000 fbff 	bl	8001154 <HAL_GPIO_WritePin>
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40011000 	.word	0x40011000

08000960 <resetDeassert>:

void resetDeassert(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	2180      	movs	r1, #128	; 0x80
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <resetDeassert+0x14>)
 800096a:	f000 fbf3 	bl	8001154 <HAL_GPIO_WritePin>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40011000 	.word	0x40011000

08000978 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800097a:	490d      	ldr	r1, [pc, #52]	; (80009b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000990:	4c0a      	ldr	r4, [pc, #40]	; (80009bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800099e:	f7ff ffcd 	bl	800093c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009a2:	f003 fcd3 	bl	800434c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009a6:	f7ff fc6d 	bl	8000284 <main>
  bx lr
 80009aa:	4770      	bx	lr
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80009b4:	08005670 	.word	0x08005670
  ldr r2, =_sbss
 80009b8:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80009bc:	200021a4 	.word	0x200021a4

080009c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC1_2_IRQHandler>
	...

080009c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_Init+0x28>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a07      	ldr	r2, [pc, #28]	; (80009ec <HAL_Init+0x28>)
 80009ce:	f043 0310 	orr.w	r3, r3, #16
 80009d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 f947 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 f808 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e0:	f7ff fe2a 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40022000 	.word	0x40022000

080009f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_InitTick+0x54>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_InitTick+0x58>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f95f 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00e      	b.n	8000a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d80a      	bhi.n	8000a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	f000 f927 	bl	8000c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_InitTick+0x5c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000018 	.word	0x20000018
 8000a48:	20000020 	.word	0x20000020
 8000a4c:	2000001c 	.word	0x2000001c

08000a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_IncTick+0x1c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_IncTick+0x20>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a03      	ldr	r2, [pc, #12]	; (8000a70 <HAL_IncTick+0x20>)
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000020 	.word	0x20000020
 8000a70:	20002190 	.word	0x20002190

08000a74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b02      	ldr	r3, [pc, #8]	; (8000a84 <HAL_GetTick+0x10>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	20002190 	.word	0x20002190

08000a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a90:	f7ff fff0 	bl	8000a74 <HAL_GetTick>
 8000a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa0:	d005      	beq.n	8000aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_Delay+0x44>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aae:	bf00      	nop
 8000ab0:	f7ff ffe0 	bl	8000a74 <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8f7      	bhi.n	8000ab0 <HAL_Delay+0x28>
  {
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000020 	.word	0x20000020

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 021f 	and.w	r2, r3, #31
 8000b4c:	4906      	ldr	r1, [pc, #24]	; (8000b68 <__NVIC_EnableIRQ+0x34>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f7ff ff90 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff2d 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff42 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff90 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5f 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff35 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffa2 	bl	8000c24 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d008      	beq.n	8000d12 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2204      	movs	r2, #4
 8000d04:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e020      	b.n	8000d54 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 020e 	bic.w	r2, r2, #14
 8000d20:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f022 0201 	bic.w	r2, r2, #1
 8000d30:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d40:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2201      	movs	r2, #1
 8000d46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
	...

08000d60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d005      	beq.n	8000d82 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2204      	movs	r2, #4
 8000d7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e051      	b.n	8000e26 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 020e 	bic.w	r2, r2, #14
 8000d90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f022 0201 	bic.w	r2, r2, #1
 8000da0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a22      	ldr	r2, [pc, #136]	; (8000e30 <HAL_DMA_Abort_IT+0xd0>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d029      	beq.n	8000e00 <HAL_DMA_Abort_IT+0xa0>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a20      	ldr	r2, [pc, #128]	; (8000e34 <HAL_DMA_Abort_IT+0xd4>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d022      	beq.n	8000dfc <HAL_DMA_Abort_IT+0x9c>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a1f      	ldr	r2, [pc, #124]	; (8000e38 <HAL_DMA_Abort_IT+0xd8>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d01a      	beq.n	8000df6 <HAL_DMA_Abort_IT+0x96>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1d      	ldr	r2, [pc, #116]	; (8000e3c <HAL_DMA_Abort_IT+0xdc>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d012      	beq.n	8000df0 <HAL_DMA_Abort_IT+0x90>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a1c      	ldr	r2, [pc, #112]	; (8000e40 <HAL_DMA_Abort_IT+0xe0>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d00a      	beq.n	8000dea <HAL_DMA_Abort_IT+0x8a>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a1a      	ldr	r2, [pc, #104]	; (8000e44 <HAL_DMA_Abort_IT+0xe4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d102      	bne.n	8000de4 <HAL_DMA_Abort_IT+0x84>
 8000dde:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000de2:	e00e      	b.n	8000e02 <HAL_DMA_Abort_IT+0xa2>
 8000de4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000de8:	e00b      	b.n	8000e02 <HAL_DMA_Abort_IT+0xa2>
 8000dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dee:	e008      	b.n	8000e02 <HAL_DMA_Abort_IT+0xa2>
 8000df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df4:	e005      	b.n	8000e02 <HAL_DMA_Abort_IT+0xa2>
 8000df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfa:	e002      	b.n	8000e02 <HAL_DMA_Abort_IT+0xa2>
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	e000      	b.n	8000e02 <HAL_DMA_Abort_IT+0xa2>
 8000e00:	2301      	movs	r3, #1
 8000e02:	4a11      	ldr	r2, [pc, #68]	; (8000e48 <HAL_DMA_Abort_IT+0xe8>)
 8000e04:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	4798      	blx	r3
    } 
  }
  return status;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40020008 	.word	0x40020008
 8000e34:	4002001c 	.word	0x4002001c
 8000e38:	40020030 	.word	0x40020030
 8000e3c:	40020044 	.word	0x40020044
 8000e40:	40020058 	.word	0x40020058
 8000e44:	4002006c 	.word	0x4002006c
 8000e48:	40020000 	.word	0x40020000

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b08b      	sub	sp, #44	; 0x2c
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5e:	e169      	b.n	8001134 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e60:	2201      	movs	r2, #1
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	69fa      	ldr	r2, [r7, #28]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f040 8158 	bne.w	800112e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	4a9a      	ldr	r2, [pc, #616]	; (80010ec <HAL_GPIO_Init+0x2a0>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d05e      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000e88:	4a98      	ldr	r2, [pc, #608]	; (80010ec <HAL_GPIO_Init+0x2a0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d875      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000e8e:	4a98      	ldr	r2, [pc, #608]	; (80010f0 <HAL_GPIO_Init+0x2a4>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d058      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000e94:	4a96      	ldr	r2, [pc, #600]	; (80010f0 <HAL_GPIO_Init+0x2a4>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d86f      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000e9a:	4a96      	ldr	r2, [pc, #600]	; (80010f4 <HAL_GPIO_Init+0x2a8>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d052      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000ea0:	4a94      	ldr	r2, [pc, #592]	; (80010f4 <HAL_GPIO_Init+0x2a8>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d869      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000ea6:	4a94      	ldr	r2, [pc, #592]	; (80010f8 <HAL_GPIO_Init+0x2ac>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d04c      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000eac:	4a92      	ldr	r2, [pc, #584]	; (80010f8 <HAL_GPIO_Init+0x2ac>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d863      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000eb2:	4a92      	ldr	r2, [pc, #584]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d046      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000eb8:	4a90      	ldr	r2, [pc, #576]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d85d      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000ebe:	2b12      	cmp	r3, #18
 8000ec0:	d82a      	bhi.n	8000f18 <HAL_GPIO_Init+0xcc>
 8000ec2:	2b12      	cmp	r3, #18
 8000ec4:	d859      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000ec6:	a201      	add	r2, pc, #4	; (adr r2, 8000ecc <HAL_GPIO_Init+0x80>)
 8000ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ecc:	08000f47 	.word	0x08000f47
 8000ed0:	08000f21 	.word	0x08000f21
 8000ed4:	08000f33 	.word	0x08000f33
 8000ed8:	08000f75 	.word	0x08000f75
 8000edc:	08000f7b 	.word	0x08000f7b
 8000ee0:	08000f7b 	.word	0x08000f7b
 8000ee4:	08000f7b 	.word	0x08000f7b
 8000ee8:	08000f7b 	.word	0x08000f7b
 8000eec:	08000f7b 	.word	0x08000f7b
 8000ef0:	08000f7b 	.word	0x08000f7b
 8000ef4:	08000f7b 	.word	0x08000f7b
 8000ef8:	08000f7b 	.word	0x08000f7b
 8000efc:	08000f7b 	.word	0x08000f7b
 8000f00:	08000f7b 	.word	0x08000f7b
 8000f04:	08000f7b 	.word	0x08000f7b
 8000f08:	08000f7b 	.word	0x08000f7b
 8000f0c:	08000f7b 	.word	0x08000f7b
 8000f10:	08000f29 	.word	0x08000f29
 8000f14:	08000f3d 	.word	0x08000f3d
 8000f18:	4a79      	ldr	r2, [pc, #484]	; (8001100 <HAL_GPIO_Init+0x2b4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f1e:	e02c      	b.n	8000f7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	623b      	str	r3, [r7, #32]
          break;
 8000f26:	e029      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	623b      	str	r3, [r7, #32]
          break;
 8000f30:	e024      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	3308      	adds	r3, #8
 8000f38:	623b      	str	r3, [r7, #32]
          break;
 8000f3a:	e01f      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	330c      	adds	r3, #12
 8000f42:	623b      	str	r3, [r7, #32]
          break;
 8000f44:	e01a      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d102      	bne.n	8000f54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f4e:	2304      	movs	r3, #4
 8000f50:	623b      	str	r3, [r7, #32]
          break;
 8000f52:	e013      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d105      	bne.n	8000f68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69fa      	ldr	r2, [r7, #28]
 8000f64:	611a      	str	r2, [r3, #16]
          break;
 8000f66:	e009      	b.n	8000f7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	615a      	str	r2, [r3, #20]
          break;
 8000f72:	e003      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
          break;
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          break;
 8000f7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	2bff      	cmp	r3, #255	; 0xff
 8000f80:	d801      	bhi.n	8000f86 <HAL_GPIO_Init+0x13a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	e001      	b.n	8000f8a <HAL_GPIO_Init+0x13e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2bff      	cmp	r3, #255	; 0xff
 8000f90:	d802      	bhi.n	8000f98 <HAL_GPIO_Init+0x14c>
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	e002      	b.n	8000f9e <HAL_GPIO_Init+0x152>
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	3b08      	subs	r3, #8
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	401a      	ands	r2, r3
 8000fb0:	6a39      	ldr	r1, [r7, #32]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 80b1 	beq.w	800112e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fcc:	4b4d      	ldr	r3, [pc, #308]	; (8001104 <HAL_GPIO_Init+0x2b8>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a4c      	ldr	r2, [pc, #304]	; (8001104 <HAL_GPIO_Init+0x2b8>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b4a      	ldr	r3, [pc, #296]	; (8001104 <HAL_GPIO_Init+0x2b8>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fe4:	4a48      	ldr	r2, [pc, #288]	; (8001108 <HAL_GPIO_Init+0x2bc>)
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a40      	ldr	r2, [pc, #256]	; (800110c <HAL_GPIO_Init+0x2c0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d013      	beq.n	8001038 <HAL_GPIO_Init+0x1ec>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a3f      	ldr	r2, [pc, #252]	; (8001110 <HAL_GPIO_Init+0x2c4>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d00d      	beq.n	8001034 <HAL_GPIO_Init+0x1e8>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a3e      	ldr	r2, [pc, #248]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d007      	beq.n	8001030 <HAL_GPIO_Init+0x1e4>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a3d      	ldr	r2, [pc, #244]	; (8001118 <HAL_GPIO_Init+0x2cc>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d101      	bne.n	800102c <HAL_GPIO_Init+0x1e0>
 8001028:	2303      	movs	r3, #3
 800102a:	e006      	b.n	800103a <HAL_GPIO_Init+0x1ee>
 800102c:	2304      	movs	r3, #4
 800102e:	e004      	b.n	800103a <HAL_GPIO_Init+0x1ee>
 8001030:	2302      	movs	r3, #2
 8001032:	e002      	b.n	800103a <HAL_GPIO_Init+0x1ee>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <HAL_GPIO_Init+0x1ee>
 8001038:	2300      	movs	r3, #0
 800103a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800103c:	f002 0203 	and.w	r2, r2, #3
 8001040:	0092      	lsls	r2, r2, #2
 8001042:	4093      	lsls	r3, r2
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800104a:	492f      	ldr	r1, [pc, #188]	; (8001108 <HAL_GPIO_Init+0x2bc>)
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	3302      	adds	r3, #2
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001064:	4b2d      	ldr	r3, [pc, #180]	; (800111c <HAL_GPIO_Init+0x2d0>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	492c      	ldr	r1, [pc, #176]	; (800111c <HAL_GPIO_Init+0x2d0>)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	600b      	str	r3, [r1, #0]
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <HAL_GPIO_Init+0x2d0>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	43db      	mvns	r3, r3
 800107a:	4928      	ldr	r1, [pc, #160]	; (800111c <HAL_GPIO_Init+0x2d0>)
 800107c:	4013      	ands	r3, r2
 800107e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d006      	beq.n	800109a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <HAL_GPIO_Init+0x2d0>)
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	4922      	ldr	r1, [pc, #136]	; (800111c <HAL_GPIO_Init+0x2d0>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	604b      	str	r3, [r1, #4]
 8001098:	e006      	b.n	80010a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <HAL_GPIO_Init+0x2d0>)
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	491e      	ldr	r1, [pc, #120]	; (800111c <HAL_GPIO_Init+0x2d0>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d006      	beq.n	80010c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_GPIO_Init+0x2d0>)
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	4918      	ldr	r1, [pc, #96]	; (800111c <HAL_GPIO_Init+0x2d0>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	608b      	str	r3, [r1, #8]
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_GPIO_Init+0x2d0>)
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	4914      	ldr	r1, [pc, #80]	; (800111c <HAL_GPIO_Init+0x2d0>)
 80010cc:	4013      	ands	r3, r2
 80010ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d021      	beq.n	8001120 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_GPIO_Init+0x2d0>)
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	490e      	ldr	r1, [pc, #56]	; (800111c <HAL_GPIO_Init+0x2d0>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	60cb      	str	r3, [r1, #12]
 80010e8:	e021      	b.n	800112e <HAL_GPIO_Init+0x2e2>
 80010ea:	bf00      	nop
 80010ec:	10320000 	.word	0x10320000
 80010f0:	10310000 	.word	0x10310000
 80010f4:	10220000 	.word	0x10220000
 80010f8:	10210000 	.word	0x10210000
 80010fc:	10120000 	.word	0x10120000
 8001100:	10110000 	.word	0x10110000
 8001104:	40021000 	.word	0x40021000
 8001108:	40010000 	.word	0x40010000
 800110c:	40010800 	.word	0x40010800
 8001110:	40010c00 	.word	0x40010c00
 8001114:	40011000 	.word	0x40011000
 8001118:	40011400 	.word	0x40011400
 800111c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_GPIO_Init+0x304>)
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	43db      	mvns	r3, r3
 8001128:	4909      	ldr	r1, [pc, #36]	; (8001150 <HAL_GPIO_Init+0x304>)
 800112a:	4013      	ands	r3, r2
 800112c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	3301      	adds	r3, #1
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	fa22 f303 	lsr.w	r3, r2, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	f47f ae8e 	bne.w	8000e60 <HAL_GPIO_Init+0x14>
  }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	372c      	adds	r7, #44	; 0x2c
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	40010400 	.word	0x40010400

08001154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
 8001160:	4613      	mov	r3, r2
 8001162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001164:	787b      	ldrb	r3, [r7, #1]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001170:	e003      	b.n	800117a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	041a      	lsls	r2, r3, #16
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	611a      	str	r2, [r3, #16]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	4013      	ands	r3, r2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d006      	beq.n	80011a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f806 	bl	80011b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40010400 	.word	0x40010400

080011b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e26c      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 8087 	beq.w	80012f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011e8:	4b92      	ldr	r3, [pc, #584]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d00c      	beq.n	800120e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011f4:	4b8f      	ldr	r3, [pc, #572]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 030c 	and.w	r3, r3, #12
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d112      	bne.n	8001226 <HAL_RCC_OscConfig+0x5e>
 8001200:	4b8c      	ldr	r3, [pc, #560]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120c:	d10b      	bne.n	8001226 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120e:	4b89      	ldr	r3, [pc, #548]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d06c      	beq.n	80012f4 <HAL_RCC_OscConfig+0x12c>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d168      	bne.n	80012f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e246      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800122e:	d106      	bne.n	800123e <HAL_RCC_OscConfig+0x76>
 8001230:	4b80      	ldr	r3, [pc, #512]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a7f      	ldr	r2, [pc, #508]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	e02e      	b.n	800129c <HAL_RCC_OscConfig+0xd4>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10c      	bne.n	8001260 <HAL_RCC_OscConfig+0x98>
 8001246:	4b7b      	ldr	r3, [pc, #492]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a7a      	ldr	r2, [pc, #488]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 800124c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b78      	ldr	r3, [pc, #480]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a77      	ldr	r2, [pc, #476]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001258:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e01d      	b.n	800129c <HAL_RCC_OscConfig+0xd4>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0xbc>
 800126a:	4b72      	ldr	r3, [pc, #456]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a71      	ldr	r2, [pc, #452]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b6f      	ldr	r3, [pc, #444]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a6e      	ldr	r2, [pc, #440]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 800127c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e00b      	b.n	800129c <HAL_RCC_OscConfig+0xd4>
 8001284:	4b6b      	ldr	r3, [pc, #428]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a6a      	ldr	r2, [pc, #424]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 800128a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b68      	ldr	r3, [pc, #416]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a67      	ldr	r2, [pc, #412]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d013      	beq.n	80012cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7ff fbe6 	bl	8000a74 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ac:	f7ff fbe2 	bl	8000a74 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b64      	cmp	r3, #100	; 0x64
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e1fa      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	4b5d      	ldr	r3, [pc, #372]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0xe4>
 80012ca:	e014      	b.n	80012f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fbd2 	bl	8000a74 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fbce 	bl	8000a74 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	; 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e1e6      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e6:	4b53      	ldr	r3, [pc, #332]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0x10c>
 80012f2:	e000      	b.n	80012f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d063      	beq.n	80013ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001302:	4b4c      	ldr	r3, [pc, #304]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00b      	beq.n	8001326 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800130e:	4b49      	ldr	r3, [pc, #292]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b08      	cmp	r3, #8
 8001318:	d11c      	bne.n	8001354 <HAL_RCC_OscConfig+0x18c>
 800131a:	4b46      	ldr	r3, [pc, #280]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d116      	bne.n	8001354 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001326:	4b43      	ldr	r3, [pc, #268]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <HAL_RCC_OscConfig+0x176>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d001      	beq.n	800133e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e1ba      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133e:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4939      	ldr	r1, [pc, #228]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001352:	e03a      	b.n	80013ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d020      	beq.n	800139e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800135c:	4b36      	ldr	r3, [pc, #216]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001362:	f7ff fb87 	bl	8000a74 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136a:	f7ff fb83 	bl	8000a74 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e19b      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137c:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0f0      	beq.n	800136a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001388:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	4927      	ldr	r1, [pc, #156]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001398:	4313      	orrs	r3, r2
 800139a:	600b      	str	r3, [r1, #0]
 800139c:	e015      	b.n	80013ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fb66 	bl	8000a74 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ac:	f7ff fb62 	bl	8000a74 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e17a      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013be:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d03a      	beq.n	800144c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d019      	beq.n	8001412 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_RCC_OscConfig+0x274>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e4:	f7ff fb46 	bl	8000a74 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ec:	f7ff fb42 	bl	8000a74 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e15a      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800140a:	2001      	movs	r0, #1
 800140c:	f000 fad8 	bl	80019c0 <RCC_Delay>
 8001410:	e01c      	b.n	800144c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_RCC_OscConfig+0x274>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001418:	f7ff fb2c 	bl	8000a74 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141e:	e00f      	b.n	8001440 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001420:	f7ff fb28 	bl	8000a74 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d908      	bls.n	8001440 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e140      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	42420000 	.word	0x42420000
 800143c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001440:	4b9e      	ldr	r3, [pc, #632]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1e9      	bne.n	8001420 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80a6 	beq.w	80015a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145e:	4b97      	ldr	r3, [pc, #604]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10d      	bne.n	8001486 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	4b94      	ldr	r3, [pc, #592]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	4a93      	ldr	r2, [pc, #588]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	61d3      	str	r3, [r2, #28]
 8001476:	4b91      	ldr	r3, [pc, #580]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001482:	2301      	movs	r3, #1
 8001484:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001486:	4b8e      	ldr	r3, [pc, #568]	; (80016c0 <HAL_RCC_OscConfig+0x4f8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d118      	bne.n	80014c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001492:	4b8b      	ldr	r3, [pc, #556]	; (80016c0 <HAL_RCC_OscConfig+0x4f8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a8a      	ldr	r2, [pc, #552]	; (80016c0 <HAL_RCC_OscConfig+0x4f8>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149e:	f7ff fae9 	bl	8000a74 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a6:	f7ff fae5 	bl	8000a74 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b64      	cmp	r3, #100	; 0x64
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e0fd      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	4b81      	ldr	r3, [pc, #516]	; (80016c0 <HAL_RCC_OscConfig+0x4f8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d106      	bne.n	80014da <HAL_RCC_OscConfig+0x312>
 80014cc:	4b7b      	ldr	r3, [pc, #492]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	4a7a      	ldr	r2, [pc, #488]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6213      	str	r3, [r2, #32]
 80014d8:	e02d      	b.n	8001536 <HAL_RCC_OscConfig+0x36e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x334>
 80014e2:	4b76      	ldr	r3, [pc, #472]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4a75      	ldr	r2, [pc, #468]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	6213      	str	r3, [r2, #32]
 80014ee:	4b73      	ldr	r3, [pc, #460]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	4a72      	ldr	r2, [pc, #456]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 80014f4:	f023 0304 	bic.w	r3, r3, #4
 80014f8:	6213      	str	r3, [r2, #32]
 80014fa:	e01c      	b.n	8001536 <HAL_RCC_OscConfig+0x36e>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b05      	cmp	r3, #5
 8001502:	d10c      	bne.n	800151e <HAL_RCC_OscConfig+0x356>
 8001504:	4b6d      	ldr	r3, [pc, #436]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4a6c      	ldr	r2, [pc, #432]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	6213      	str	r3, [r2, #32]
 8001510:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4a69      	ldr	r2, [pc, #420]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6213      	str	r3, [r2, #32]
 800151c:	e00b      	b.n	8001536 <HAL_RCC_OscConfig+0x36e>
 800151e:	4b67      	ldr	r3, [pc, #412]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4a66      	ldr	r2, [pc, #408]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 8001524:	f023 0301 	bic.w	r3, r3, #1
 8001528:	6213      	str	r3, [r2, #32]
 800152a:	4b64      	ldr	r3, [pc, #400]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4a63      	ldr	r2, [pc, #396]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 8001530:	f023 0304 	bic.w	r3, r3, #4
 8001534:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d015      	beq.n	800156a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153e:	f7ff fa99 	bl	8000a74 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001544:	e00a      	b.n	800155c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001546:	f7ff fa95 	bl	8000a74 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	f241 3288 	movw	r2, #5000	; 0x1388
 8001554:	4293      	cmp	r3, r2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e0ab      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155c:	4b57      	ldr	r3, [pc, #348]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0ee      	beq.n	8001546 <HAL_RCC_OscConfig+0x37e>
 8001568:	e014      	b.n	8001594 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156a:	f7ff fa83 	bl	8000a74 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001570:	e00a      	b.n	8001588 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001572:	f7ff fa7f 	bl	8000a74 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001580:	4293      	cmp	r3, r2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e095      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001588:	4b4c      	ldr	r3, [pc, #304]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1ee      	bne.n	8001572 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001594:	7dfb      	ldrb	r3, [r7, #23]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d105      	bne.n	80015a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159a:	4b48      	ldr	r3, [pc, #288]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a47      	ldr	r2, [pc, #284]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 80015a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 8081 	beq.w	80016b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b0:	4b42      	ldr	r3, [pc, #264]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d061      	beq.n	8001680 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d146      	bne.n	8001652 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c4:	4b3f      	ldr	r3, [pc, #252]	; (80016c4 <HAL_RCC_OscConfig+0x4fc>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ca:	f7ff fa53 	bl	8000a74 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d2:	f7ff fa4f 	bl	8000a74 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e067      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e4:	4b35      	ldr	r3, [pc, #212]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f8:	d108      	bne.n	800160c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015fa:	4b30      	ldr	r3, [pc, #192]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	492d      	ldr	r1, [pc, #180]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800160c:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a19      	ldr	r1, [r3, #32]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	430b      	orrs	r3, r1
 800161e:	4927      	ldr	r1, [pc, #156]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001624:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_RCC_OscConfig+0x4fc>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff fa23 	bl	8000a74 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff fa1f 	bl	8000a74 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e037      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x46a>
 8001650:	e02f      	b.n	80016b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <HAL_RCC_OscConfig+0x4fc>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fa0c 	bl	8000a74 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff fa08 	bl	8000a74 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e020      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x498>
 800167e:	e018      	b.n	80016b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e013      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_RCC_OscConfig+0x4f4>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	429a      	cmp	r2, r3
 800169e:	d106      	bne.n	80016ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d001      	beq.n	80016b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40007000 	.word	0x40007000
 80016c4:	42420060 	.word	0x42420060

080016c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0d0      	b.n	800187e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016dc:	4b6a      	ldr	r3, [pc, #424]	; (8001888 <HAL_RCC_ClockConfig+0x1c0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d910      	bls.n	800170c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	4b67      	ldr	r3, [pc, #412]	; (8001888 <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 0207 	bic.w	r2, r3, #7
 80016f2:	4965      	ldr	r1, [pc, #404]	; (8001888 <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fa:	4b63      	ldr	r3, [pc, #396]	; (8001888 <HAL_RCC_ClockConfig+0x1c0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0b8      	b.n	800187e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d020      	beq.n	800175a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001724:	4b59      	ldr	r3, [pc, #356]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	4a58      	ldr	r2, [pc, #352]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 800172a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800172e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800173c:	4b53      	ldr	r3, [pc, #332]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	4a52      	ldr	r2, [pc, #328]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001746:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001748:	4b50      	ldr	r3, [pc, #320]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	494d      	ldr	r1, [pc, #308]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	4313      	orrs	r3, r2
 8001758:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d040      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d107      	bne.n	800177e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	4b47      	ldr	r3, [pc, #284]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d115      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e07f      	b.n	800187e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001786:	4b41      	ldr	r3, [pc, #260]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e073      	b.n	800187e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001796:	4b3d      	ldr	r3, [pc, #244]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e06b      	b.n	800187e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a6:	4b39      	ldr	r3, [pc, #228]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f023 0203 	bic.w	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4936      	ldr	r1, [pc, #216]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b8:	f7ff f95c 	bl	8000a74 <HAL_GetTick>
 80017bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017be:	e00a      	b.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c0:	f7ff f958 	bl	8000a74 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e053      	b.n	800187e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 020c 	and.w	r2, r3, #12
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d1eb      	bne.n	80017c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017e8:	4b27      	ldr	r3, [pc, #156]	; (8001888 <HAL_RCC_ClockConfig+0x1c0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d210      	bcs.n	8001818 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b24      	ldr	r3, [pc, #144]	; (8001888 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 0207 	bic.w	r2, r3, #7
 80017fe:	4922      	ldr	r1, [pc, #136]	; (8001888 <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e032      	b.n	800187e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4916      	ldr	r1, [pc, #88]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d009      	beq.n	8001856 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	490e      	ldr	r1, [pc, #56]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	4313      	orrs	r3, r2
 8001854:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001856:	f000 f821 	bl	800189c <HAL_RCC_GetSysClockFreq>
 800185a:	4602      	mov	r2, r0
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	490a      	ldr	r1, [pc, #40]	; (8001890 <HAL_RCC_ClockConfig+0x1c8>)
 8001868:	5ccb      	ldrb	r3, [r1, r3]
 800186a:	fa22 f303 	lsr.w	r3, r2, r3
 800186e:	4a09      	ldr	r2, [pc, #36]	; (8001894 <HAL_RCC_ClockConfig+0x1cc>)
 8001870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_RCC_ClockConfig+0x1d0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff f8ba 	bl	80009f0 <HAL_InitTick>

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40022000 	.word	0x40022000
 800188c:	40021000 	.word	0x40021000
 8001890:	080055b8 	.word	0x080055b8
 8001894:	20000018 	.word	0x20000018
 8001898:	2000001c 	.word	0x2000001c

0800189c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800189c:	b490      	push	{r4, r7}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018a2:	4b2a      	ldr	r3, [pc, #168]	; (800194c <HAL_RCC_GetSysClockFreq+0xb0>)
 80018a4:	1d3c      	adds	r4, r7, #4
 80018a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018ac:	f240 2301 	movw	r3, #513	; 0x201
 80018b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d002      	beq.n	80018dc <HAL_RCC_GetSysClockFreq+0x40>
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d003      	beq.n	80018e2 <HAL_RCC_GetSysClockFreq+0x46>
 80018da:	e02d      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018de:	623b      	str	r3, [r7, #32]
      break;
 80018e0:	e02d      	b.n	800193e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	0c9b      	lsrs	r3, r3, #18
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018ee:	4413      	add	r3, r2
 80018f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	0c5b      	lsrs	r3, r3, #17
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800190e:	4413      	add	r3, r2
 8001910:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001914:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 800191a:	fb02 f203 	mul.w	r2, r2, r3
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	fbb2 f3f3 	udiv	r3, r2, r3
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
 8001926:	e004      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <HAL_RCC_GetSysClockFreq+0xbc>)
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	623b      	str	r3, [r7, #32]
      break;
 8001936:	e002      	b.n	800193e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 800193a:	623b      	str	r3, [r7, #32]
      break;
 800193c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800193e:	6a3b      	ldr	r3, [r7, #32]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3728      	adds	r7, #40	; 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bc90      	pop	{r4, r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	08005494 	.word	0x08005494
 8001950:	40021000 	.word	0x40021000
 8001954:	007a1200 	.word	0x007a1200
 8001958:	003d0900 	.word	0x003d0900

0800195c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001960:	4b02      	ldr	r3, [pc, #8]	; (800196c <HAL_RCC_GetHCLKFreq+0x10>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	20000018 	.word	0x20000018

08001970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001974:	f7ff fff2 	bl	800195c <HAL_RCC_GetHCLKFreq>
 8001978:	4602      	mov	r2, r0
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	4903      	ldr	r1, [pc, #12]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	080055c8 	.word	0x080055c8

08001998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800199c:	f7ff ffde 	bl	800195c <HAL_RCC_GetHCLKFreq>
 80019a0:	4602      	mov	r2, r0
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	0adb      	lsrs	r3, r3, #11
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	4903      	ldr	r1, [pc, #12]	; (80019bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ae:	5ccb      	ldrb	r3, [r1, r3]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	080055c8 	.word	0x080055c8

080019c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <RCC_Delay+0x34>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <RCC_Delay+0x38>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	0a5b      	lsrs	r3, r3, #9
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	fb02 f303 	mul.w	r3, r2, r3
 80019da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019dc:	bf00      	nop
  }
  while (Delay --);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1e5a      	subs	r2, r3, #1
 80019e2:	60fa      	str	r2, [r7, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f9      	bne.n	80019dc <RCC_Delay+0x1c>
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	20000018 	.word	0x20000018
 80019f8:	10624dd3 	.word	0x10624dd3

080019fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e076      	b.n	8001afc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d108      	bne.n	8001a28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a1e:	d009      	beq.n	8001a34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
 8001a26:	e005      	b.n	8001a34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7fe fe24 	bl	800069c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab8:	ea42 0103 	orr.w	r1, r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	0c1a      	lsrs	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f002 0204 	and.w	r2, r2, #4
 8001ada:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	69da      	ldr	r2, [r3, #28]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	; 0x30
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001b12:	2301      	movs	r3, #1
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_SPI_TransmitReceive+0x26>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e18a      	b.n	8001e40 <HAL_SPI_TransmitReceive+0x33c>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b32:	f7fe ff9f 	bl	8000a74 <HAL_GetTick>
 8001b36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d00f      	beq.n	8001b74 <HAL_SPI_TransmitReceive+0x70>
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b5a:	d107      	bne.n	8001b6c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d103      	bne.n	8001b6c <HAL_SPI_TransmitReceive+0x68>
 8001b64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d003      	beq.n	8001b74 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b72:	e15b      	b.n	8001e2c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d005      	beq.n	8001b86 <HAL_SPI_TransmitReceive+0x82>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <HAL_SPI_TransmitReceive+0x82>
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d103      	bne.n	8001b8e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b8c:	e14e      	b.n	8001e2c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d003      	beq.n	8001ba2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2205      	movs	r2, #5
 8001b9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	887a      	ldrh	r2, [r7, #2]
 8001bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	887a      	ldrh	r2, [r7, #2]
 8001bca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be2:	2b40      	cmp	r3, #64	; 0x40
 8001be4:	d007      	beq.n	8001bf6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bfe:	d178      	bne.n	8001cf2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_SPI_TransmitReceive+0x10a>
 8001c08:	8b7b      	ldrh	r3, [r7, #26]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d166      	bne.n	8001cdc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	881a      	ldrh	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	1c9a      	adds	r2, r3, #2
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c32:	e053      	b.n	8001cdc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d11b      	bne.n	8001c7a <HAL_SPI_TransmitReceive+0x176>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d016      	beq.n	8001c7a <HAL_SPI_TransmitReceive+0x176>
 8001c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d113      	bne.n	8001c7a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	881a      	ldrh	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	1c9a      	adds	r2, r3, #2
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d119      	bne.n	8001cbc <HAL_SPI_TransmitReceive+0x1b8>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d014      	beq.n	8001cbc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9c:	b292      	uxth	r2, r2
 8001c9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca4:	1c9a      	adds	r2, r3, #2
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001cbc:	f7fe feda 	bl	8000a74 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d807      	bhi.n	8001cdc <HAL_SPI_TransmitReceive+0x1d8>
 8001ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd2:	d003      	beq.n	8001cdc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001cda:	e0a7      	b.n	8001e2c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1a6      	bne.n	8001c34 <HAL_SPI_TransmitReceive+0x130>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1a1      	bne.n	8001c34 <HAL_SPI_TransmitReceive+0x130>
 8001cf0:	e07c      	b.n	8001dec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <HAL_SPI_TransmitReceive+0x1fc>
 8001cfa:	8b7b      	ldrh	r3, [r7, #26]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d16b      	bne.n	8001dd8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	330c      	adds	r3, #12
 8001d0a:	7812      	ldrb	r2, [r2, #0]
 8001d0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d26:	e057      	b.n	8001dd8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d11c      	bne.n	8001d70 <HAL_SPI_TransmitReceive+0x26c>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d017      	beq.n	8001d70 <HAL_SPI_TransmitReceive+0x26c>
 8001d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d114      	bne.n	8001d70 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	330c      	adds	r3, #12
 8001d50:	7812      	ldrb	r2, [r2, #0]
 8001d52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d119      	bne.n	8001db2 <HAL_SPI_TransmitReceive+0x2ae>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d014      	beq.n	8001db2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001dae:	2301      	movs	r3, #1
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001db2:	f7fe fe5f 	bl	8000a74 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d803      	bhi.n	8001dca <HAL_SPI_TransmitReceive+0x2c6>
 8001dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc8:	d102      	bne.n	8001dd0 <HAL_SPI_TransmitReceive+0x2cc>
 8001dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d103      	bne.n	8001dd8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001dd6:	e029      	b.n	8001e2c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1a2      	bne.n	8001d28 <HAL_SPI_TransmitReceive+0x224>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d19d      	bne.n	8001d28 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f8b1 	bl	8001f58 <SPI_EndRxTxTransaction>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d006      	beq.n	8001e0a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2220      	movs	r2, #32
 8001e06:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001e08:	e010      	b.n	8001e2c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10b      	bne.n	8001e2a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	e000      	b.n	8001e2c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001e2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3730      	adds	r7, #48	; 0x30
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	4613      	mov	r3, r2
 8001e56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e58:	f7fe fe0c 	bl	8000a74 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e68:	f7fe fe04 	bl	8000a74 <HAL_GetTick>
 8001e6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e6e:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	015b      	lsls	r3, r3, #5
 8001e74:	0d1b      	lsrs	r3, r3, #20
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e7e:	e054      	b.n	8001f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e86:	d050      	beq.n	8001f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e88:	f7fe fdf4 	bl	8000a74 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d902      	bls.n	8001e9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d13d      	bne.n	8001f1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001eac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eb6:	d111      	bne.n	8001edc <SPI_WaitFlagStateUntilTimeout+0x94>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec0:	d004      	beq.n	8001ecc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eca:	d107      	bne.n	8001edc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ee4:	d10f      	bne.n	8001f06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e017      	b.n	8001f4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4013      	ands	r3, r2
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	bf0c      	ite	eq
 8001f3a:	2301      	moveq	r3, #1
 8001f3c:	2300      	movne	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d19b      	bne.n	8001e80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3720      	adds	r7, #32
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000018 	.word	0x20000018

08001f58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2180      	movs	r1, #128	; 0x80
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f7ff ff6a 	bl	8001e48 <SPI_WaitFlagStateUntilTimeout>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d007      	beq.n	8001f8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	f043 0220 	orr.w	r2, r3, #32
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e000      	b.n	8001f8c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e03f      	b.n	8002026 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fbba 	bl	8000734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2224      	movs	r2, #36	; 0x24
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 fc25 	bl	8002828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800200c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b08a      	sub	sp, #40	; 0x28
 8002032:	af02      	add	r7, sp, #8
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	4613      	mov	r3, r2
 800203c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b20      	cmp	r3, #32
 800204c:	d17c      	bne.n	8002148 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <HAL_UART_Transmit+0x2c>
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e075      	b.n	800214a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_UART_Transmit+0x3e>
 8002068:	2302      	movs	r3, #2
 800206a:	e06e      	b.n	800214a <HAL_UART_Transmit+0x11c>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2221      	movs	r2, #33	; 0x21
 800207e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002082:	f7fe fcf7 	bl	8000a74 <HAL_GetTick>
 8002086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	88fa      	ldrh	r2, [r7, #6]
 800208c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	88fa      	ldrh	r2, [r7, #6]
 8002092:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800209c:	d108      	bne.n	80020b0 <HAL_UART_Transmit+0x82>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d104      	bne.n	80020b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	e003      	b.n	80020b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020c0:	e02a      	b.n	8002118 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2200      	movs	r2, #0
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 fa11 	bl	80024f4 <UART_WaitOnFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e036      	b.n	800214a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10b      	bne.n	80020fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	3302      	adds	r3, #2
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	e007      	b.n	800210a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	3301      	adds	r3, #1
 8002108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800210e:	b29b      	uxth	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1cf      	bne.n	80020c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2200      	movs	r2, #0
 800212a:	2140      	movs	r1, #64	; 0x40
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f9e1 	bl	80024f4 <UART_WaitOnFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e006      	b.n	800214a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e000      	b.n	800214a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3720      	adds	r7, #32
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002174:	2300      	movs	r3, #0
 8002176:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10d      	bne.n	80021a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_UART_IRQHandler+0x52>
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fa99 	bl	80026d6 <UART_Receive_IT>
      return;
 80021a4:	e17b      	b.n	800249e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80b1 	beq.w	8002310 <HAL_UART_IRQHandler+0x1bc>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_UART_IRQHandler+0x70>
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80a6 	beq.w	8002310 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_UART_IRQHandler+0x90>
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_UART_IRQHandler+0xb0>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f043 0202 	orr.w	r2, r3, #2
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_UART_IRQHandler+0xd0>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f043 0204 	orr.w	r2, r3, #4
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00f      	beq.n	800224e <HAL_UART_IRQHandler+0xfa>
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	2b00      	cmp	r3, #0
 8002236:	d104      	bne.n	8002242 <HAL_UART_IRQHandler+0xee>
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f043 0208 	orr.w	r2, r3, #8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 811e 	beq.w	8002494 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <HAL_UART_IRQHandler+0x11e>
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fa32 	bl	80026d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf14      	ite	ne
 8002280:	2301      	movne	r3, #1
 8002282:	2300      	moveq	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <HAL_UART_IRQHandler+0x146>
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d031      	beq.n	80022fe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f974 	bl	8002588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d023      	beq.n	80022f6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022bc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d013      	beq.n	80022ee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	4a76      	ldr	r2, [pc, #472]	; (80024a4 <HAL_UART_IRQHandler+0x350>)
 80022cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fd44 	bl	8000d60 <HAL_DMA_Abort_IT>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d016      	beq.n	800230c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022e8:	4610      	mov	r0, r2
 80022ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ec:	e00e      	b.n	800230c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f8ec 	bl	80024cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022f4:	e00a      	b.n	800230c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f8e8 	bl	80024cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022fc:	e006      	b.n	800230c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f8e4 	bl	80024cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800230a:	e0c3      	b.n	8002494 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800230c:	bf00      	nop
    return;
 800230e:	e0c1      	b.n	8002494 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	2b01      	cmp	r3, #1
 8002316:	f040 80a1 	bne.w	800245c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 809b 	beq.w	800245c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 8095 	beq.w	800245c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	2b00      	cmp	r3, #0
 8002354:	d04e      	beq.n	80023f4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002360:	8a3b      	ldrh	r3, [r7, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 8098 	beq.w	8002498 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800236c:	8a3a      	ldrh	r2, [r7, #16]
 800236e:	429a      	cmp	r2, r3
 8002370:	f080 8092 	bcs.w	8002498 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	8a3a      	ldrh	r2, [r7, #16]
 8002378:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	2b20      	cmp	r3, #32
 8002382:	d02b      	beq.n	80023dc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002392:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023b2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0210 	bic.w	r2, r2, #16
 80023d0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fc87 	bl	8000cea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f876 	bl	80024de <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80023f2:	e051      	b.n	8002498 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d047      	beq.n	800249c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800240c:	8a7b      	ldrh	r3, [r7, #18]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d044      	beq.n	800249c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002420:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695a      	ldr	r2, [r3, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0201 	bic.w	r2, r2, #1
 8002430:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0210 	bic.w	r2, r2, #16
 800244e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002450:	8a7b      	ldrh	r3, [r7, #18]
 8002452:	4619      	mov	r1, r3
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f842 	bl	80024de <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800245a:	e01f      	b.n	800249c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_UART_IRQHandler+0x324>
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f8c9 	bl	8002608 <UART_Transmit_IT>
    return;
 8002476:	e012      	b.n	800249e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00d      	beq.n	800249e <HAL_UART_IRQHandler+0x34a>
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f90a 	bl	80026a6 <UART_EndTransmit_IT>
    return;
 8002492:	e004      	b.n	800249e <HAL_UART_IRQHandler+0x34a>
    return;
 8002494:	bf00      	nop
 8002496:	e002      	b.n	800249e <HAL_UART_IRQHandler+0x34a>
      return;
 8002498:	bf00      	nop
 800249a:	e000      	b.n	800249e <HAL_UART_IRQHandler+0x34a>
      return;
 800249c:	bf00      	nop
  }
}
 800249e:	3728      	adds	r7, #40	; 0x28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	080025e1 	.word	0x080025e1

080024a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	4613      	mov	r3, r2
 8002502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002504:	e02c      	b.n	8002560 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d028      	beq.n	8002560 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <UART_WaitOnFlagUntilTimeout+0x30>
 8002514:	f7fe faae 	bl	8000a74 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	429a      	cmp	r2, r3
 8002522:	d21d      	bcs.n	8002560 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002532:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e00f      	b.n	8002580 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	4013      	ands	r3, r2
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	429a      	cmp	r2, r3
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	429a      	cmp	r2, r3
 800257c:	d0c3      	beq.n	8002506 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800259e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d107      	bne.n	80025c8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0210 	bic.w	r2, r2, #16
 80025c6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff ff66 	bl	80024cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b21      	cmp	r3, #33	; 0x21
 800261a:	d13e      	bne.n	800269a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002624:	d114      	bne.n	8002650 <UART_Transmit_IT+0x48>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d110      	bne.n	8002650 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002642:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	1c9a      	adds	r2, r3, #2
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	621a      	str	r2, [r3, #32]
 800264e:	e008      	b.n	8002662 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	1c59      	adds	r1, r3, #1
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6211      	str	r1, [r2, #32]
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29b      	uxth	r3, r3
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	4619      	mov	r1, r3
 8002670:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10f      	bne.n	8002696 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002684:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002694:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	e000      	b.n	800269c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800269a:	2302      	movs	r3, #2
  }
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff feee 	bl	80024a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b22      	cmp	r3, #34	; 0x22
 80026e8:	f040 8099 	bne.w	800281e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f4:	d117      	bne.n	8002726 <UART_Receive_IT+0x50>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d113      	bne.n	8002726 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002714:	b29a      	uxth	r2, r3
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	1c9a      	adds	r2, r3, #2
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
 8002724:	e026      	b.n	8002774 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002738:	d007      	beq.n	800274a <UART_Receive_IT+0x74>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10a      	bne.n	8002758 <UART_Receive_IT+0x82>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d106      	bne.n	8002758 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	b2da      	uxtb	r2, r3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	701a      	strb	r2, [r3, #0]
 8002756:	e008      	b.n	800276a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002764:	b2da      	uxtb	r2, r3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29b      	uxth	r3, r3
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4619      	mov	r1, r3
 8002782:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002784:	2b00      	cmp	r3, #0
 8002786:	d148      	bne.n	800281a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0220 	bic.w	r2, r2, #32
 8002796:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0201 	bic.w	r2, r2, #1
 80027b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d123      	bne.n	8002810 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0210 	bic.w	r2, r2, #16
 80027dc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b10      	cmp	r3, #16
 80027ea:	d10a      	bne.n	8002802 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002806:	4619      	mov	r1, r3
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff fe68 	bl	80024de <HAL_UARTEx_RxEventCallback>
 800280e:	e002      	b.n	8002816 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff fe52 	bl	80024ba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	e002      	b.n	8002820 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e000      	b.n	8002820 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800281e:	2302      	movs	r3, #2
  }
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	4313      	orrs	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002862:	f023 030c 	bic.w	r3, r3, #12
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	430b      	orrs	r3, r1
 800286e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a2c      	ldr	r2, [pc, #176]	; (800293c <UART_SetConfig+0x114>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d103      	bne.n	8002898 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002890:	f7ff f882 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	e002      	b.n	800289e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002898:	f7ff f86a 	bl	8001970 <HAL_RCC_GetPCLK1Freq>
 800289c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	009a      	lsls	r2, r3, #2
 80028a8:	441a      	add	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b4:	4a22      	ldr	r2, [pc, #136]	; (8002940 <UART_SetConfig+0x118>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	0119      	lsls	r1, r3, #4
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	009a      	lsls	r2, r3, #2
 80028c8:	441a      	add	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <UART_SetConfig+0x118>)
 80028d6:	fba3 0302 	umull	r0, r3, r3, r2
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2064      	movs	r0, #100	; 0x64
 80028de:	fb00 f303 	mul.w	r3, r0, r3
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	3332      	adds	r3, #50	; 0x32
 80028e8:	4a15      	ldr	r2, [pc, #84]	; (8002940 <UART_SetConfig+0x118>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f4:	4419      	add	r1, r3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	009a      	lsls	r2, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	fbb2 f2f3 	udiv	r2, r2, r3
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <UART_SetConfig+0x118>)
 800290e:	fba3 0302 	umull	r0, r3, r3, r2
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2064      	movs	r0, #100	; 0x64
 8002916:	fb00 f303 	mul.w	r3, r0, r3
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	3332      	adds	r3, #50	; 0x32
 8002920:	4a07      	ldr	r2, [pc, #28]	; (8002940 <UART_SetConfig+0x118>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	f003 020f 	and.w	r2, r3, #15
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	440a      	add	r2, r1
 8002932:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40013800 	.word	0x40013800
 8002940:	51eb851f 	.word	0x51eb851f

08002944 <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8002944:	b5b0      	push	{r4, r5, r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af04      	add	r7, sp, #16
 800294a:	4603      	mov	r3, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	71fb      	strb	r3, [r7, #7]
 8002950:	4613      	mov	r3, r2
 8002952:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 8002954:	2300      	movs	r3, #0
 8002956:	82fb      	strh	r3, [r7, #22]
 8002958:	2300      	movs	r3, #0
 800295a:	82bb      	strh	r3, [r7, #20]
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	3304      	adds	r3, #4
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	3303      	adds	r3, #3
 8002964:	4618      	mov	r0, r3
 8002966:	f000 f939 	bl	8002bdc <WIZCHIP_READ>
 800296a:	4603      	mov	r3, r0
 800296c:	2b1c      	cmp	r3, #28
 800296e:	f200 80f4 	bhi.w	8002b5a <loopback_tcps+0x216>
 8002972:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <loopback_tcps+0x34>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	08002b3f 	.word	0x08002b3f
 800297c:	08002b5b 	.word	0x08002b5b
 8002980:	08002b5b 	.word	0x08002b5b
 8002984:	08002b5b 	.word	0x08002b5b
 8002988:	08002b5b 	.word	0x08002b5b
 800298c:	08002b5b 	.word	0x08002b5b
 8002990:	08002b5b 	.word	0x08002b5b
 8002994:	08002b5b 	.word	0x08002b5b
 8002998:	08002b5b 	.word	0x08002b5b
 800299c:	08002b5b 	.word	0x08002b5b
 80029a0:	08002b5b 	.word	0x08002b5b
 80029a4:	08002b5b 	.word	0x08002b5b
 80029a8:	08002b5b 	.word	0x08002b5b
 80029ac:	08002b5b 	.word	0x08002b5b
 80029b0:	08002b5b 	.word	0x08002b5b
 80029b4:	08002b5b 	.word	0x08002b5b
 80029b8:	08002b5b 	.word	0x08002b5b
 80029bc:	08002b5b 	.word	0x08002b5b
 80029c0:	08002b5b 	.word	0x08002b5b
 80029c4:	08002b1d 	.word	0x08002b1d
 80029c8:	08002b5b 	.word	0x08002b5b
 80029cc:	08002b5b 	.word	0x08002b5b
 80029d0:	08002b5b 	.word	0x08002b5b
 80029d4:	080029ed 	.word	0x080029ed
 80029d8:	08002b5b 	.word	0x08002b5b
 80029dc:	08002b5b 	.word	0x08002b5b
 80029e0:	08002b5b 	.word	0x08002b5b
 80029e4:	08002b5b 	.word	0x08002b5b
 80029e8:	08002afb 	.word	0x08002afb
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	3304      	adds	r3, #4
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	3302      	adds	r3, #2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 f8f1 	bl	8002bdc <WIZCHIP_READ>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d03a      	beq.n	8002a7a <loopback_tcps+0x136>
         {
#ifdef _LOOPBACK_DEBUG_
			getSn_DIPR(sn, destip);
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	3304      	adds	r3, #4
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	330c      	adds	r3, #12
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f107 0308 	add.w	r3, r7, #8
 8002a12:	2204      	movs	r2, #4
 8002a14:	4619      	mov	r1, r3
 8002a16:	f000 f957 	bl	8002cc8 <WIZCHIP_READ_BUF>
			destport = getSn_DPORT(sn);
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	3310      	adds	r3, #16
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f8da 	bl	8002bdc <WIZCHIP_READ>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	b29c      	uxth	r4, r3
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	3304      	adds	r3, #4
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	3311      	adds	r3, #17
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 f8cf 	bl	8002bdc <WIZCHIP_READ>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	4423      	add	r3, r4
 8002a44:	81fb      	strh	r3, [r7, #14]

			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 8002a46:	79f9      	ldrb	r1, [r7, #7]
 8002a48:	7a3b      	ldrb	r3, [r7, #8]
 8002a4a:	461c      	mov	r4, r3
 8002a4c:	7a7b      	ldrb	r3, [r7, #9]
 8002a4e:	461d      	mov	r5, r3
 8002a50:	7abb      	ldrb	r3, [r7, #10]
 8002a52:	461a      	mov	r2, r3
 8002a54:	7afb      	ldrb	r3, [r7, #11]
 8002a56:	4618      	mov	r0, r3
 8002a58:	89fb      	ldrh	r3, [r7, #14]
 8002a5a:	9302      	str	r3, [sp, #8]
 8002a5c:	9001      	str	r0, [sp, #4]
 8002a5e:	9200      	str	r2, [sp, #0]
 8002a60:	462b      	mov	r3, r5
 8002a62:	4622      	mov	r2, r4
 8002a64:	4843      	ldr	r0, [pc, #268]	; (8002b74 <loopback_tcps+0x230>)
 8002a66:	f001 fd43 	bl	80044f0 <iprintf>
#endif
			setSn_IR(sn,Sn_IR_CON);
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	3302      	adds	r3, #2
 8002a72:	2101      	movs	r1, #1
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f883 	bl	8002b80 <WIZCHIP_WRITE>
         }
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 f9ae 	bl	8002dde <getSn_RX_RSR>
 8002a82:	4603      	mov	r3, r0
 8002a84:	82fb      	strh	r3, [r7, #22]
 8002a86:	8afb      	ldrh	r3, [r7, #22]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d068      	beq.n	8002b5e <loopback_tcps+0x21a>
         {
			if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8002a8c:	8afb      	ldrh	r3, [r7, #22]
 8002a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a92:	d902      	bls.n	8002a9a <loopback_tcps+0x156>
 8002a94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a98:	82fb      	strh	r3, [r7, #22]
			ret = recv(sn, buf, size);
 8002a9a:	8afa      	ldrh	r2, [r7, #22]
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	6839      	ldr	r1, [r7, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 ff29 	bl	80038f8 <recv>
 8002aa6:	6138      	str	r0, [r7, #16]

			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	dc01      	bgt.n	8002ab2 <loopback_tcps+0x16e>
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	e05b      	b.n	8002b6a <loopback_tcps+0x226>
			size = (uint16_t) ret;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	82fb      	strh	r3, [r7, #22]
			sentsize = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	82bb      	strh	r3, [r7, #20]

			while(size != sentsize)
 8002aba:	e019      	b.n	8002af0 <loopback_tcps+0x1ac>
			{
				ret = send(sn, buf+sentsize, size-sentsize);
 8002abc:	8abb      	ldrh	r3, [r7, #20]
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	18d1      	adds	r1, r2, r3
 8002ac2:	8afa      	ldrh	r2, [r7, #22]
 8002ac4:	8abb      	ldrh	r3, [r7, #20]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fe1f 	bl	8003710 <send>
 8002ad2:	6138      	str	r0, [r7, #16]
				if(ret < 0)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	da05      	bge.n	8002ae6 <loopback_tcps+0x1a2>
				{
					close(sn);
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fcf3 	bl	80034c8 <close>
					return ret;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	e041      	b.n	8002b6a <loopback_tcps+0x226>
				}
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	8abb      	ldrh	r3, [r7, #20]
 8002aec:	4413      	add	r3, r2
 8002aee:	82bb      	strh	r3, [r7, #20]
			while(size != sentsize)
 8002af0:	8afa      	ldrh	r2, [r7, #22]
 8002af2:	8abb      	ldrh	r3, [r7, #20]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d1e1      	bne.n	8002abc <loopback_tcps+0x178>
			}
         }
         break;
 8002af8:	e031      	b.n	8002b5e <loopback_tcps+0x21a>
      case SOCK_CLOSE_WAIT :
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:CloseWait\r\n",sn);
#endif
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fd99 	bl	8003634 <disconnect>
 8002b02:	4603      	mov	r3, r0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d001      	beq.n	8002b10 <loopback_tcps+0x1cc>
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	e02c      	b.n	8002b6a <loopback_tcps+0x226>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Socket Closed\r\n", sn);
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	4619      	mov	r1, r3
 8002b14:	4818      	ldr	r0, [pc, #96]	; (8002b78 <loopback_tcps+0x234>)
 8002b16:	f001 fceb 	bl	80044f0 <iprintf>
#endif
         break;
 8002b1a:	e025      	b.n	8002b68 <loopback_tcps+0x224>
      case SOCK_INIT :
#ifdef _LOOPBACK_DEBUG_
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	88ba      	ldrh	r2, [r7, #4]
 8002b20:	4619      	mov	r1, r3
 8002b22:	4816      	ldr	r0, [pc, #88]	; (8002b7c <loopback_tcps+0x238>)
 8002b24:	f001 fce4 	bl	80044f0 <iprintf>
#endif
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fd32 	bl	8003594 <listen>
 8002b30:	4603      	mov	r3, r0
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d013      	beq.n	8002b62 <loopback_tcps+0x21e>
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	e015      	b.n	8002b6a <loopback_tcps+0x226>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:TCP server loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 8002b3e:	88ba      	ldrh	r2, [r7, #4]
 8002b40:	79f8      	ldrb	r0, [r7, #7]
 8002b42:	2300      	movs	r3, #0
 8002b44:	2101      	movs	r1, #1
 8002b46:	f000 fbbb 	bl	80032c0 <socket>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d007      	beq.n	8002b66 <loopback_tcps+0x222>
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	e007      	b.n	8002b6a <loopback_tcps+0x226>
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:Socket opened\r\n",sn);
#endif
         break;
      default:
         break;
 8002b5a:	bf00      	nop
 8002b5c:	e004      	b.n	8002b68 <loopback_tcps+0x224>
         break;
 8002b5e:	bf00      	nop
 8002b60:	e002      	b.n	8002b68 <loopback_tcps+0x224>
         break;
 8002b62:	bf00      	nop
 8002b64:	e000      	b.n	8002b68 <loopback_tcps+0x224>
         break;
 8002b66:	bf00      	nop
   }
   return 1;
 8002b68:	2301      	movs	r3, #1
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bdb0      	pop	{r4, r5, r7, pc}
 8002b72:	bf00      	nop
 8002b74:	080054a4 	.word	0x080054a4
 8002b78:	080054c8 	.word	0x080054c8
 8002b7c:	080054dc 	.word	0x080054dc

08002b80 <WIZCHIP_WRITE>:
#if   (_WIZCHIP_ == W5100S)
/**
@brief  This function writes the data into W5100S registers.
*/
void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	70fb      	strb	r3, [r7, #3]
	int i;
   WIZCHIP_CRITICAL_ENTER();
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <WIZCHIP_WRITE+0x58>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <WIZCHIP_WRITE+0x58>)
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(0xF0);
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
   WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_5500_) )
	WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8002b98:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <WIZCHIP_WRITE+0x58>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	0a12      	lsrs	r2, r2, #8
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4798      	blx	r3
	WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <WIZCHIP_WRITE+0x58>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4798      	blx	r3
	WIZCHIP.IF.SPI._write_byte(0xF0);
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <WIZCHIP_WRITE+0x58>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	20f0      	movs	r0, #240	; 0xf0
 8002bb8:	4798      	blx	r3
	WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 8002bba:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <WIZCHIP_WRITE+0x58>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data(IDM_DR,wb);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._deselect();
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <WIZCHIP_WRITE+0x58>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002bca:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <WIZCHIP_WRITE+0x58>)
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	4798      	blx	r3
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000024 	.word	0x20000024

08002bdc <WIZCHIP_READ>:
/**
@brief  This function reads the value from W5100S registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   int i;
   WIZCHIP_CRITICAL_ENTER();
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <WIZCHIP_READ+0x58>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002bea:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <WIZCHIP_READ+0x58>)
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(0x0F);
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
   ret = WIZCHIP.IF.SPI._read_byte(); 
#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_5500_) )
	WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8002bf0:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <WIZCHIP_READ+0x58>)
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	0a12      	lsrs	r2, r2, #8
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4798      	blx	r3
	WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <WIZCHIP_READ+0x58>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	4610      	mov	r0, r2
 8002c08:	4798      	blx	r3
	WIZCHIP.IF.SPI._write_byte(0x0F);
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <WIZCHIP_READ+0x58>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	200f      	movs	r0, #15
 8002c10:	4798      	blx	r3
	ret = WIZCHIP.IF.SPI._read_byte();
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <WIZCHIP_READ+0x58>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	4798      	blx	r3
 8002c18:	4603      	mov	r3, r0
 8002c1a:	73fb      	strb	r3, [r7, #15]

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100S. !!!"   
#endif

   WIZCHIP.CS._deselect();
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <WIZCHIP_READ+0x58>)
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002c22:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <WIZCHIP_READ+0x58>)
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	4798      	blx	r3
   return ret;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000024 	.word	0x20000024

08002c38 <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5100S memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	4613      	mov	r3, r2
 8002c44:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	82fb      	strh	r3, [r7, #22]
   int j,k,l;
   WIZCHIP_CRITICAL_ENTER();
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <WIZCHIP_WRITE_BUF+0x8c>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8002c50:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <WIZCHIP_WRITE_BUF+0x8c>)
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	4798      	blx	r3
	   WIZCHIP.IF.SPI._write_byte(pBuf[i]);    // Data write (write 1byte data)
   }

#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_5500_) )

	WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0xFF00) >>  8);
 8002c56:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <WIZCHIP_WRITE_BUF+0x8c>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	b291      	uxth	r1, r2
 8002c5e:	8afa      	ldrh	r2, [r7, #22]
 8002c60:	440a      	add	r2, r1
 8002c62:	b292      	uxth	r2, r2
 8002c64:	0a12      	lsrs	r2, r2, #8
 8002c66:	b292      	uxth	r2, r2
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4798      	blx	r3
	WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0x00FF) >>  0);
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <WIZCHIP_WRITE_BUF+0x8c>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	b2d1      	uxtb	r1, r2
 8002c76:	8afa      	ldrh	r2, [r7, #22]
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	440a      	add	r2, r1
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4798      	blx	r3
	WIZCHIP.IF.SPI._write_byte(0xF0);
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <WIZCHIP_WRITE_BUF+0x8c>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	20f0      	movs	r0, #240	; 0xf0
 8002c88:	4798      	blx	r3

	for(i = 0; i < len; i++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	82fb      	strh	r3, [r7, #22]
 8002c8e:	e00a      	b.n	8002ca6 <WIZCHIP_WRITE_BUF+0x6e>
	{
		WIZCHIP.IF.SPI._write_byte(pBuf[i]);    // Data write (write 1byte data)
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <WIZCHIP_WRITE_BUF+0x8c>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	8afa      	ldrh	r2, [r7, #22]
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	440a      	add	r2, r1
 8002c9a:	7812      	ldrb	r2, [r2, #0]
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4798      	blx	r3
	for(i = 0; i < len; i++)
 8002ca0:	8afb      	ldrh	r3, [r7, #22]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	82fb      	strh	r3, [r7, #22]
 8002ca6:	8afa      	ldrh	r2, [r7, #22]
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d3f0      	bcc.n	8002c90 <WIZCHIP_WRITE_BUF+0x58>

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100S. !!!!"
#endif
   
   WIZCHIP.CS._deselect();  //M20150601 : Moved here.
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <WIZCHIP_WRITE_BUF+0x8c>)
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <WIZCHIP_WRITE_BUF+0x8c>)
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	4798      	blx	r3
}
 8002cba:	bf00      	nop
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000024 	.word	0x20000024

08002cc8 <WIZCHIP_READ_BUF>:
/**
@brief  This function reads into W5100S memory(Buffer)
*/ 

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002cc8:	b590      	push	{r4, r7, lr}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	82fb      	strh	r3, [r7, #22]
   WIZCHIP_CRITICAL_ENTER();
 8002cda:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <WIZCHIP_READ_BUF+0x8c>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8002ce0:	4b1c      	ldr	r3, [pc, #112]	; (8002d54 <WIZCHIP_READ_BUF+0x8c>)
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	4798      	blx	r3
   {
      pBuf[i] = WIZCHIP.IF.SPI._read_byte(); 
   }
#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_5500_) )

   WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0xFF00) >>  8);
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <WIZCHIP_READ_BUF+0x8c>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	b291      	uxth	r1, r2
 8002cee:	8afa      	ldrh	r2, [r7, #22]
 8002cf0:	440a      	add	r2, r1
 8002cf2:	b292      	uxth	r2, r2
 8002cf4:	0a12      	lsrs	r2, r2, #8
 8002cf6:	b292      	uxth	r2, r2
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0x00FF) >>  0);
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <WIZCHIP_READ_BUF+0x8c>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	b2d1      	uxtb	r1, r2
 8002d06:	8afa      	ldrh	r2, [r7, #22]
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	440a      	add	r2, r1
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(0x0F);
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <WIZCHIP_READ_BUF+0x8c>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	200f      	movs	r0, #15
 8002d18:	4798      	blx	r3

   for(i = 0; i < len; i++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	82fb      	strh	r3, [r7, #22]
 8002d1e:	e00a      	b.n	8002d36 <WIZCHIP_READ_BUF+0x6e>
   {
      pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002d20:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <WIZCHIP_READ_BUF+0x8c>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	8afa      	ldrh	r2, [r7, #22]
 8002d26:	68b9      	ldr	r1, [r7, #8]
 8002d28:	188c      	adds	r4, r1, r2
 8002d2a:	4798      	blx	r3
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	7023      	strb	r3, [r4, #0]
   for(i = 0; i < len; i++)
 8002d30:	8afb      	ldrh	r3, [r7, #22]
 8002d32:	3301      	adds	r3, #1
 8002d34:	82fb      	strh	r3, [r7, #22]
 8002d36:	8afa      	ldrh	r2, [r7, #22]
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d3f0      	bcc.n	8002d20 <WIZCHIP_READ_BUF+0x58>
   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100S. !!!!"
#endif

   WIZCHIP.CS._deselect();    //M20150601 : Moved Here.
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <WIZCHIP_READ_BUF+0x8c>)
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <WIZCHIP_READ_BUF+0x8c>)
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	4798      	blx	r3
}
 8002d4a:	bf00      	nop
 8002d4c:	371c      	adds	r7, #28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd90      	pop	{r4, r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000024 	.word	0x20000024

08002d58 <getSn_TX_FSR>:
///////////////////////////////////
// Socket N regsiter IO function //
///////////////////////////////////

uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	81fb      	strh	r3, [r7, #14]
 8002d66:	2300      	movs	r3, #0
 8002d68:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	3320      	adds	r3, #32
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ff32 	bl	8002bdc <WIZCHIP_READ>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002d7c:	89bb      	ldrh	r3, [r7, #12]
 8002d7e:	021b      	lsls	r3, r3, #8
 8002d80:	b29c      	uxth	r4, r3
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	3304      	adds	r3, #4
 8002d86:	021b      	lsls	r3, r3, #8
 8002d88:	3321      	adds	r3, #33	; 0x21
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff ff26 	bl	8002bdc <WIZCHIP_READ>
 8002d90:	4603      	mov	r3, r0
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	4423      	add	r3, r4
 8002d96:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002d98:	89bb      	ldrh	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d016      	beq.n	8002dcc <getSn_TX_FSR+0x74>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	3304      	adds	r3, #4
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	3320      	adds	r3, #32
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ff18 	bl	8002bdc <WIZCHIP_READ>
 8002dac:	4603      	mov	r3, r0
 8002dae:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002db0:	89fb      	ldrh	r3, [r7, #14]
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	b29c      	uxth	r4, r3
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	3304      	adds	r3, #4
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	3321      	adds	r3, #33	; 0x21
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ff0c 	bl	8002bdc <WIZCHIP_READ>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4423      	add	r3, r4
 8002dca:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002dcc:	89fa      	ldrh	r2, [r7, #14]
 8002dce:	89bb      	ldrh	r3, [r7, #12]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d1ca      	bne.n	8002d6a <getSn_TX_FSR+0x12>
   return val;
 8002dd4:	89fb      	ldrh	r3, [r7, #14]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd90      	pop	{r4, r7, pc}

08002dde <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8002dde:	b590      	push	{r4, r7, lr}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	81fb      	strh	r3, [r7, #14]
 8002dec:	2300      	movs	r3, #0
 8002dee:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	3304      	adds	r3, #4
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	3326      	adds	r3, #38	; 0x26
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff feef 	bl	8002bdc <WIZCHIP_READ>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002e02:	89bb      	ldrh	r3, [r7, #12]
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	b29c      	uxth	r4, r3
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	3327      	adds	r3, #39	; 0x27
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fee3 	bl	8002bdc <WIZCHIP_READ>
 8002e16:	4603      	mov	r3, r0
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	4423      	add	r3, r4
 8002e1c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002e1e:	89bb      	ldrh	r3, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d016      	beq.n	8002e52 <getSn_RX_RSR+0x74>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	3304      	adds	r3, #4
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	3326      	adds	r3, #38	; 0x26
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fed5 	bl	8002bdc <WIZCHIP_READ>
 8002e32:	4603      	mov	r3, r0
 8002e34:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002e36:	89fb      	ldrh	r3, [r7, #14]
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	b29c      	uxth	r4, r3
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	3327      	adds	r3, #39	; 0x27
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fec9 	bl	8002bdc <WIZCHIP_READ>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	4423      	add	r3, r4
 8002e50:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002e52:	89fa      	ldrh	r2, [r7, #14]
 8002e54:	89bb      	ldrh	r3, [r7, #12]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d1ca      	bne.n	8002df0 <getSn_RX_RSR+0x12>
   return val;
 8002e5a:	89fb      	ldrh	r3, [r7, #14]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd90      	pop	{r4, r7, pc}

08002e64 <getSn_RxBASE>:

/////////////////////////////////////
// Sn_TXBUF & Sn_RXBUF IO function //
/////////////////////////////////////
uint32_t getSn_RxBASE(uint8_t sn)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t rxbase = _W5100S_IO_BASE_ + _WIZCHIP_IO_RXBUF_;
#else   
   uint32_t rxbase = _WIZCHIP_IO_RXBUF_;
 8002e6e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002e72:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 8002e74:	2300      	movs	r3, #0
 8002e76:	73fb      	strb	r3, [r7, #15]
 8002e78:	e020      	b.n	8002ebc <getSn_RxBASE+0x58>
      rxbase += getSn_RxMAX(i);
 8002e7a:	201a      	movs	r0, #26
 8002e7c:	f7ff feae 	bl	8002bdc <WIZCHIP_READ>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4619      	mov	r1, r3
 8002e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	ea01 0203 	and.w	r2, r1, r3
 8002e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	fa42 f303 	asr.w	r3, r2, r3
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	029b      	lsls	r3, r3, #10
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4413      	add	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 8002eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	73fb      	strb	r3, [r7, #15]
 8002ebc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	dbd9      	blt.n	8002e7a <getSn_RxBASE+0x16>

   return rxbase;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <getSn_TxBASE>:

uint32_t getSn_TxBASE(uint8_t sn)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t txbase = _W5100S_IO_BASE_ + _WIZCHIP_IO_TXBUF_;
#else   
   uint32_t txbase = _WIZCHIP_IO_TXBUF_;
 8002eda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ede:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	e020      	b.n	8002f28 <getSn_TxBASE+0x58>
      txbase += getSn_TxMAX(i);
 8002ee6:	201b      	movs	r0, #27
 8002ee8:	f7ff fe78 	bl	8002bdc <WIZCHIP_READ>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	ea01 0203 	and.w	r2, r1, r3
 8002f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	fa42 f303 	asr.w	r3, r2, r3
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	029b      	lsls	r3, r3, #10
 8002f14:	461a      	mov	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4413      	add	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 8002f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	3301      	adds	r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	73fb      	strb	r3, [r7, #15]
 8002f28:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	dbd9      	blt.n	8002ee6 <getSn_TxBASE+0x16>
   return txbase;
 8002f32:	68bb      	ldr	r3, [r7, #8]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <wiz_send_data>:
the data in transmite buffer. Here also take care of the condition while it exceed
the Tx memory uper-bound of socket.

*/
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002f3c:	b590      	push	{r4, r7, lr}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	6039      	str	r1, [r7, #0]
 8002f46:	71fb      	strb	r3, [r7, #7]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t dst_mask;
  uint16_t dst_ptr;

  ptr = getSn_TX_WR(sn);
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	3324      	adds	r3, #36	; 0x24
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fe41 	bl	8002bdc <WIZCHIP_READ>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	b29c      	uxth	r4, r3
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	3304      	adds	r3, #4
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	3325      	adds	r3, #37	; 0x25
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fe36 	bl	8002bdc <WIZCHIP_READ>
 8002f70:	4603      	mov	r3, r0
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	4423      	add	r3, r4
 8002f76:	81fb      	strh	r3, [r7, #14]

  dst_mask = ptr & getSn_TxMASK(sn);
 8002f78:	201b      	movs	r0, #27
 8002f7a:	f7ff fe2f 	bl	8002bdc <WIZCHIP_READ>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4619      	mov	r1, r3
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	2203      	movs	r2, #3
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	ea01 0203 	and.w	r2, r1, r3
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa42 f303 	asr.w	r3, r2, r3
 8002f98:	2201      	movs	r2, #1
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	029b      	lsls	r3, r3, #10
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	b21a      	sxth	r2, r3
 8002faa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	b21b      	sxth	r3, r3
 8002fb2:	81bb      	strh	r3, [r7, #12]
  dst_ptr = getSn_TxBASE(sn) + dst_mask;
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff ff8a 	bl	8002ed0 <getSn_TxBASE>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	89bb      	ldrh	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	817b      	strh	r3, [r7, #10]
  
  if (dst_mask + len > getSn_TxMAX(sn)) 
 8002fc6:	89ba      	ldrh	r2, [r7, #12]
 8002fc8:	88bb      	ldrh	r3, [r7, #4]
 8002fca:	18d4      	adds	r4, r2, r3
 8002fcc:	201b      	movs	r0, #27
 8002fce:	f7ff fe05 	bl	8002bdc <WIZCHIP_READ>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	2203      	movs	r2, #3
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	ea01 0203 	and.w	r2, r1, r3
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fa42 f303 	asr.w	r3, r2, r3
 8002fec:	2201      	movs	r2, #1
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	029b      	lsls	r3, r3, #10
 8002ff6:	429c      	cmp	r4, r3
 8002ff8:	dd33      	ble.n	8003062 <wiz_send_data+0x126>
  {
    size = getSn_TxMAX(sn) - dst_mask;
 8002ffa:	201b      	movs	r0, #27
 8002ffc:	f7ff fdee 	bl	8002bdc <WIZCHIP_READ>
 8003000:	4603      	mov	r3, r0
 8003002:	4619      	mov	r1, r3
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	2203      	movs	r2, #3
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	ea01 0203 	and.w	r2, r1, r3
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fa42 f303 	asr.w	r3, r2, r3
 800301a:	2201      	movs	r2, #1
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	b29b      	uxth	r3, r3
 8003022:	029b      	lsls	r3, r3, #10
 8003024:	b29a      	uxth	r2, r3
 8003026:	89bb      	ldrh	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	813b      	strh	r3, [r7, #8]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 800302c:	897b      	ldrh	r3, [r7, #10]
 800302e:	893a      	ldrh	r2, [r7, #8]
 8003030:	6839      	ldr	r1, [r7, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fe00 	bl	8002c38 <WIZCHIP_WRITE_BUF>
    wizdata += size;
 8003038:	893b      	ldrh	r3, [r7, #8]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	4413      	add	r3, r2
 800303e:	603b      	str	r3, [r7, #0]
    size = len - size;
 8003040:	88ba      	ldrh	r2, [r7, #4]
 8003042:	893b      	ldrh	r3, [r7, #8]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	813b      	strh	r3, [r7, #8]
    dst_ptr = getSn_TxBASE(sn);
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff ff40 	bl	8002ed0 <getSn_TxBASE>
 8003050:	4603      	mov	r3, r0
 8003052:	817b      	strh	r3, [r7, #10]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 8003054:	897b      	ldrh	r3, [r7, #10]
 8003056:	893a      	ldrh	r2, [r7, #8]
 8003058:	6839      	ldr	r1, [r7, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fdec 	bl	8002c38 <WIZCHIP_WRITE_BUF>
 8003060:	e005      	b.n	800306e <wiz_send_data+0x132>
  } 
  else
  {
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, len);
 8003062:	897b      	ldrh	r3, [r7, #10]
 8003064:	88ba      	ldrh	r2, [r7, #4]
 8003066:	6839      	ldr	r1, [r7, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fde5 	bl	8002c38 <WIZCHIP_WRITE_BUF>
  }

  ptr += len;
 800306e:	89fa      	ldrh	r2, [r7, #14]
 8003070:	88bb      	ldrh	r3, [r7, #4]
 8003072:	4413      	add	r3, r2
 8003074:	81fb      	strh	r3, [r7, #14]

  setSn_TX_WR(sn, ptr);  
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	3304      	adds	r3, #4
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	3324      	adds	r3, #36	; 0x24
 800307e:	461a      	mov	r2, r3
 8003080:	89fb      	ldrh	r3, [r7, #14]
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	b29b      	uxth	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f7ff fd78 	bl	8002b80 <WIZCHIP_WRITE>
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	3304      	adds	r3, #4
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	3325      	adds	r3, #37	; 0x25
 8003098:	461a      	mov	r2, r3
 800309a:	89fb      	ldrh	r3, [r7, #14]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	4619      	mov	r1, r3
 80030a0:	4610      	mov	r0, r2
 80030a2:	f7ff fd6d 	bl	8002b80 <WIZCHIP_WRITE>
}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd90      	pop	{r4, r7, pc}

080030ae <wiz_recv_data>:
It calculate the actual physical address where one has to read
the data from Receive buffer. Here also take care of the condition while it exceed
the Rx memory uper-bound of socket.
*/
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80030ae:	b590      	push	{r4, r7, lr}
 80030b0:	b085      	sub	sp, #20
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	6039      	str	r1, [r7, #0]
 80030b8:	71fb      	strb	r3, [r7, #7]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  ptr = getSn_RX_RD(sn);
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	3304      	adds	r3, #4
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	3328      	adds	r3, #40	; 0x28
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fd88 	bl	8002bdc <WIZCHIP_READ>
 80030cc:	4603      	mov	r3, r0
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	b29c      	uxth	r4, r3
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	3304      	adds	r3, #4
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	3329      	adds	r3, #41	; 0x29
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fd7d 	bl	8002bdc <WIZCHIP_READ>
 80030e2:	4603      	mov	r3, r0
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	4423      	add	r3, r4
 80030e8:	81fb      	strh	r3, [r7, #14]
  
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 80030ea:	201a      	movs	r0, #26
 80030ec:	f7ff fd76 	bl	8002bdc <WIZCHIP_READ>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4619      	mov	r1, r3
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	2203      	movs	r2, #3
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	ea01 0203 	and.w	r2, r1, r3
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	fa42 f303 	asr.w	r3, r2, r3
 800310a:	2201      	movs	r2, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	b29b      	uxth	r3, r3
 8003112:	029b      	lsls	r3, r3, #10
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	89fb      	ldrh	r3, [r7, #14]
 800311c:	4013      	ands	r3, r2
 800311e:	81bb      	strh	r3, [r7, #12]
  src_ptr = (getSn_RxBASE(sn) + src_mask);
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fe9e 	bl	8002e64 <getSn_RxBASE>
 8003128:	4603      	mov	r3, r0
 800312a:	b29a      	uxth	r2, r3
 800312c:	89bb      	ldrh	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	817b      	strh	r3, [r7, #10]

  
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 8003132:	89ba      	ldrh	r2, [r7, #12]
 8003134:	88bb      	ldrh	r3, [r7, #4]
 8003136:	18d4      	adds	r4, r2, r3
 8003138:	201a      	movs	r0, #26
 800313a:	f7ff fd4f 	bl	8002bdc <WIZCHIP_READ>
 800313e:	4603      	mov	r3, r0
 8003140:	4619      	mov	r1, r3
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	2203      	movs	r2, #3
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	ea01 0203 	and.w	r2, r1, r3
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	fa42 f303 	asr.w	r3, r2, r3
 8003158:	2201      	movs	r2, #1
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	b29b      	uxth	r3, r3
 8003160:	029b      	lsls	r3, r3, #10
 8003162:	429c      	cmp	r4, r3
 8003164:	dd33      	ble.n	80031ce <wiz_recv_data+0x120>
  {
    size = getSn_RxMAX(sn) - src_mask;
 8003166:	201a      	movs	r0, #26
 8003168:	f7ff fd38 	bl	8002bdc <WIZCHIP_READ>
 800316c:	4603      	mov	r3, r0
 800316e:	4619      	mov	r1, r3
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	2203      	movs	r2, #3
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	ea01 0203 	and.w	r2, r1, r3
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	fa42 f303 	asr.w	r3, r2, r3
 8003186:	2201      	movs	r2, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	b29b      	uxth	r3, r3
 800318e:	029b      	lsls	r3, r3, #10
 8003190:	b29a      	uxth	r2, r3
 8003192:	89bb      	ldrh	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	813b      	strh	r3, [r7, #8]
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 8003198:	897b      	ldrh	r3, [r7, #10]
 800319a:	893a      	ldrh	r2, [r7, #8]
 800319c:	6839      	ldr	r1, [r7, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fd92 	bl	8002cc8 <WIZCHIP_READ_BUF>
    wizdata += size;
 80031a4:	893b      	ldrh	r3, [r7, #8]
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	4413      	add	r3, r2
 80031aa:	603b      	str	r3, [r7, #0]
    size = len - size;
 80031ac:	88ba      	ldrh	r2, [r7, #4]
 80031ae:	893b      	ldrh	r3, [r7, #8]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	813b      	strh	r3, [r7, #8]
	src_ptr = getSn_RxBASE(sn);
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fe54 	bl	8002e64 <getSn_RxBASE>
 80031bc:	4603      	mov	r3, r0
 80031be:	817b      	strh	r3, [r7, #10]
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, size);
 80031c0:	897b      	ldrh	r3, [r7, #10]
 80031c2:	893a      	ldrh	r2, [r7, #8]
 80031c4:	6839      	ldr	r1, [r7, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fd7e 	bl	8002cc8 <WIZCHIP_READ_BUF>
 80031cc:	e005      	b.n	80031da <wiz_recv_data+0x12c>
  } 
  else
  {
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, len);
 80031ce:	897b      	ldrh	r3, [r7, #10]
 80031d0:	88ba      	ldrh	r2, [r7, #4]
 80031d2:	6839      	ldr	r1, [r7, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fd77 	bl	8002cc8 <WIZCHIP_READ_BUF>
  }
    
  ptr += len;
 80031da:	89fa      	ldrh	r2, [r7, #14]
 80031dc:	88bb      	ldrh	r3, [r7, #4]
 80031de:	4413      	add	r3, r2
 80031e0:	81fb      	strh	r3, [r7, #14]
  
  setSn_RX_RD(sn, ptr);
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	3304      	adds	r3, #4
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	3328      	adds	r3, #40	; 0x28
 80031ea:	461a      	mov	r2, r3
 80031ec:	89fb      	ldrh	r3, [r7, #14]
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	4619      	mov	r1, r3
 80031f6:	4610      	mov	r0, r2
 80031f8:	f7ff fcc2 	bl	8002b80 <WIZCHIP_WRITE>
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	3304      	adds	r3, #4
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	3329      	adds	r3, #41	; 0x29
 8003204:	461a      	mov	r2, r3
 8003206:	89fb      	ldrh	r3, [r7, #14]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	4619      	mov	r1, r3
 800320c:	4610      	mov	r0, r2
 800320e:	f7ff fcb7 	bl	8002b80 <WIZCHIP_WRITE>
}
 8003212:	bf00      	nop
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	bd90      	pop	{r4, r7, pc}

0800321a <wiz_mdio_write>:
  ptr += len;
  setSn_RX_RD(sn,ptr);
}

void wiz_mdio_write(uint8_t PHYMDIO_regadr, uint16_t var)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	4603      	mov	r3, r0
 8003222:	460a      	mov	r2, r1
 8003224:	71fb      	strb	r3, [r7, #7]
 8003226:	4613      	mov	r3, r2
 8003228:	80bb      	strh	r3, [r7, #4]
    WIZCHIP_WRITE(PHYRAR,PHYMDIO_regadr);
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	4619      	mov	r1, r3
 800322e:	203f      	movs	r0, #63	; 0x3f
 8003230:	f7ff fca6 	bl	8002b80 <WIZCHIP_WRITE>
    WIZCHIP_WRITE(PHYDIR, (uint8_t)(var >> 8));
 8003234:	88bb      	ldrh	r3, [r7, #4]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	b29b      	uxth	r3, r3
 800323a:	b2db      	uxtb	r3, r3
 800323c:	4619      	mov	r1, r3
 800323e:	2040      	movs	r0, #64	; 0x40
 8003240:	f7ff fc9e 	bl	8002b80 <WIZCHIP_WRITE>
    WIZCHIP_WRITE(PHYDIR+1, (uint8_t)(var));
 8003244:	88bb      	ldrh	r3, [r7, #4]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	4619      	mov	r1, r3
 800324a:	2041      	movs	r0, #65	; 0x41
 800324c:	f7ff fc98 	bl	8002b80 <WIZCHIP_WRITE>
    WIZCHIP_WRITE(PHYACR, PHYACR_WRITE);
 8003250:	2101      	movs	r1, #1
 8003252:	2044      	movs	r0, #68	; 0x44
 8003254:	f7ff fc94 	bl	8002b80 <WIZCHIP_WRITE>
    while(WIZCHIP_READ(PHYACR));  //wait for command complete
 8003258:	bf00      	nop
 800325a:	2044      	movs	r0, #68	; 0x44
 800325c:	f7ff fcbe 	bl	8002bdc <WIZCHIP_READ>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f9      	bne.n	800325a <wiz_mdio_write+0x40>
}
 8003266:	bf00      	nop
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <wiz_mdio_read>:

uint16_t wiz_mdio_read(uint8_t PHYMDIO_regadr)
{
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
    WIZCHIP_WRITE(PHYRAR,PHYMDIO_regadr);
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	4619      	mov	r1, r3
 800327e:	203f      	movs	r0, #63	; 0x3f
 8003280:	f7ff fc7e 	bl	8002b80 <WIZCHIP_WRITE>
    WIZCHIP_WRITE(PHYACR, PHYACR_READ);
 8003284:	2102      	movs	r1, #2
 8003286:	2044      	movs	r0, #68	; 0x44
 8003288:	f7ff fc7a 	bl	8002b80 <WIZCHIP_WRITE>
    while(WIZCHIP_READ(PHYACR));  //wait for command complete
 800328c:	bf00      	nop
 800328e:	2044      	movs	r0, #68	; 0x44
 8003290:	f7ff fca4 	bl	8002bdc <WIZCHIP_READ>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f9      	bne.n	800328e <wiz_mdio_read+0x1e>
    return ((uint16_t)WIZCHIP_READ(PHYDOR) << 8) | WIZCHIP_READ(PHYDOR+1);
 800329a:	2042      	movs	r0, #66	; 0x42
 800329c:	f7ff fc9e 	bl	8002bdc <WIZCHIP_READ>
 80032a0:	4603      	mov	r3, r0
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	b21c      	sxth	r4, r3
 80032a6:	2043      	movs	r0, #67	; 0x43
 80032a8:	f7ff fc98 	bl	8002bdc <WIZCHIP_READ>
 80032ac:	4603      	mov	r3, r0
 80032ae:	b21b      	sxth	r3, r3
 80032b0:	4323      	orrs	r3, r4
 80032b2:	b21b      	sxth	r3, r3
 80032b4:	b29b      	uxth	r3, r3
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd90      	pop	{r4, r7, pc}
	...

080032c0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4604      	mov	r4, r0
 80032c8:	4608      	mov	r0, r1
 80032ca:	4611      	mov	r1, r2
 80032cc:	461a      	mov	r2, r3
 80032ce:	4623      	mov	r3, r4
 80032d0:	71fb      	strb	r3, [r7, #7]
 80032d2:	4603      	mov	r3, r0
 80032d4:	71bb      	strb	r3, [r7, #6]
 80032d6:	460b      	mov	r3, r1
 80032d8:	80bb      	strh	r3, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d902      	bls.n	80032ea <socket+0x2a>
 80032e4:	f04f 33ff 	mov.w	r3, #4294967295
 80032e8:	e0e0      	b.n	80034ac <socket+0x1ec>
	switch(protocol)
 80032ea:	79bb      	ldrb	r3, [r7, #6]
 80032ec:	2b05      	cmp	r3, #5
 80032ee:	d019      	beq.n	8003324 <socket+0x64>
 80032f0:	2b05      	cmp	r3, #5
 80032f2:	dc14      	bgt.n	800331e <socket+0x5e>
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d005      	beq.n	8003304 <socket+0x44>
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	dd10      	ble.n	800331e <socket+0x5e>
 80032fc:	3b02      	subs	r3, #2
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d80d      	bhi.n	800331e <socket+0x5e>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003302:	e011      	b.n	8003328 <socket+0x68>
            getSIPR((uint8_t*)&taddr);
 8003304:	f107 030c 	add.w	r3, r7, #12
 8003308:	2204      	movs	r2, #4
 800330a:	4619      	mov	r1, r3
 800330c:	200f      	movs	r0, #15
 800330e:	f7ff fcdb 	bl	8002cc8 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d107      	bne.n	8003328 <socket+0x68>
 8003318:	f06f 0302 	mvn.w	r3, #2
 800331c:	e0c6      	b.n	80034ac <socket+0x1ec>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 800331e:	f06f 0304 	mvn.w	r3, #4
 8003322:	e0c3      	b.n	80034ac <socket+0x1ec>
         break;
 8003324:	bf00      	nop
 8003326:	e000      	b.n	800332a <socket+0x6a>
         break;
 8003328:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <socket+0x7a>
 8003334:	f06f 0305 	mvn.w	r3, #5
 8003338:	e0b8      	b.n	80034ac <socket+0x1ec>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d019      	beq.n	8003374 <socket+0xb4>
	{
   	switch(protocol)
 8003340:	79bb      	ldrb	r3, [r7, #6]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d002      	beq.n	800334c <socket+0x8c>
 8003346:	2b02      	cmp	r3, #2
 8003348:	d008      	beq.n	800335c <socket+0x9c>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800334a:	e018      	b.n	800337e <socket+0xbe>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003352:	2b00      	cmp	r3, #0
 8003354:	d110      	bne.n	8003378 <socket+0xb8>
 8003356:	f06f 0305 	mvn.w	r3, #5
 800335a:	e0a7      	b.n	80034ac <socket+0x1ec>
   	      if(flag & SF_IGMP_VER2)
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <socket+0xbc>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003366:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800336a:	2b00      	cmp	r3, #0
 800336c:	db06      	blt.n	800337c <socket+0xbc>
 800336e:	f06f 0305 	mvn.w	r3, #5
 8003372:	e09b      	b.n	80034ac <socket+0x1ec>
   	}
   }
 8003374:	bf00      	nop
 8003376:	e002      	b.n	800337e <socket+0xbe>
   	      break;
 8003378:	bf00      	nop
 800337a:	e000      	b.n	800337e <socket+0xbe>
   	      break;
 800337c:	bf00      	nop
	close(sn);
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f8a1 	bl	80034c8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	3304      	adds	r3, #4
 800338a:	021b      	lsls	r3, r3, #8
 800338c:	4618      	mov	r0, r3
 800338e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003392:	f023 030f 	bic.w	r3, r3, #15
 8003396:	b25a      	sxtb	r2, r3
 8003398:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800339c:	4313      	orrs	r3, r2
 800339e:	b25b      	sxtb	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	4619      	mov	r1, r3
 80033a4:	f7ff fbec 	bl	8002b80 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80033a8:	88bb      	ldrh	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d110      	bne.n	80033d0 <socket+0x110>
	{
	   port = sock_any_port++;
 80033ae:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <socket+0x1f4>)
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	b291      	uxth	r1, r2
 80033b6:	4a3f      	ldr	r2, [pc, #252]	; (80034b4 <socket+0x1f4>)
 80033b8:	8011      	strh	r1, [r2, #0]
 80033ba:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80033bc:	4b3d      	ldr	r3, [pc, #244]	; (80034b4 <socket+0x1f4>)
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d103      	bne.n	80033d0 <socket+0x110>
 80033c8:	4b3a      	ldr	r3, [pc, #232]	; (80034b4 <socket+0x1f4>)
 80033ca:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80033ce:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	3304      	adds	r3, #4
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	3304      	adds	r3, #4
 80033d8:	461a      	mov	r2, r3
 80033da:	88bb      	ldrh	r3, [r7, #4]
 80033dc:	0a1b      	lsrs	r3, r3, #8
 80033de:	b29b      	uxth	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	4619      	mov	r1, r3
 80033e4:	4610      	mov	r0, r2
 80033e6:	f7ff fbcb 	bl	8002b80 <WIZCHIP_WRITE>
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	3304      	adds	r3, #4
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	3305      	adds	r3, #5
 80033f2:	461a      	mov	r2, r3
 80033f4:	88bb      	ldrh	r3, [r7, #4]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f7ff fbc0 	bl	8002b80 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	3304      	adds	r3, #4
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	3301      	adds	r3, #1
 8003408:	2101      	movs	r1, #1
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fbb8 	bl	8002b80 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003410:	bf00      	nop
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	3304      	adds	r3, #4
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	3301      	adds	r3, #1
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fbde 	bl	8002bdc <WIZCHIP_READ>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f5      	bne.n	8003412 <socket+0x152>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	2201      	movs	r2, #1
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	b21b      	sxth	r3, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	b21a      	sxth	r2, r3
 8003434:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <socket+0x1f8>)
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	b21b      	sxth	r3, r3
 800343a:	4013      	ands	r3, r2
 800343c:	b21b      	sxth	r3, r3
 800343e:	b29a      	uxth	r2, r3
 8003440:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <socket+0x1f8>)
 8003442:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	f003 0201 	and.w	r2, r3, #1
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	b21a      	sxth	r2, r3
 8003452:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <socket+0x1f8>)
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	b21b      	sxth	r3, r3
 8003458:	4313      	orrs	r3, r2
 800345a:	b21b      	sxth	r3, r3
 800345c:	b29a      	uxth	r2, r3
 800345e:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <socket+0x1f8>)
 8003460:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	2201      	movs	r2, #1
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	b21b      	sxth	r3, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	b21a      	sxth	r2, r3
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <socket+0x1fc>)
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	b21b      	sxth	r3, r3
 8003476:	4013      	ands	r3, r2
 8003478:	b21b      	sxth	r3, r3
 800347a:	b29a      	uxth	r2, r3
 800347c:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <socket+0x1fc>)
 800347e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	4a0f      	ldr	r2, [pc, #60]	; (80034c0 <socket+0x200>)
 8003484:	2100      	movs	r1, #0
 8003486:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	4a0d      	ldr	r2, [pc, #52]	; (80034c4 <socket+0x204>)
 800348e:	2100      	movs	r1, #0
 8003490:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003492:	bf00      	nop
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	3304      	adds	r3, #4
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	3303      	adds	r3, #3
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fb9d 	bl	8002bdc <WIZCHIP_READ>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f5      	beq.n	8003494 <socket+0x1d4>
   return (int8_t)sn;
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd90      	pop	{r4, r7, pc}
 80034b4:	20000022 	.word	0x20000022
 80034b8:	200000d4 	.word	0x200000d4
 80034bc:	200000d6 	.word	0x200000d6
 80034c0:	200000d8 	.word	0x200000d8
 80034c4:	200000e0 	.word	0x200000e0

080034c8 <close>:

int8_t close(uint8_t sn)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d902      	bls.n	80034de <close+0x16>
 80034d8:	f04f 33ff 	mov.w	r3, #4294967295
 80034dc:	e04d      	b.n	800357a <close+0xb2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	3304      	adds	r3, #4
 80034e2:	021b      	lsls	r3, r3, #8
 80034e4:	3301      	adds	r3, #1
 80034e6:	2110      	movs	r1, #16
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fb49 	bl	8002b80 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80034ee:	bf00      	nop
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	3304      	adds	r3, #4
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	3301      	adds	r3, #1
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fb6f 	bl	8002bdc <WIZCHIP_READ>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f5      	bne.n	80034f0 <close+0x28>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	3304      	adds	r3, #4
 8003508:	021b      	lsls	r3, r3, #8
 800350a:	3302      	adds	r3, #2
 800350c:	21ff      	movs	r1, #255	; 0xff
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fb36 	bl	8002b80 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	2201      	movs	r2, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	b21b      	sxth	r3, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	b21a      	sxth	r2, r3
 8003522:	4b18      	ldr	r3, [pc, #96]	; (8003584 <close+0xbc>)
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	b21b      	sxth	r3, r3
 8003528:	4013      	ands	r3, r2
 800352a:	b21b      	sxth	r3, r3
 800352c:	b29a      	uxth	r2, r3
 800352e:	4b15      	ldr	r3, [pc, #84]	; (8003584 <close+0xbc>)
 8003530:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	2201      	movs	r2, #1
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	b21b      	sxth	r3, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	b21a      	sxth	r2, r3
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <close+0xc0>)
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b21b      	sxth	r3, r3
 8003546:	4013      	ands	r3, r2
 8003548:	b21b      	sxth	r3, r3
 800354a:	b29a      	uxth	r2, r3
 800354c:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <close+0xc0>)
 800354e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	4a0e      	ldr	r2, [pc, #56]	; (800358c <close+0xc4>)
 8003554:	2100      	movs	r1, #0
 8003556:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	4a0c      	ldr	r2, [pc, #48]	; (8003590 <close+0xc8>)
 800355e:	2100      	movs	r1, #0
 8003560:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003562:	bf00      	nop
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	3304      	adds	r3, #4
 8003568:	021b      	lsls	r3, r3, #8
 800356a:	3303      	adds	r3, #3
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fb35 	bl	8002bdc <WIZCHIP_READ>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f5      	bne.n	8003564 <close+0x9c>
	return SOCK_OK;
 8003578:	2301      	movs	r3, #1
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200000d4 	.word	0x200000d4
 8003588:	200000d6 	.word	0x200000d6
 800358c:	200000d8 	.word	0x200000d8
 8003590:	200000e0 	.word	0x200000e0

08003594 <listen>:

int8_t listen(uint8_t sn)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d902      	bls.n	80035aa <listen+0x16>
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295
 80035a8:	e040      	b.n	800362c <listen+0x98>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	3304      	adds	r3, #4
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fb13 	bl	8002bdc <WIZCHIP_READ>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d002      	beq.n	80035c6 <listen+0x32>
 80035c0:	f06f 0304 	mvn.w	r3, #4
 80035c4:	e032      	b.n	800362c <listen+0x98>
	CHECK_SOCKINIT();
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	3304      	adds	r3, #4
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	3303      	adds	r3, #3
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fb04 	bl	8002bdc <WIZCHIP_READ>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b13      	cmp	r3, #19
 80035d8:	d002      	beq.n	80035e0 <listen+0x4c>
 80035da:	f06f 0302 	mvn.w	r3, #2
 80035de:	e025      	b.n	800362c <listen+0x98>
	setSn_CR(sn,Sn_CR_LISTEN);
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	3304      	adds	r3, #4
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	3301      	adds	r3, #1
 80035e8:	2102      	movs	r1, #2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fac8 	bl	8002b80 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80035f0:	bf00      	nop
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	3304      	adds	r3, #4
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	3301      	adds	r3, #1
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff faee 	bl	8002bdc <WIZCHIP_READ>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f5      	bne.n	80035f2 <listen+0x5e>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003606:	e006      	b.n	8003616 <listen+0x82>
   {
         close(sn);
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff ff5c 	bl	80034c8 <close>
         return SOCKERR_SOCKCLOSED;
 8003610:	f06f 0303 	mvn.w	r3, #3
 8003614:	e00a      	b.n	800362c <listen+0x98>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	3304      	adds	r3, #4
 800361a:	021b      	lsls	r3, r3, #8
 800361c:	3303      	adds	r3, #3
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff fadc 	bl	8002bdc <WIZCHIP_READ>
 8003624:	4603      	mov	r3, r0
 8003626:	2b14      	cmp	r3, #20
 8003628:	d1ee      	bne.n	8003608 <listen+0x74>
   }
   return SOCK_OK;
 800362a:	2301      	movs	r3, #1
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	2b04      	cmp	r3, #4
 8003642:	d902      	bls.n	800364a <disconnect+0x16>
 8003644:	f04f 33ff 	mov.w	r3, #4294967295
 8003648:	e059      	b.n	80036fe <disconnect+0xca>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	3304      	adds	r3, #4
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fac3 	bl	8002bdc <WIZCHIP_READ>
 8003656:	4603      	mov	r3, r0
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	2b01      	cmp	r3, #1
 800365e:	d002      	beq.n	8003666 <disconnect+0x32>
 8003660:	f06f 0304 	mvn.w	r3, #4
 8003664:	e04b      	b.n	80036fe <disconnect+0xca>
	setSn_CR(sn,Sn_CR_DISCON);
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	3304      	adds	r3, #4
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	3301      	adds	r3, #1
 800366e:	2108      	movs	r1, #8
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fa85 	bl	8002b80 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003676:	bf00      	nop
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	3304      	adds	r3, #4
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	3301      	adds	r3, #1
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff faab 	bl	8002bdc <WIZCHIP_READ>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f5      	bne.n	8003678 <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	2201      	movs	r2, #1
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	b21b      	sxth	r3, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	b21a      	sxth	r2, r3
 800369a:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <disconnect+0xd4>)
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	b21b      	sxth	r3, r3
 80036a0:	4013      	ands	r3, r2
 80036a2:	b21b      	sxth	r3, r3
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	4b18      	ldr	r3, [pc, #96]	; (8003708 <disconnect+0xd4>)
 80036a8:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80036aa:	4b18      	ldr	r3, [pc, #96]	; (800370c <disconnect+0xd8>)
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	fa42 f303 	asr.w	r3, r2, r3
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d014      	beq.n	80036e8 <disconnect+0xb4>
 80036be:	2300      	movs	r3, #0
 80036c0:	e01d      	b.n	80036fe <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	3304      	adds	r3, #4
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	3302      	adds	r3, #2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff fa86 	bl	8002bdc <WIZCHIP_READ>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d006      	beq.n	80036e8 <disconnect+0xb4>
	   {
	      close(sn);
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff fef3 	bl	80034c8 <close>
	      return SOCKERR_TIMEOUT;
 80036e2:	f06f 030c 	mvn.w	r3, #12
 80036e6:	e00a      	b.n	80036fe <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	3304      	adds	r3, #4
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	3303      	adds	r3, #3
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fa73 	bl	8002bdc <WIZCHIP_READ>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e2      	bne.n	80036c2 <disconnect+0x8e>
	   }
	}
	return SOCK_OK;
 80036fc:	2301      	movs	r3, #1
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	200000d6 	.word	0x200000d6
 800370c:	200000d4 	.word	0x200000d4

08003710 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	6039      	str	r1, [r7, #0]
 800371a:	71fb      	strb	r3, [r7, #7]
 800371c:	4613      	mov	r3, r2
 800371e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8003724:	2300      	movs	r3, #0
 8003726:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	2b04      	cmp	r3, #4
 800372c:	d902      	bls.n	8003734 <send+0x24>
 800372e:	f04f 33ff 	mov.w	r3, #4294967295
 8003732:	e0d8      	b.n	80038e6 <send+0x1d6>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	3304      	adds	r3, #4
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fa4e 	bl	8002bdc <WIZCHIP_READ>
 8003740:	4603      	mov	r3, r0
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	2b01      	cmp	r3, #1
 8003748:	d002      	beq.n	8003750 <send+0x40>
 800374a:	f06f 0304 	mvn.w	r3, #4
 800374e:	e0ca      	b.n	80038e6 <send+0x1d6>
   CHECK_SOCKDATA();
 8003750:	88bb      	ldrh	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d102      	bne.n	800375c <send+0x4c>
 8003756:	f06f 030d 	mvn.w	r3, #13
 800375a:	e0c4      	b.n	80038e6 <send+0x1d6>
   tmp = getSn_SR(sn);
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	3304      	adds	r3, #4
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	3303      	adds	r3, #3
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fa39 	bl	8002bdc <WIZCHIP_READ>
 800376a:	4603      	mov	r3, r0
 800376c:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	2b17      	cmp	r3, #23
 8003772:	d005      	beq.n	8003780 <send+0x70>
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b1c      	cmp	r3, #28
 8003778:	d002      	beq.n	8003780 <send+0x70>
 800377a:	f06f 0306 	mvn.w	r3, #6
 800377e:	e0b2      	b.n	80038e6 <send+0x1d6>
   if( sock_is_sending & (1<<sn) )
 8003780:	4b5b      	ldr	r3, [pc, #364]	; (80038f0 <send+0x1e0>)
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	fa42 f303 	asr.w	r3, r2, r3
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d033      	beq.n	80037fc <send+0xec>
   {
      tmp = getSn_IR(sn);
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	3304      	adds	r3, #4
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	3302      	adds	r3, #2
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fa1d 	bl	8002bdc <WIZCHIP_READ>
 80037a2:	4603      	mov	r3, r0
 80037a4:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d017      	beq.n	80037e0 <send+0xd0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	3304      	adds	r3, #4
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	3302      	adds	r3, #2
 80037b8:	2110      	movs	r1, #16
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff f9e0 	bl	8002b80 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	2201      	movs	r2, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	b21b      	sxth	r3, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	b21a      	sxth	r2, r3
 80037ce:	4b48      	ldr	r3, [pc, #288]	; (80038f0 <send+0x1e0>)
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b21b      	sxth	r3, r3
 80037d4:	4013      	ands	r3, r2
 80037d6:	b21b      	sxth	r3, r3
 80037d8:	b29a      	uxth	r2, r3
 80037da:	4b45      	ldr	r3, [pc, #276]	; (80038f0 <send+0x1e0>)
 80037dc:	801a      	strh	r2, [r3, #0]
 80037de:	e00d      	b.n	80037fc <send+0xec>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d006      	beq.n	80037f8 <send+0xe8>
      {
         close(sn);
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff fe6b 	bl	80034c8 <close>
         return SOCKERR_TIMEOUT;
 80037f2:	f06f 030c 	mvn.w	r3, #12
 80037f6:	e076      	b.n	80038e6 <send+0x1d6>
      }
      else return SOCK_BUSY;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e074      	b.n	80038e6 <send+0x1d6>
   }
   freesize = getSn_TxMAX(sn);
 80037fc:	201b      	movs	r0, #27
 80037fe:	f7ff f9ed 	bl	8002bdc <WIZCHIP_READ>
 8003802:	4603      	mov	r3, r0
 8003804:	4619      	mov	r1, r3
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	ea01 0203 	and.w	r2, r1, r3
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa42 f303 	asr.w	r3, r2, r3
 800381c:	2201      	movs	r2, #1
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	b29b      	uxth	r3, r3
 8003824:	029b      	lsls	r3, r3, #10
 8003826:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003828:	88ba      	ldrh	r2, [r7, #4]
 800382a:	89bb      	ldrh	r3, [r7, #12]
 800382c:	429a      	cmp	r2, r3
 800382e:	d901      	bls.n	8003834 <send+0x124>
 8003830:	89bb      	ldrh	r3, [r7, #12]
 8003832:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fa8e 	bl	8002d58 <getSn_TX_FSR>
 800383c:	4603      	mov	r3, r0
 800383e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	3304      	adds	r3, #4
 8003844:	021b      	lsls	r3, r3, #8
 8003846:	3303      	adds	r3, #3
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff f9c7 	bl	8002bdc <WIZCHIP_READ>
 800384e:	4603      	mov	r3, r0
 8003850:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b17      	cmp	r3, #23
 8003856:	d009      	beq.n	800386c <send+0x15c>
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b1c      	cmp	r3, #28
 800385c:	d006      	beq.n	800386c <send+0x15c>
      {
         close(sn);
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff fe31 	bl	80034c8 <close>
         return SOCKERR_SOCKSTATUS;
 8003866:	f06f 0306 	mvn.w	r3, #6
 800386a:	e03c      	b.n	80038e6 <send+0x1d6>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800386c:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <send+0x1e4>)
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	fa42 f303 	asr.w	r3, r2, r3
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <send+0x17c>
 8003880:	88ba      	ldrh	r2, [r7, #4]
 8003882:	89bb      	ldrh	r3, [r7, #12]
 8003884:	429a      	cmp	r2, r3
 8003886:	d901      	bls.n	800388c <send+0x17c>
 8003888:	2300      	movs	r3, #0
 800388a:	e02c      	b.n	80038e6 <send+0x1d6>
      if(len <= freesize) break;
 800388c:	88ba      	ldrh	r2, [r7, #4]
 800388e:	89bb      	ldrh	r3, [r7, #12]
 8003890:	429a      	cmp	r2, r3
 8003892:	d900      	bls.n	8003896 <send+0x186>
      freesize = getSn_TX_FSR(sn);
 8003894:	e7ce      	b.n	8003834 <send+0x124>
      if(len <= freesize) break;
 8003896:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8003898:	88ba      	ldrh	r2, [r7, #4]
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	6839      	ldr	r1, [r7, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fb4c 	bl	8002f3c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	3304      	adds	r3, #4
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	3301      	adds	r3, #1
 80038ac:	2120      	movs	r1, #32
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff f966 	bl	8002b80 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80038b4:	bf00      	nop
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	3304      	adds	r3, #4
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	3301      	adds	r3, #1
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff f98c 	bl	8002bdc <WIZCHIP_READ>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f5      	bne.n	80038b6 <send+0x1a6>
   sock_is_sending |= (1 << sn);
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	2201      	movs	r2, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	b21a      	sxth	r2, r3
 80038d4:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <send+0x1e0>)
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b21b      	sxth	r3, r3
 80038da:	4313      	orrs	r3, r2
 80038dc:	b21b      	sxth	r3, r3
 80038de:	b29a      	uxth	r2, r3
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <send+0x1e0>)
 80038e2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80038e4:	88bb      	ldrh	r3, [r7, #4]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	200000d6 	.word	0x200000d6
 80038f4:	200000d4 	.word	0x200000d4

080038f8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80038f8:	b590      	push	{r4, r7, lr}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	6039      	str	r1, [r7, #0]
 8003902:	71fb      	strb	r3, [r7, #7]
 8003904:	4613      	mov	r3, r2
 8003906:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8003908:	2300      	movs	r3, #0
 800390a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	2b04      	cmp	r3, #4
 8003914:	d902      	bls.n	800391c <recv+0x24>
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
 800391a:	e0a8      	b.n	8003a6e <recv+0x176>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	3304      	adds	r3, #4
 8003920:	021b      	lsls	r3, r3, #8
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff f95a 	bl	8002bdc <WIZCHIP_READ>
 8003928:	4603      	mov	r3, r0
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	2b01      	cmp	r3, #1
 8003930:	d002      	beq.n	8003938 <recv+0x40>
 8003932:	f06f 0304 	mvn.w	r3, #4
 8003936:	e09a      	b.n	8003a6e <recv+0x176>
   CHECK_SOCKDATA();
 8003938:	88bb      	ldrh	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d102      	bne.n	8003944 <recv+0x4c>
 800393e:	f06f 030d 	mvn.w	r3, #13
 8003942:	e094      	b.n	8003a6e <recv+0x176>
   
   recvsize = getSn_RxMAX(sn);
 8003944:	201a      	movs	r0, #26
 8003946:	f7ff f949 	bl	8002bdc <WIZCHIP_READ>
 800394a:	4603      	mov	r3, r0
 800394c:	4619      	mov	r1, r3
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	2203      	movs	r2, #3
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	ea01 0203 	and.w	r2, r1, r3
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	fa42 f303 	asr.w	r3, r2, r3
 8003964:	2201      	movs	r2, #1
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	b29b      	uxth	r3, r3
 800396c:	029b      	lsls	r3, r3, #10
 800396e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8003970:	89ba      	ldrh	r2, [r7, #12]
 8003972:	88bb      	ldrh	r3, [r7, #4]
 8003974:	429a      	cmp	r2, r3
 8003976:	d201      	bcs.n	800397c <recv+0x84>
 8003978:	89bb      	ldrh	r3, [r7, #12]
 800397a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fa2d 	bl	8002dde <getSn_RX_RSR>
 8003984:	4603      	mov	r3, r0
 8003986:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	3304      	adds	r3, #4
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	3303      	adds	r3, #3
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff f923 	bl	8002bdc <WIZCHIP_READ>
 8003996:	4603      	mov	r3, r0
 8003998:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	2b17      	cmp	r3, #23
 800399e:	d030      	beq.n	8003a02 <recv+0x10a>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b1c      	cmp	r3, #28
 80039a4:	d126      	bne.n	80039f4 <recv+0xfc>
            {
               if(recvsize != 0) break;
 80039a6:	89bb      	ldrh	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d13d      	bne.n	8003a28 <recv+0x130>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff f9d2 	bl	8002d58 <getSn_TX_FSR>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461c      	mov	r4, r3
 80039b8:	201b      	movs	r0, #27
 80039ba:	f7ff f90f 	bl	8002bdc <WIZCHIP_READ>
 80039be:	4603      	mov	r3, r0
 80039c0:	4619      	mov	r1, r3
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	ea01 0203 	and.w	r2, r1, r3
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	fa42 f303 	asr.w	r3, r2, r3
 80039d8:	2201      	movs	r2, #1
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	b29b      	uxth	r3, r3
 80039e0:	029b      	lsls	r3, r3, #10
 80039e2:	429c      	cmp	r4, r3
 80039e4:	d10d      	bne.n	8003a02 <recv+0x10a>
               {
                  close(sn);
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff fd6d 	bl	80034c8 <close>
                  return SOCKERR_SOCKSTATUS;
 80039ee:	f06f 0306 	mvn.w	r3, #6
 80039f2:	e03c      	b.n	8003a6e <recv+0x176>
               }
            }
            else
            {
               close(sn);
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fd66 	bl	80034c8 <close>
               return SOCKERR_SOCKSTATUS;
 80039fc:	f06f 0306 	mvn.w	r3, #6
 8003a00:	e035      	b.n	8003a6e <recv+0x176>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8003a02:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <recv+0x180>)
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	fa42 f303 	asr.w	r3, r2, r3
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <recv+0x128>
 8003a16:	89bb      	ldrh	r3, [r7, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <recv+0x128>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e026      	b.n	8003a6e <recv+0x176>
         if(recvsize != 0) break;
 8003a20:	89bb      	ldrh	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d102      	bne.n	8003a2c <recv+0x134>
         recvsize = getSn_RX_RSR(sn);
 8003a26:	e7a9      	b.n	800397c <recv+0x84>
               if(recvsize != 0) break;
 8003a28:	bf00      	nop
 8003a2a:	e000      	b.n	8003a2e <recv+0x136>
         if(recvsize != 0) break;
 8003a2c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8003a2e:	89ba      	ldrh	r2, [r7, #12]
 8003a30:	88bb      	ldrh	r3, [r7, #4]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d201      	bcs.n	8003a3a <recv+0x142>
 8003a36:	89bb      	ldrh	r3, [r7, #12]
 8003a38:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8003a3a:	88ba      	ldrh	r2, [r7, #4]
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	6839      	ldr	r1, [r7, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fb34 	bl	80030ae <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	2140      	movs	r1, #64	; 0x40
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff f895 	bl	8002b80 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003a56:	bf00      	nop
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	3301      	adds	r3, #1
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff f8bb 	bl	8002bdc <WIZCHIP_READ>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f5      	bne.n	8003a58 <recv+0x160>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003a6c:	88bb      	ldrh	r3, [r7, #4]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd90      	pop	{r4, r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200000d4 	.word	0x200000d4

08003a7c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	70fb      	strb	r3, [r7, #3]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	4603      	mov	r3, r0
 8003af6:	71fb      	strb	r3, [r7, #7]
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr
	...

08003b04 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <reg_wizchip_cs_cbfunc+0x16>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <reg_wizchip_cs_cbfunc+0x3c>)
 8003b1c:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <reg_wizchip_cs_cbfunc+0x40>)
 8003b1e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003b20:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <reg_wizchip_cs_cbfunc+0x3c>)
 8003b22:	4a09      	ldr	r2, [pc, #36]	; (8003b48 <reg_wizchip_cs_cbfunc+0x44>)
 8003b24:	619a      	str	r2, [r3, #24]
 8003b26:	e006      	b.n	8003b36 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003b28:	4a05      	ldr	r2, [pc, #20]	; (8003b40 <reg_wizchip_cs_cbfunc+0x3c>)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003b2e:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <reg_wizchip_cs_cbfunc+0x3c>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	6193      	str	r3, [r2, #24]
   }
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	20000024 	.word	0x20000024
 8003b44:	08003a95 	.word	0x08003a95
 8003b48:	08003aa1 	.word	0x08003aa1

08003b4c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003b56:	bf00      	nop
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <reg_wizchip_spi_cbfunc+0x4c>)
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f9      	beq.n	8003b58 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <reg_wizchip_spi_cbfunc+0x24>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <reg_wizchip_spi_cbfunc+0x4c>)
 8003b72:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <reg_wizchip_spi_cbfunc+0x50>)
 8003b74:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <reg_wizchip_spi_cbfunc+0x4c>)
 8003b78:	4a09      	ldr	r2, [pc, #36]	; (8003ba0 <reg_wizchip_spi_cbfunc+0x54>)
 8003b7a:	621a      	str	r2, [r3, #32]
 8003b7c:	e006      	b.n	8003b8c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003b7e:	4a06      	ldr	r2, [pc, #24]	; (8003b98 <reg_wizchip_spi_cbfunc+0x4c>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003b84:	4a04      	ldr	r2, [pc, #16]	; (8003b98 <reg_wizchip_spi_cbfunc+0x4c>)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6213      	str	r3, [r2, #32]
   }
}
 8003b8a:	bf00      	nop
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000024 	.word	0x20000024
 8003b9c:	08003ae1 	.word	0x08003ae1
 8003ba0:	08003aef 	.word	0x08003aef

08003ba4 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	6039      	str	r1, [r7, #0]
 8003bae:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	2b0f      	cmp	r3, #15
 8003bc0:	f200 809c 	bhi.w	8003cfc <ctlwizchip+0x158>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <ctlwizchip+0x28>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003c0d 	.word	0x08003c0d
 8003bd0:	08003c13 	.word	0x08003c13
 8003bd4:	08003c3f 	.word	0x08003c3f
 8003bd8:	08003c33 	.word	0x08003c33
 8003bdc:	08003c4d 	.word	0x08003c4d
 8003be0:	08003c59 	.word	0x08003c59
 8003be4:	08003cfd 	.word	0x08003cfd
 8003be8:	08003cfd 	.word	0x08003cfd
 8003bec:	08003c67 	.word	0x08003c67
 8003bf0:	08003ca1 	.word	0x08003ca1
 8003bf4:	08003ca7 	.word	0x08003ca7
 8003bf8:	08003caf 	.word	0x08003caf
 8003bfc:	08003d03 	.word	0x08003d03
 8003c00:	08003cb7 	.word	0x08003cb7
 8003c04:	08003cc5 	.word	0x08003cc5
 8003c08:	08003ce1 	.word	0x08003ce1
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003c0c:	f000 f882 	bl	8003d14 <wizchip_sw_reset>
         break;
 8003c10:	e078      	b.n	8003d04 <ctlwizchip+0x160>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d004      	beq.n	8003c22 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 f8b7 	bl	8003d9c <wizchip_init>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	e069      	b.n	8003d06 <ctlwizchip+0x162>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 f992 	bl	8003f60 <wizchip_clrinterrupt>
         break;
 8003c3c:	e062      	b.n	8003d04 <ctlwizchip+0x160>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003c3e:	f000 f9b2 	bl	8003fa6 <wizchip_getinterrupt>
 8003c42:	4603      	mov	r3, r0
 8003c44:	461a      	mov	r2, r3
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	801a      	strh	r2, [r3, #0]
         break;
 8003c4a:	e05b      	b.n	8003d04 <ctlwizchip+0x160>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 f9ce 	bl	8003ff2 <wizchip_setinterruptmask>
         break;         
 8003c56:	e055      	b.n	8003d04 <ctlwizchip+0x160>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003c58:	f000 f9eb 	bl	8004032 <wizchip_getinterruptmask>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	461a      	mov	r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	801a      	strh	r2, [r3, #0]
         break;
 8003c64:	e04e      	b.n	8003d04 <ctlwizchip+0x160>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003c66:	4b2a      	ldr	r3, [pc, #168]	; (8003d10 <ctlwizchip+0x16c>)
 8003c68:	789a      	ldrb	r2, [r3, #2]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	4a27      	ldr	r2, [pc, #156]	; (8003d10 <ctlwizchip+0x16c>)
 8003c74:	78d2      	ldrb	r2, [r2, #3]
 8003c76:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	4a24      	ldr	r2, [pc, #144]	; (8003d10 <ctlwizchip+0x16c>)
 8003c7e:	7912      	ldrb	r2, [r2, #4]
 8003c80:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	3303      	adds	r3, #3
 8003c86:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <ctlwizchip+0x16c>)
 8003c88:	7952      	ldrb	r2, [r2, #5]
 8003c8a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4a1f      	ldr	r2, [pc, #124]	; (8003d10 <ctlwizchip+0x16c>)
 8003c92:	7992      	ldrb	r2, [r2, #6]
 8003c94:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	3305      	adds	r3, #5
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
         break;
 8003c9e:	e031      	b.n	8003d04 <ctlwizchip+0x160>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003ca0:	f000 fa0e 	bl	80040c0 <wizphy_reset>
         break;
 8003ca4:	e02e      	b.n	8003d04 <ctlwizchip+0x160>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f000 fa2a 	bl	8004100 <wizphy_setphyconf>
         break;
 8003cac:	e02a      	b.n	8003d04 <ctlwizchip+0x160>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003cae:	6838      	ldr	r0, [r7, #0]
 8003cb0:	f000 fa5f 	bl	8004172 <wizphy_getphyconf>
         break;
 8003cb4:	e026      	b.n	8003d04 <ctlwizchip+0x160>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fa8f 	bl	80041de <wizphy_setphypmode>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	e020      	b.n	8003d06 <ctlwizchip+0x162>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003cc4:	f000 f9ee 	bl	80040a4 <wizphy_getphypmode>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
 8003cce:	2bff      	cmp	r3, #255	; 0xff
 8003cd0:	d102      	bne.n	8003cd8 <ctlwizchip+0x134>
 8003cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd6:	e016      	b.n	8003d06 <ctlwizchip+0x162>
         *(uint8_t*)arg = tmp;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	7dfa      	ldrb	r2, [r7, #23]
 8003cdc:	701a      	strb	r2, [r3, #0]
         break;
 8003cde:	e011      	b.n	8003d04 <ctlwizchip+0x160>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003ce0:	f000 f9cb 	bl	800407a <wizphy_getphylink>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	2bff      	cmp	r3, #255	; 0xff
 8003cec:	d102      	bne.n	8003cf4 <ctlwizchip+0x150>
 8003cee:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf2:	e008      	b.n	8003d06 <ctlwizchip+0x162>
         *(uint8_t*)arg = tmp;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	7dfa      	ldrb	r2, [r7, #23]
 8003cf8:	701a      	strb	r2, [r3, #0]
         break;
 8003cfa:	e003      	b.n	8003d04 <ctlwizchip+0x160>
   #endif      
      default:
         return -1;
 8003cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003d00:	e001      	b.n	8003d06 <ctlwizchip+0x162>
         break;
 8003d02:	bf00      	nop
   }
   return 0;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000024 	.word	0x20000024

08003d14 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003d1a:	1d3b      	adds	r3, r7, #4
 8003d1c:	2206      	movs	r2, #6
 8003d1e:	4619      	mov	r1, r3
 8003d20:	2009      	movs	r0, #9
 8003d22:	f7fe ffd1 	bl	8002cc8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003d26:	f107 0314 	add.w	r3, r7, #20
 8003d2a:	2204      	movs	r2, #4
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	2001      	movs	r0, #1
 8003d30:	f7fe ffca 	bl	8002cc8 <WIZCHIP_READ_BUF>
 8003d34:	f107 0310 	add.w	r3, r7, #16
 8003d38:	2204      	movs	r2, #4
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	2005      	movs	r0, #5
 8003d3e:	f7fe ffc3 	bl	8002cc8 <WIZCHIP_READ_BUF>
 8003d42:	f107 030c 	add.w	r3, r7, #12
 8003d46:	2204      	movs	r2, #4
 8003d48:	4619      	mov	r1, r3
 8003d4a:	200f      	movs	r0, #15
 8003d4c:	f7fe ffbc 	bl	8002cc8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003d50:	2180      	movs	r1, #128	; 0x80
 8003d52:	2000      	movs	r0, #0
 8003d54:	f7fe ff14 	bl	8002b80 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003d58:	2000      	movs	r0, #0
 8003d5a:	f7fe ff3f 	bl	8002bdc <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	2206      	movs	r2, #6
 8003d62:	4619      	mov	r1, r3
 8003d64:	2009      	movs	r0, #9
 8003d66:	f7fe ff67 	bl	8002c38 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003d6a:	f107 0314 	add.w	r3, r7, #20
 8003d6e:	2204      	movs	r2, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	2001      	movs	r0, #1
 8003d74:	f7fe ff60 	bl	8002c38 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003d78:	f107 0310 	add.w	r3, r7, #16
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	4619      	mov	r1, r3
 8003d80:	2005      	movs	r0, #5
 8003d82:	f7fe ff59 	bl	8002c38 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003d86:	f107 030c 	add.w	r3, r7, #12
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	200f      	movs	r0, #15
 8003d90:	f7fe ff52 	bl	8002c38 <WIZCHIP_WRITE_BUF>
}
 8003d94:	bf00      	nop
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	737b      	strb	r3, [r7, #13]
   wizchip_sw_reset();
 8003daa:	f7ff ffb3 	bl	8003d14 <wizchip_sw_reset>
   if(txsize)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d066      	beq.n	8003e82 <wizchip_init+0xe6>
   {
      tmp = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	737b      	strb	r3, [r7, #13]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003db8:	2300      	movs	r3, #0
 8003dba:	73fb      	strb	r3, [r7, #15]
 8003dbc:	e015      	b.n	8003dea <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	781a      	ldrb	r2, [r3, #0]
 8003dc8:	7b7b      	ldrb	r3, [r7, #13]
 8003dca:	4413      	add	r3, r2
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	737b      	strb	r3, [r7, #13]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 8003dd0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	dd02      	ble.n	8003dde <wizchip_init+0x42>
 8003dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ddc:	e0bc      	b.n	8003f58 <wizchip_init+0x1bc>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	3301      	adds	r3, #1
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	73fb      	strb	r3, [r7, #15]
 8003dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	dde5      	ble.n	8003dbe <wizchip_init+0x22>
		#else
			if(tmp > 16) return -1;
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	73fb      	strb	r3, [r7, #15]
 8003df6:	e040      	b.n	8003e7a <wizchip_init+0xde>
		{
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73bb      	strb	r3, [r7, #14]
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 8003dfc:	e005      	b.n	8003e0a <wizchip_init+0x6e>
 8003dfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	3301      	adds	r3, #1
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	73bb      	strb	r3, [r7, #14]
 8003e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e1a:	fa42 f303 	asr.w	r3, r2, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d006      	beq.n	8003e30 <wizchip_init+0x94>
 8003e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	4413      	add	r3, r2
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e6      	bne.n	8003dfe <wizchip_init+0x62>
			setSn_TXBUF_SIZE(i, j);
 8003e30:	201b      	movs	r0, #27
 8003e32:	f7fe fed3 	bl	8002bdc <WIZCHIP_READ>
 8003e36:	4603      	mov	r3, r0
 8003e38:	b25a      	sxtb	r2, r3
 8003e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	2103      	movs	r1, #3
 8003e42:	fa01 f303 	lsl.w	r3, r1, r3
 8003e46:	b25b      	sxtb	r3, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	b25b      	sxtb	r3, r3
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	b25a      	sxtb	r2, r3
 8003e50:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5e:	b25b      	sxtb	r3, r3
 8003e60:	4313      	orrs	r3, r2
 8003e62:	b25b      	sxtb	r3, r3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	4619      	mov	r1, r3
 8003e68:	201b      	movs	r0, #27
 8003e6a:	f7fe fe89 	bl	8002b80 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	3301      	adds	r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	73fb      	strb	r3, [r7, #15]
 8003e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	ddba      	ble.n	8003df8 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d066      	beq.n	8003f56 <wizchip_init+0x1ba>
   {
      tmp = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	737b      	strb	r3, [r7, #13]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]
 8003e90:	e015      	b.n	8003ebe <wizchip_init+0x122>
		{
			tmp += rxsize[i];
 8003e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	4413      	add	r3, r2
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	7b7b      	ldrb	r3, [r7, #13]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	737b      	strb	r3, [r7, #13]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 8003ea4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	dd02      	ble.n	8003eb2 <wizchip_init+0x116>
 8003eac:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb0:	e052      	b.n	8003f58 <wizchip_init+0x1bc>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	3301      	adds	r3, #1
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	73fb      	strb	r3, [r7, #15]
 8003ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	dde5      	ble.n	8003e92 <wizchip_init+0xf6>
		#else
			if(tmp > 16) return -1;
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]
 8003eca:	e040      	b.n	8003f4e <wizchip_init+0x1b2>
		{
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	73bb      	strb	r3, [r7, #14]
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 8003ed0:	e005      	b.n	8003ede <wizchip_init+0x142>
 8003ed2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	3301      	adds	r3, #1
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	73bb      	strb	r3, [r7, #14]
 8003ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003eee:	fa42 f303 	asr.w	r3, r2, r3
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d006      	beq.n	8003f04 <wizchip_init+0x168>
 8003ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	4413      	add	r3, r2
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e6      	bne.n	8003ed2 <wizchip_init+0x136>
			setSn_RXBUF_SIZE(i, j);
 8003f04:	201a      	movs	r0, #26
 8003f06:	f7fe fe69 	bl	8002bdc <WIZCHIP_READ>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	b25a      	sxtb	r2, r3
 8003f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	2103      	movs	r1, #3
 8003f16:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1a:	b25b      	sxtb	r3, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	b25b      	sxtb	r3, r3
 8003f20:	4013      	ands	r3, r2
 8003f22:	b25a      	sxtb	r2, r3
 8003f24:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f32:	b25b      	sxtb	r3, r3
 8003f34:	4313      	orrs	r3, r2
 8003f36:	b25b      	sxtb	r3, r3
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	201a      	movs	r0, #26
 8003f3e:	f7fe fe1f 	bl	8002b80 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	3301      	adds	r3, #1
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	73fb      	strb	r3, [r7, #15]
 8003f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	ddba      	ble.n	8003ecc <wizchip_init+0x130>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	f043 0310 	orr.w	r3, r3, #16
 8003f7c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ == W5200
   ir |= (1 << 6);
#endif
   
#if _WIZCHIP_ < W5200
   sir &= 0x0F;
 8003f7e:	7bbb      	ldrb	r3, [r7, #14]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	73bb      	strb	r3, [r7, #14]
#endif

#if _WIZCHIP_ <= W5100S
   ir |= sir;
 8003f86:	7bfa      	ldrb	r2, [r7, #15]
 8003f88:	7bbb      	ldrb	r3, [r7, #14]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	73fb      	strb	r3, [r7, #15]
   setIR(ir);
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	f023 031f 	bic.w	r3, r3, #31
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4619      	mov	r1, r3
 8003f98:	2015      	movs	r0, #21
 8003f9a:	f7fe fdf1 	bl	8002b80 <WIZCHIP_WRITE>
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
   setSIR(sir);
#endif   
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
 8003fb8:	2015      	movs	r0, #21
 8003fba:	f7fe fe0f 	bl	8002bdc <WIZCHIP_READ>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f023 031f 	bic.w	r3, r3, #31
 8003fc4:	71fb      	strb	r3, [r7, #7]
   sir = ir & 0x0F;
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	71bb      	strb	r3, [r7, #6]
#endif         

//M20150601 : For Integrating with W5300
//#if _WIZCHIP_ < W5500
#if _WIZCHIP_ < W5200
   ir &= ~(1<<4); // IK_WOL
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	f023 0310 	bic.w	r3, r3, #16
 8003fd4:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003fd6:	79bb      	ldrb	r3, [r7, #6]
 8003fd8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003fda:	88bb      	ldrh	r3, [r7, #4]
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003fe8:	88bb      	ldrh	r3, [r7, #4]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003ffc:	88fb      	ldrh	r3, [r7, #6]
 8003ffe:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8004000:	88fb      	ldrh	r3, [r7, #6]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	b29b      	uxth	r3, r3
 8004006:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	f023 0310 	bic.w	r3, r3, #16
 800400e:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);
#endif
   
#if _WIZCHIP_ < W5200
   simr &= 0x0F;
 8004010:	7bbb      	ldrb	r3, [r7, #14]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	73bb      	strb	r3, [r7, #14]
   imr |= simr;
 8004018:	7bfa      	ldrb	r2, [r7, #15]
 800401a:	7bbb      	ldrb	r3, [r7, #14]
 800401c:	4313      	orrs	r3, r2
 800401e:	73fb      	strb	r3, [r7, #15]
   setIMR(imr);
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	4619      	mov	r1, r3
 8004024:	2016      	movs	r0, #22
 8004026:	f7fe fdab 	bl	8002b80 <WIZCHIP_WRITE>
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 800402a:	bf00      	nop
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
 8004044:	2016      	movs	r0, #22
 8004046:	f7fe fdc9 	bl	8002bdc <WIZCHIP_READ>
 800404a:	4603      	mov	r3, r0
 800404c:	71fb      	strb	r3, [r7, #7]
   simr = imr & 0x0F;
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	f023 0310 	bic.w	r3, r3, #16
 800405c:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800405e:	79bb      	ldrb	r3, [r7, #6]
 8004060:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8004062:	88bb      	ldrh	r3, [r7, #4]
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	b29a      	uxth	r2, r3
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	b29b      	uxth	r3, r3
 800406c:	4413      	add	r3, r2
 800406e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004070:	88bb      	ldrh	r3, [r7, #4]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b082      	sub	sp, #8
 800407e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8004080:	2300      	movs	r3, #0
 8004082:	71fb      	strb	r3, [r7, #7]
#if _WIZCHIP_ == W5100S
   if(getPHYSR() & PHYSR_LNK)
 8004084:	203c      	movs	r0, #60	; 0x3c
 8004086:	f7fe fda9 	bl	8002bdc <WIZCHIP_READ>
 800408a:	4603      	mov	r3, r0
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <wizphy_getphylink+0x1e>
	   tmp = PHY_LINK_ON;
 8004094:	2301      	movs	r3, #1
 8004096:	71fb      	strb	r3, [r7, #7]
      tmp = PHY_LINK_ON;

#else
   tmp = -1;
#endif
   return tmp;
 8004098:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	71fb      	strb	r3, [r7, #7]
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
         tmp = PHY_POWER_DOWN;
      else 
         tmp = PHY_POWER_NORM;
   #else
      tmp = -1;
 80040ae:	23ff      	movs	r3, #255	; 0xff
 80040b0:	71fb      	strb	r3, [r7, #7]
   #endif
   return tmp;
 80040b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr

080040c0 <wizphy_reset>:
#endif

#if _WIZCHIP_ == W5100S
void wizphy_reset(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
	uint16_t tmp = wiz_mdio_read(PHYMDIO_BMCR);
 80040c6:	2000      	movs	r0, #0
 80040c8:	f7ff f8d2 	bl	8003270 <wiz_mdio_read>
 80040cc:	4603      	mov	r3, r0
 80040ce:	80fb      	strh	r3, [r7, #6]
	tmp |= BMCR_RESET;
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040da:	80fb      	strh	r3, [r7, #6]
	wiz_mdio_write(PHYMDIO_BMCR, tmp);
 80040dc:	88fb      	ldrh	r3, [r7, #6]
 80040de:	4619      	mov	r1, r3
 80040e0:	2000      	movs	r0, #0
 80040e2:	f7ff f89a 	bl	800321a <wiz_mdio_write>
	while(wiz_mdio_read(PHYMDIO_BMCR)&BMCR_RESET){}
 80040e6:	bf00      	nop
 80040e8:	2000      	movs	r0, #0
 80040ea:	f7ff f8c1 	bl	8003270 <wiz_mdio_read>
 80040ee:	4603      	mov	r3, r0
 80040f0:	b21b      	sxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	dbf8      	blt.n	80040e8 <wizphy_reset+0x28>
}
 80040f6:	bf00      	nop
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
   uint16_t tmp = wiz_mdio_read(PHYMDIO_BMCR);
 8004108:	2000      	movs	r0, #0
 800410a:	f7ff f8b1 	bl	8003270 <wiz_mdio_read>
 800410e:	4603      	mov	r3, r0
 8004110:	81fb      	strh	r3, [r7, #14]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	785b      	ldrb	r3, [r3, #1]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d104      	bne.n	8004124 <wizphy_setphyconf+0x24>
      tmp |= BMCR_AUTONEGO;
 800411a:	89fb      	ldrh	r3, [r7, #14]
 800411c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004120:	81fb      	strh	r3, [r7, #14]
 8004122:	e01d      	b.n	8004160 <wizphy_setphyconf+0x60>
   else
   {
	  tmp &= ~BMCR_AUTONEGO;
 8004124:	89fb      	ldrh	r3, [r7, #14]
 8004126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800412a:	81fb      	strh	r3, [r7, #14]
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	78db      	ldrb	r3, [r3, #3]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d104      	bne.n	800413e <wizphy_setphyconf+0x3e>
      {
    	  tmp |= BMCR_DUP;
 8004134:	89fb      	ldrh	r3, [r7, #14]
 8004136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413a:	81fb      	strh	r3, [r7, #14]
 800413c:	e003      	b.n	8004146 <wizphy_setphyconf+0x46>
      }
      else
      {
    	  tmp &= ~BMCR_DUP;
 800413e:	89fb      	ldrh	r3, [r7, #14]
 8004140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004144:	81fb      	strh	r3, [r7, #14]
      }
      if(phyconf->speed == PHY_SPEED_100)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	789b      	ldrb	r3, [r3, #2]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d104      	bne.n	8004158 <wizphy_setphyconf+0x58>
      {
    	  tmp |= BMCR_SPEED;
 800414e:	89fb      	ldrh	r3, [r7, #14]
 8004150:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004154:	81fb      	strh	r3, [r7, #14]
 8004156:	e003      	b.n	8004160 <wizphy_setphyconf+0x60>
      }
      else
      {
    	  tmp &= ~BMCR_SPEED;
 8004158:	89fb      	ldrh	r3, [r7, #14]
 800415a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800415e:	81fb      	strh	r3, [r7, #14]
      }
   }
   wiz_mdio_write(PHYMDIO_BMCR, tmp);
 8004160:	89fb      	ldrh	r3, [r7, #14]
 8004162:	4619      	mov	r1, r3
 8004164:	2000      	movs	r0, #0
 8004166:	f7ff f858 	bl	800321a <wiz_mdio_write>
}
 800416a:	bf00      	nop
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
   uint16_t tmp = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	81fb      	strh	r3, [r7, #14]
   tmp = wiz_mdio_read(PHYMDIO_BMCR);
 800417e:	2000      	movs	r0, #0
 8004180:	f7ff f876 	bl	8003270 <wiz_mdio_read>
 8004184:	4603      	mov	r3, r0
 8004186:	81fb      	strh	r3, [r7, #14]
   phyconf->by   = PHY_CONFBY_SW;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	701a      	strb	r2, [r3, #0]
   if(tmp & BMCR_AUTONEGO)
 800418e:	89fb      	ldrh	r3, [r7, #14]
 8004190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <wizphy_getphyconf+0x2e>
   {
	   phyconf->mode = PHY_MODE_AUTONEGO;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	705a      	strb	r2, [r3, #1]
	   if(tmp&BMCR_DUP) phyconf->duplex = PHY_DUPLEX_FULL;
	   else phyconf->duplex = PHY_DUPLEX_HALF;
	   if(tmp&BMCR_SPEED) phyconf->speed = PHY_SPEED_100;
	   else phyconf->speed = PHY_SPEED_10;
   }
}
 800419e:	e01a      	b.n	80041d6 <wizphy_getphyconf+0x64>
	   phyconf->mode = PHY_MODE_MANUAL;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	705a      	strb	r2, [r3, #1]
	   if(tmp&BMCR_DUP) phyconf->duplex = PHY_DUPLEX_FULL;
 80041a6:	89fb      	ldrh	r3, [r7, #14]
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <wizphy_getphyconf+0x46>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	70da      	strb	r2, [r3, #3]
 80041b6:	e002      	b.n	80041be <wizphy_getphyconf+0x4c>
	   else phyconf->duplex = PHY_DUPLEX_HALF;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	70da      	strb	r2, [r3, #3]
	   if(tmp&BMCR_SPEED) phyconf->speed = PHY_SPEED_100;
 80041be:	89fb      	ldrh	r3, [r7, #14]
 80041c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <wizphy_getphyconf+0x5e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	709a      	strb	r2, [r3, #2]
}
 80041ce:	e002      	b.n	80041d6 <wizphy_getphyconf+0x64>
	   else phyconf->speed = PHY_SPEED_10;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	709a      	strb	r2, [r3, #2]
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	4603      	mov	r3, r0
 80041e6:	71fb      	strb	r3, [r7, #7]
   uint16_t tmp = 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	81fb      	strh	r3, [r7, #14]
   tmp = wiz_mdio_read(PHYMDIO_BMCR);
 80041ec:	2000      	movs	r0, #0
 80041ee:	f7ff f83f 	bl	8003270 <wiz_mdio_read>
 80041f2:	4603      	mov	r3, r0
 80041f4:	81fb      	strh	r3, [r7, #14]
   if( pmode == PHY_POWER_DOWN)
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d104      	bne.n	8004206 <wizphy_setphypmode+0x28>
   {
      tmp |= BMCR_PWDN;
 80041fc:	89fb      	ldrh	r3, [r7, #14]
 80041fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004202:	81fb      	strh	r3, [r7, #14]
 8004204:	e003      	b.n	800420e <wizphy_setphypmode+0x30>
   }
   else
   {
	   tmp &= ~BMCR_PWDN;
 8004206:	89fb      	ldrh	r3, [r7, #14]
 8004208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800420c:	81fb      	strh	r3, [r7, #14]
   }
   wiz_mdio_write(PHYMDIO_BMCR, tmp);
 800420e:	89fb      	ldrh	r3, [r7, #14]
 8004210:	4619      	mov	r1, r3
 8004212:	2000      	movs	r0, #0
 8004214:	f7ff f801 	bl	800321a <wiz_mdio_write>
   tmp = wiz_mdio_read(PHYMDIO_BMCR);
 8004218:	2000      	movs	r0, #0
 800421a:	f7ff f829 	bl	8003270 <wiz_mdio_read>
 800421e:	4603      	mov	r3, r0
 8004220:	81fb      	strh	r3, [r7, #14]
   if( pmode == PHY_POWER_DOWN)
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d106      	bne.n	8004236 <wizphy_setphypmode+0x58>
   {
      if(tmp & BMCR_PWDN) return 0;
 8004228:	89fb      	ldrh	r3, [r7, #14]
 800422a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422e:	2b00      	cmp	r3, #0
 8004230:	d008      	beq.n	8004244 <wizphy_setphypmode+0x66>
 8004232:	2300      	movs	r3, #0
 8004234:	e008      	b.n	8004248 <wizphy_setphypmode+0x6a>
   }
   else
   {
      if((tmp & BMCR_PWDN) != BMCR_PWDN) return 0;
 8004236:	89fb      	ldrh	r3, [r7, #14]
 8004238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <wizphy_setphypmode+0x66>
 8004240:	2300      	movs	r3, #0
 8004242:	e001      	b.n	8004248 <wizphy_setphypmode+0x6a>
   }
   return -1;
 8004244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2206      	movs	r2, #6
 800425c:	4619      	mov	r1, r3
 800425e:	2009      	movs	r0, #9
 8004260:	f7fe fcea 	bl	8002c38 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	330e      	adds	r3, #14
 8004268:	2204      	movs	r2, #4
 800426a:	4619      	mov	r1, r3
 800426c:	2001      	movs	r0, #1
 800426e:	f7fe fce3 	bl	8002c38 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	330a      	adds	r3, #10
 8004276:	2204      	movs	r2, #4
 8004278:	4619      	mov	r1, r3
 800427a:	2005      	movs	r0, #5
 800427c:	f7fe fcdc 	bl	8002c38 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3306      	adds	r3, #6
 8004284:	2204      	movs	r2, #4
 8004286:	4619      	mov	r1, r3
 8004288:	200f      	movs	r0, #15
 800428a:	f7fe fcd5 	bl	8002c38 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	7c9a      	ldrb	r2, [r3, #18]
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <wizchip_setnetinfo+0x70>)
 8004294:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	7cda      	ldrb	r2, [r3, #19]
 800429a:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <wizchip_setnetinfo+0x70>)
 800429c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	7d1a      	ldrb	r2, [r3, #20]
 80042a2:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <wizchip_setnetinfo+0x70>)
 80042a4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	7d5a      	ldrb	r2, [r3, #21]
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <wizchip_setnetinfo+0x70>)
 80042ac:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	7d9a      	ldrb	r2, [r3, #22]
 80042b2:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <wizchip_setnetinfo+0x74>)
 80042b4:	701a      	strb	r2, [r3, #0]
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	200000e4 	.word	0x200000e4
 80042c4:	200000e8 	.word	0x200000e8

080042c8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2206      	movs	r2, #6
 80042d4:	4619      	mov	r1, r3
 80042d6:	2009      	movs	r0, #9
 80042d8:	f7fe fcf6 	bl	8002cc8 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	330e      	adds	r3, #14
 80042e0:	2204      	movs	r2, #4
 80042e2:	4619      	mov	r1, r3
 80042e4:	2001      	movs	r0, #1
 80042e6:	f7fe fcef 	bl	8002cc8 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	330a      	adds	r3, #10
 80042ee:	2204      	movs	r2, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	2005      	movs	r0, #5
 80042f4:	f7fe fce8 	bl	8002cc8 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3306      	adds	r3, #6
 80042fc:	2204      	movs	r2, #4
 80042fe:	4619      	mov	r1, r3
 8004300:	200f      	movs	r0, #15
 8004302:	f7fe fce1 	bl	8002cc8 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8004306:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <wizchip_getnetinfo+0x70>)
 8004308:	781a      	ldrb	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800430e:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <wizchip_getnetinfo+0x70>)
 8004310:	785a      	ldrb	r2, [r3, #1]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004316:	4b08      	ldr	r3, [pc, #32]	; (8004338 <wizchip_getnetinfo+0x70>)
 8004318:	789a      	ldrb	r2, [r3, #2]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <wizchip_getnetinfo+0x70>)
 8004320:	78da      	ldrb	r2, [r3, #3]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <wizchip_getnetinfo+0x74>)
 8004328:	781a      	ldrb	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	759a      	strb	r2, [r3, #22]
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	200000e4 	.word	0x200000e4
 800433c:	200000e8 	.word	0x200000e8

08004340 <__errno>:
 8004340:	4b01      	ldr	r3, [pc, #4]	; (8004348 <__errno+0x8>)
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000050 	.word	0x20000050

0800434c <__libc_init_array>:
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	2600      	movs	r6, #0
 8004350:	4d0c      	ldr	r5, [pc, #48]	; (8004384 <__libc_init_array+0x38>)
 8004352:	4c0d      	ldr	r4, [pc, #52]	; (8004388 <__libc_init_array+0x3c>)
 8004354:	1b64      	subs	r4, r4, r5
 8004356:	10a4      	asrs	r4, r4, #2
 8004358:	42a6      	cmp	r6, r4
 800435a:	d109      	bne.n	8004370 <__libc_init_array+0x24>
 800435c:	f000 fff8 	bl	8005350 <_init>
 8004360:	2600      	movs	r6, #0
 8004362:	4d0a      	ldr	r5, [pc, #40]	; (800438c <__libc_init_array+0x40>)
 8004364:	4c0a      	ldr	r4, [pc, #40]	; (8004390 <__libc_init_array+0x44>)
 8004366:	1b64      	subs	r4, r4, r5
 8004368:	10a4      	asrs	r4, r4, #2
 800436a:	42a6      	cmp	r6, r4
 800436c:	d105      	bne.n	800437a <__libc_init_array+0x2e>
 800436e:	bd70      	pop	{r4, r5, r6, pc}
 8004370:	f855 3b04 	ldr.w	r3, [r5], #4
 8004374:	4798      	blx	r3
 8004376:	3601      	adds	r6, #1
 8004378:	e7ee      	b.n	8004358 <__libc_init_array+0xc>
 800437a:	f855 3b04 	ldr.w	r3, [r5], #4
 800437e:	4798      	blx	r3
 8004380:	3601      	adds	r6, #1
 8004382:	e7f2      	b.n	800436a <__libc_init_array+0x1e>
 8004384:	08005668 	.word	0x08005668
 8004388:	08005668 	.word	0x08005668
 800438c:	08005668 	.word	0x08005668
 8004390:	0800566c 	.word	0x0800566c

08004394 <memset>:
 8004394:	4603      	mov	r3, r0
 8004396:	4402      	add	r2, r0
 8004398:	4293      	cmp	r3, r2
 800439a:	d100      	bne.n	800439e <memset+0xa>
 800439c:	4770      	bx	lr
 800439e:	f803 1b01 	strb.w	r1, [r3], #1
 80043a2:	e7f9      	b.n	8004398 <memset+0x4>

080043a4 <_free_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4605      	mov	r5, r0
 80043a8:	2900      	cmp	r1, #0
 80043aa:	d043      	beq.n	8004434 <_free_r+0x90>
 80043ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043b0:	1f0c      	subs	r4, r1, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bfb8      	it	lt
 80043b6:	18e4      	addlt	r4, r4, r3
 80043b8:	f000 fc8e 	bl	8004cd8 <__malloc_lock>
 80043bc:	4a1e      	ldr	r2, [pc, #120]	; (8004438 <_free_r+0x94>)
 80043be:	6813      	ldr	r3, [r2, #0]
 80043c0:	4610      	mov	r0, r2
 80043c2:	b933      	cbnz	r3, 80043d2 <_free_r+0x2e>
 80043c4:	6063      	str	r3, [r4, #4]
 80043c6:	6014      	str	r4, [r2, #0]
 80043c8:	4628      	mov	r0, r5
 80043ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043ce:	f000 bc89 	b.w	8004ce4 <__malloc_unlock>
 80043d2:	42a3      	cmp	r3, r4
 80043d4:	d90a      	bls.n	80043ec <_free_r+0x48>
 80043d6:	6821      	ldr	r1, [r4, #0]
 80043d8:	1862      	adds	r2, r4, r1
 80043da:	4293      	cmp	r3, r2
 80043dc:	bf01      	itttt	eq
 80043de:	681a      	ldreq	r2, [r3, #0]
 80043e0:	685b      	ldreq	r3, [r3, #4]
 80043e2:	1852      	addeq	r2, r2, r1
 80043e4:	6022      	streq	r2, [r4, #0]
 80043e6:	6063      	str	r3, [r4, #4]
 80043e8:	6004      	str	r4, [r0, #0]
 80043ea:	e7ed      	b.n	80043c8 <_free_r+0x24>
 80043ec:	461a      	mov	r2, r3
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	b10b      	cbz	r3, 80043f6 <_free_r+0x52>
 80043f2:	42a3      	cmp	r3, r4
 80043f4:	d9fa      	bls.n	80043ec <_free_r+0x48>
 80043f6:	6811      	ldr	r1, [r2, #0]
 80043f8:	1850      	adds	r0, r2, r1
 80043fa:	42a0      	cmp	r0, r4
 80043fc:	d10b      	bne.n	8004416 <_free_r+0x72>
 80043fe:	6820      	ldr	r0, [r4, #0]
 8004400:	4401      	add	r1, r0
 8004402:	1850      	adds	r0, r2, r1
 8004404:	4283      	cmp	r3, r0
 8004406:	6011      	str	r1, [r2, #0]
 8004408:	d1de      	bne.n	80043c8 <_free_r+0x24>
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	4401      	add	r1, r0
 8004410:	6011      	str	r1, [r2, #0]
 8004412:	6053      	str	r3, [r2, #4]
 8004414:	e7d8      	b.n	80043c8 <_free_r+0x24>
 8004416:	d902      	bls.n	800441e <_free_r+0x7a>
 8004418:	230c      	movs	r3, #12
 800441a:	602b      	str	r3, [r5, #0]
 800441c:	e7d4      	b.n	80043c8 <_free_r+0x24>
 800441e:	6820      	ldr	r0, [r4, #0]
 8004420:	1821      	adds	r1, r4, r0
 8004422:	428b      	cmp	r3, r1
 8004424:	bf01      	itttt	eq
 8004426:	6819      	ldreq	r1, [r3, #0]
 8004428:	685b      	ldreq	r3, [r3, #4]
 800442a:	1809      	addeq	r1, r1, r0
 800442c:	6021      	streq	r1, [r4, #0]
 800442e:	6063      	str	r3, [r4, #4]
 8004430:	6054      	str	r4, [r2, #4]
 8004432:	e7c9      	b.n	80043c8 <_free_r+0x24>
 8004434:	bd38      	pop	{r3, r4, r5, pc}
 8004436:	bf00      	nop
 8004438:	200000ec 	.word	0x200000ec

0800443c <_malloc_r>:
 800443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443e:	1ccd      	adds	r5, r1, #3
 8004440:	f025 0503 	bic.w	r5, r5, #3
 8004444:	3508      	adds	r5, #8
 8004446:	2d0c      	cmp	r5, #12
 8004448:	bf38      	it	cc
 800444a:	250c      	movcc	r5, #12
 800444c:	2d00      	cmp	r5, #0
 800444e:	4606      	mov	r6, r0
 8004450:	db01      	blt.n	8004456 <_malloc_r+0x1a>
 8004452:	42a9      	cmp	r1, r5
 8004454:	d903      	bls.n	800445e <_malloc_r+0x22>
 8004456:	230c      	movs	r3, #12
 8004458:	6033      	str	r3, [r6, #0]
 800445a:	2000      	movs	r0, #0
 800445c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800445e:	f000 fc3b 	bl	8004cd8 <__malloc_lock>
 8004462:	4921      	ldr	r1, [pc, #132]	; (80044e8 <_malloc_r+0xac>)
 8004464:	680a      	ldr	r2, [r1, #0]
 8004466:	4614      	mov	r4, r2
 8004468:	b99c      	cbnz	r4, 8004492 <_malloc_r+0x56>
 800446a:	4f20      	ldr	r7, [pc, #128]	; (80044ec <_malloc_r+0xb0>)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	b923      	cbnz	r3, 800447a <_malloc_r+0x3e>
 8004470:	4621      	mov	r1, r4
 8004472:	4630      	mov	r0, r6
 8004474:	f000 f8ca 	bl	800460c <_sbrk_r>
 8004478:	6038      	str	r0, [r7, #0]
 800447a:	4629      	mov	r1, r5
 800447c:	4630      	mov	r0, r6
 800447e:	f000 f8c5 	bl	800460c <_sbrk_r>
 8004482:	1c43      	adds	r3, r0, #1
 8004484:	d123      	bne.n	80044ce <_malloc_r+0x92>
 8004486:	230c      	movs	r3, #12
 8004488:	4630      	mov	r0, r6
 800448a:	6033      	str	r3, [r6, #0]
 800448c:	f000 fc2a 	bl	8004ce4 <__malloc_unlock>
 8004490:	e7e3      	b.n	800445a <_malloc_r+0x1e>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	1b5b      	subs	r3, r3, r5
 8004496:	d417      	bmi.n	80044c8 <_malloc_r+0x8c>
 8004498:	2b0b      	cmp	r3, #11
 800449a:	d903      	bls.n	80044a4 <_malloc_r+0x68>
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	441c      	add	r4, r3
 80044a0:	6025      	str	r5, [r4, #0]
 80044a2:	e004      	b.n	80044ae <_malloc_r+0x72>
 80044a4:	6863      	ldr	r3, [r4, #4]
 80044a6:	42a2      	cmp	r2, r4
 80044a8:	bf0c      	ite	eq
 80044aa:	600b      	streq	r3, [r1, #0]
 80044ac:	6053      	strne	r3, [r2, #4]
 80044ae:	4630      	mov	r0, r6
 80044b0:	f000 fc18 	bl	8004ce4 <__malloc_unlock>
 80044b4:	f104 000b 	add.w	r0, r4, #11
 80044b8:	1d23      	adds	r3, r4, #4
 80044ba:	f020 0007 	bic.w	r0, r0, #7
 80044be:	1ac2      	subs	r2, r0, r3
 80044c0:	d0cc      	beq.n	800445c <_malloc_r+0x20>
 80044c2:	1a1b      	subs	r3, r3, r0
 80044c4:	50a3      	str	r3, [r4, r2]
 80044c6:	e7c9      	b.n	800445c <_malloc_r+0x20>
 80044c8:	4622      	mov	r2, r4
 80044ca:	6864      	ldr	r4, [r4, #4]
 80044cc:	e7cc      	b.n	8004468 <_malloc_r+0x2c>
 80044ce:	1cc4      	adds	r4, r0, #3
 80044d0:	f024 0403 	bic.w	r4, r4, #3
 80044d4:	42a0      	cmp	r0, r4
 80044d6:	d0e3      	beq.n	80044a0 <_malloc_r+0x64>
 80044d8:	1a21      	subs	r1, r4, r0
 80044da:	4630      	mov	r0, r6
 80044dc:	f000 f896 	bl	800460c <_sbrk_r>
 80044e0:	3001      	adds	r0, #1
 80044e2:	d1dd      	bne.n	80044a0 <_malloc_r+0x64>
 80044e4:	e7cf      	b.n	8004486 <_malloc_r+0x4a>
 80044e6:	bf00      	nop
 80044e8:	200000ec 	.word	0x200000ec
 80044ec:	200000f0 	.word	0x200000f0

080044f0 <iprintf>:
 80044f0:	b40f      	push	{r0, r1, r2, r3}
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <iprintf+0x2c>)
 80044f4:	b513      	push	{r0, r1, r4, lr}
 80044f6:	681c      	ldr	r4, [r3, #0]
 80044f8:	b124      	cbz	r4, 8004504 <iprintf+0x14>
 80044fa:	69a3      	ldr	r3, [r4, #24]
 80044fc:	b913      	cbnz	r3, 8004504 <iprintf+0x14>
 80044fe:	4620      	mov	r0, r4
 8004500:	f000 fad4 	bl	8004aac <__sinit>
 8004504:	ab05      	add	r3, sp, #20
 8004506:	4620      	mov	r0, r4
 8004508:	9a04      	ldr	r2, [sp, #16]
 800450a:	68a1      	ldr	r1, [r4, #8]
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	f000 fc17 	bl	8004d40 <_vfiprintf_r>
 8004512:	b002      	add	sp, #8
 8004514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004518:	b004      	add	sp, #16
 800451a:	4770      	bx	lr
 800451c:	20000050 	.word	0x20000050

08004520 <_puts_r>:
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	460e      	mov	r6, r1
 8004524:	4605      	mov	r5, r0
 8004526:	b118      	cbz	r0, 8004530 <_puts_r+0x10>
 8004528:	6983      	ldr	r3, [r0, #24]
 800452a:	b90b      	cbnz	r3, 8004530 <_puts_r+0x10>
 800452c:	f000 fabe 	bl	8004aac <__sinit>
 8004530:	69ab      	ldr	r3, [r5, #24]
 8004532:	68ac      	ldr	r4, [r5, #8]
 8004534:	b913      	cbnz	r3, 800453c <_puts_r+0x1c>
 8004536:	4628      	mov	r0, r5
 8004538:	f000 fab8 	bl	8004aac <__sinit>
 800453c:	4b2c      	ldr	r3, [pc, #176]	; (80045f0 <_puts_r+0xd0>)
 800453e:	429c      	cmp	r4, r3
 8004540:	d120      	bne.n	8004584 <_puts_r+0x64>
 8004542:	686c      	ldr	r4, [r5, #4]
 8004544:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004546:	07db      	lsls	r3, r3, #31
 8004548:	d405      	bmi.n	8004556 <_puts_r+0x36>
 800454a:	89a3      	ldrh	r3, [r4, #12]
 800454c:	0598      	lsls	r0, r3, #22
 800454e:	d402      	bmi.n	8004556 <_puts_r+0x36>
 8004550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004552:	f000 fb49 	bl	8004be8 <__retarget_lock_acquire_recursive>
 8004556:	89a3      	ldrh	r3, [r4, #12]
 8004558:	0719      	lsls	r1, r3, #28
 800455a:	d51d      	bpl.n	8004598 <_puts_r+0x78>
 800455c:	6923      	ldr	r3, [r4, #16]
 800455e:	b1db      	cbz	r3, 8004598 <_puts_r+0x78>
 8004560:	3e01      	subs	r6, #1
 8004562:	68a3      	ldr	r3, [r4, #8]
 8004564:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004568:	3b01      	subs	r3, #1
 800456a:	60a3      	str	r3, [r4, #8]
 800456c:	bb39      	cbnz	r1, 80045be <_puts_r+0x9e>
 800456e:	2b00      	cmp	r3, #0
 8004570:	da38      	bge.n	80045e4 <_puts_r+0xc4>
 8004572:	4622      	mov	r2, r4
 8004574:	210a      	movs	r1, #10
 8004576:	4628      	mov	r0, r5
 8004578:	f000 f89c 	bl	80046b4 <__swbuf_r>
 800457c:	3001      	adds	r0, #1
 800457e:	d011      	beq.n	80045a4 <_puts_r+0x84>
 8004580:	250a      	movs	r5, #10
 8004582:	e011      	b.n	80045a8 <_puts_r+0x88>
 8004584:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <_puts_r+0xd4>)
 8004586:	429c      	cmp	r4, r3
 8004588:	d101      	bne.n	800458e <_puts_r+0x6e>
 800458a:	68ac      	ldr	r4, [r5, #8]
 800458c:	e7da      	b.n	8004544 <_puts_r+0x24>
 800458e:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <_puts_r+0xd8>)
 8004590:	429c      	cmp	r4, r3
 8004592:	bf08      	it	eq
 8004594:	68ec      	ldreq	r4, [r5, #12]
 8004596:	e7d5      	b.n	8004544 <_puts_r+0x24>
 8004598:	4621      	mov	r1, r4
 800459a:	4628      	mov	r0, r5
 800459c:	f000 f8ee 	bl	800477c <__swsetup_r>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	d0dd      	beq.n	8004560 <_puts_r+0x40>
 80045a4:	f04f 35ff 	mov.w	r5, #4294967295
 80045a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045aa:	07da      	lsls	r2, r3, #31
 80045ac:	d405      	bmi.n	80045ba <_puts_r+0x9a>
 80045ae:	89a3      	ldrh	r3, [r4, #12]
 80045b0:	059b      	lsls	r3, r3, #22
 80045b2:	d402      	bmi.n	80045ba <_puts_r+0x9a>
 80045b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045b6:	f000 fb18 	bl	8004bea <__retarget_lock_release_recursive>
 80045ba:	4628      	mov	r0, r5
 80045bc:	bd70      	pop	{r4, r5, r6, pc}
 80045be:	2b00      	cmp	r3, #0
 80045c0:	da04      	bge.n	80045cc <_puts_r+0xac>
 80045c2:	69a2      	ldr	r2, [r4, #24]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	dc06      	bgt.n	80045d6 <_puts_r+0xb6>
 80045c8:	290a      	cmp	r1, #10
 80045ca:	d004      	beq.n	80045d6 <_puts_r+0xb6>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	6022      	str	r2, [r4, #0]
 80045d2:	7019      	strb	r1, [r3, #0]
 80045d4:	e7c5      	b.n	8004562 <_puts_r+0x42>
 80045d6:	4622      	mov	r2, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	f000 f86b 	bl	80046b4 <__swbuf_r>
 80045de:	3001      	adds	r0, #1
 80045e0:	d1bf      	bne.n	8004562 <_puts_r+0x42>
 80045e2:	e7df      	b.n	80045a4 <_puts_r+0x84>
 80045e4:	250a      	movs	r5, #10
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	6022      	str	r2, [r4, #0]
 80045ec:	701d      	strb	r5, [r3, #0]
 80045ee:	e7db      	b.n	80045a8 <_puts_r+0x88>
 80045f0:	080055f4 	.word	0x080055f4
 80045f4:	08005614 	.word	0x08005614
 80045f8:	080055d4 	.word	0x080055d4

080045fc <puts>:
 80045fc:	4b02      	ldr	r3, [pc, #8]	; (8004608 <puts+0xc>)
 80045fe:	4601      	mov	r1, r0
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	f7ff bf8d 	b.w	8004520 <_puts_r>
 8004606:	bf00      	nop
 8004608:	20000050 	.word	0x20000050

0800460c <_sbrk_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	2300      	movs	r3, #0
 8004610:	4d05      	ldr	r5, [pc, #20]	; (8004628 <_sbrk_r+0x1c>)
 8004612:	4604      	mov	r4, r0
 8004614:	4608      	mov	r0, r1
 8004616:	602b      	str	r3, [r5, #0]
 8004618:	f7fc f95a 	bl	80008d0 <_sbrk>
 800461c:	1c43      	adds	r3, r0, #1
 800461e:	d102      	bne.n	8004626 <_sbrk_r+0x1a>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	b103      	cbz	r3, 8004626 <_sbrk_r+0x1a>
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	bd38      	pop	{r3, r4, r5, pc}
 8004628:	200021a0 	.word	0x200021a0

0800462c <__sread>:
 800462c:	b510      	push	{r4, lr}
 800462e:	460c      	mov	r4, r1
 8004630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004634:	f000 fe4a 	bl	80052cc <_read_r>
 8004638:	2800      	cmp	r0, #0
 800463a:	bfab      	itete	ge
 800463c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800463e:	89a3      	ldrhlt	r3, [r4, #12]
 8004640:	181b      	addge	r3, r3, r0
 8004642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004646:	bfac      	ite	ge
 8004648:	6563      	strge	r3, [r4, #84]	; 0x54
 800464a:	81a3      	strhlt	r3, [r4, #12]
 800464c:	bd10      	pop	{r4, pc}

0800464e <__swrite>:
 800464e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004652:	461f      	mov	r7, r3
 8004654:	898b      	ldrh	r3, [r1, #12]
 8004656:	4605      	mov	r5, r0
 8004658:	05db      	lsls	r3, r3, #23
 800465a:	460c      	mov	r4, r1
 800465c:	4616      	mov	r6, r2
 800465e:	d505      	bpl.n	800466c <__swrite+0x1e>
 8004660:	2302      	movs	r3, #2
 8004662:	2200      	movs	r2, #0
 8004664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004668:	f000 fac0 	bl	8004bec <_lseek_r>
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	4632      	mov	r2, r6
 8004670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004674:	81a3      	strh	r3, [r4, #12]
 8004676:	4628      	mov	r0, r5
 8004678:	463b      	mov	r3, r7
 800467a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800467e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004682:	f000 b869 	b.w	8004758 <_write_r>

08004686 <__sseek>:
 8004686:	b510      	push	{r4, lr}
 8004688:	460c      	mov	r4, r1
 800468a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800468e:	f000 faad 	bl	8004bec <_lseek_r>
 8004692:	1c43      	adds	r3, r0, #1
 8004694:	89a3      	ldrh	r3, [r4, #12]
 8004696:	bf15      	itete	ne
 8004698:	6560      	strne	r0, [r4, #84]	; 0x54
 800469a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800469e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046a2:	81a3      	strheq	r3, [r4, #12]
 80046a4:	bf18      	it	ne
 80046a6:	81a3      	strhne	r3, [r4, #12]
 80046a8:	bd10      	pop	{r4, pc}

080046aa <__sclose>:
 80046aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ae:	f000 b8d3 	b.w	8004858 <_close_r>
	...

080046b4 <__swbuf_r>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	460e      	mov	r6, r1
 80046b8:	4614      	mov	r4, r2
 80046ba:	4605      	mov	r5, r0
 80046bc:	b118      	cbz	r0, 80046c6 <__swbuf_r+0x12>
 80046be:	6983      	ldr	r3, [r0, #24]
 80046c0:	b90b      	cbnz	r3, 80046c6 <__swbuf_r+0x12>
 80046c2:	f000 f9f3 	bl	8004aac <__sinit>
 80046c6:	4b21      	ldr	r3, [pc, #132]	; (800474c <__swbuf_r+0x98>)
 80046c8:	429c      	cmp	r4, r3
 80046ca:	d12b      	bne.n	8004724 <__swbuf_r+0x70>
 80046cc:	686c      	ldr	r4, [r5, #4]
 80046ce:	69a3      	ldr	r3, [r4, #24]
 80046d0:	60a3      	str	r3, [r4, #8]
 80046d2:	89a3      	ldrh	r3, [r4, #12]
 80046d4:	071a      	lsls	r2, r3, #28
 80046d6:	d52f      	bpl.n	8004738 <__swbuf_r+0x84>
 80046d8:	6923      	ldr	r3, [r4, #16]
 80046da:	b36b      	cbz	r3, 8004738 <__swbuf_r+0x84>
 80046dc:	6923      	ldr	r3, [r4, #16]
 80046de:	6820      	ldr	r0, [r4, #0]
 80046e0:	b2f6      	uxtb	r6, r6
 80046e2:	1ac0      	subs	r0, r0, r3
 80046e4:	6963      	ldr	r3, [r4, #20]
 80046e6:	4637      	mov	r7, r6
 80046e8:	4283      	cmp	r3, r0
 80046ea:	dc04      	bgt.n	80046f6 <__swbuf_r+0x42>
 80046ec:	4621      	mov	r1, r4
 80046ee:	4628      	mov	r0, r5
 80046f0:	f000 f948 	bl	8004984 <_fflush_r>
 80046f4:	bb30      	cbnz	r0, 8004744 <__swbuf_r+0x90>
 80046f6:	68a3      	ldr	r3, [r4, #8]
 80046f8:	3001      	adds	r0, #1
 80046fa:	3b01      	subs	r3, #1
 80046fc:	60a3      	str	r3, [r4, #8]
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	6022      	str	r2, [r4, #0]
 8004704:	701e      	strb	r6, [r3, #0]
 8004706:	6963      	ldr	r3, [r4, #20]
 8004708:	4283      	cmp	r3, r0
 800470a:	d004      	beq.n	8004716 <__swbuf_r+0x62>
 800470c:	89a3      	ldrh	r3, [r4, #12]
 800470e:	07db      	lsls	r3, r3, #31
 8004710:	d506      	bpl.n	8004720 <__swbuf_r+0x6c>
 8004712:	2e0a      	cmp	r6, #10
 8004714:	d104      	bne.n	8004720 <__swbuf_r+0x6c>
 8004716:	4621      	mov	r1, r4
 8004718:	4628      	mov	r0, r5
 800471a:	f000 f933 	bl	8004984 <_fflush_r>
 800471e:	b988      	cbnz	r0, 8004744 <__swbuf_r+0x90>
 8004720:	4638      	mov	r0, r7
 8004722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004724:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <__swbuf_r+0x9c>)
 8004726:	429c      	cmp	r4, r3
 8004728:	d101      	bne.n	800472e <__swbuf_r+0x7a>
 800472a:	68ac      	ldr	r4, [r5, #8]
 800472c:	e7cf      	b.n	80046ce <__swbuf_r+0x1a>
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <__swbuf_r+0xa0>)
 8004730:	429c      	cmp	r4, r3
 8004732:	bf08      	it	eq
 8004734:	68ec      	ldreq	r4, [r5, #12]
 8004736:	e7ca      	b.n	80046ce <__swbuf_r+0x1a>
 8004738:	4621      	mov	r1, r4
 800473a:	4628      	mov	r0, r5
 800473c:	f000 f81e 	bl	800477c <__swsetup_r>
 8004740:	2800      	cmp	r0, #0
 8004742:	d0cb      	beq.n	80046dc <__swbuf_r+0x28>
 8004744:	f04f 37ff 	mov.w	r7, #4294967295
 8004748:	e7ea      	b.n	8004720 <__swbuf_r+0x6c>
 800474a:	bf00      	nop
 800474c:	080055f4 	.word	0x080055f4
 8004750:	08005614 	.word	0x08005614
 8004754:	080055d4 	.word	0x080055d4

08004758 <_write_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4604      	mov	r4, r0
 800475c:	4608      	mov	r0, r1
 800475e:	4611      	mov	r1, r2
 8004760:	2200      	movs	r2, #0
 8004762:	4d05      	ldr	r5, [pc, #20]	; (8004778 <_write_r+0x20>)
 8004764:	602a      	str	r2, [r5, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	f7fb ff40 	bl	80005ec <_write>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d102      	bne.n	8004776 <_write_r+0x1e>
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	b103      	cbz	r3, 8004776 <_write_r+0x1e>
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	200021a0 	.word	0x200021a0

0800477c <__swsetup_r>:
 800477c:	4b32      	ldr	r3, [pc, #200]	; (8004848 <__swsetup_r+0xcc>)
 800477e:	b570      	push	{r4, r5, r6, lr}
 8004780:	681d      	ldr	r5, [r3, #0]
 8004782:	4606      	mov	r6, r0
 8004784:	460c      	mov	r4, r1
 8004786:	b125      	cbz	r5, 8004792 <__swsetup_r+0x16>
 8004788:	69ab      	ldr	r3, [r5, #24]
 800478a:	b913      	cbnz	r3, 8004792 <__swsetup_r+0x16>
 800478c:	4628      	mov	r0, r5
 800478e:	f000 f98d 	bl	8004aac <__sinit>
 8004792:	4b2e      	ldr	r3, [pc, #184]	; (800484c <__swsetup_r+0xd0>)
 8004794:	429c      	cmp	r4, r3
 8004796:	d10f      	bne.n	80047b8 <__swsetup_r+0x3c>
 8004798:	686c      	ldr	r4, [r5, #4]
 800479a:	89a3      	ldrh	r3, [r4, #12]
 800479c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047a0:	0719      	lsls	r1, r3, #28
 80047a2:	d42c      	bmi.n	80047fe <__swsetup_r+0x82>
 80047a4:	06dd      	lsls	r5, r3, #27
 80047a6:	d411      	bmi.n	80047cc <__swsetup_r+0x50>
 80047a8:	2309      	movs	r3, #9
 80047aa:	6033      	str	r3, [r6, #0]
 80047ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047b0:	f04f 30ff 	mov.w	r0, #4294967295
 80047b4:	81a3      	strh	r3, [r4, #12]
 80047b6:	e03e      	b.n	8004836 <__swsetup_r+0xba>
 80047b8:	4b25      	ldr	r3, [pc, #148]	; (8004850 <__swsetup_r+0xd4>)
 80047ba:	429c      	cmp	r4, r3
 80047bc:	d101      	bne.n	80047c2 <__swsetup_r+0x46>
 80047be:	68ac      	ldr	r4, [r5, #8]
 80047c0:	e7eb      	b.n	800479a <__swsetup_r+0x1e>
 80047c2:	4b24      	ldr	r3, [pc, #144]	; (8004854 <__swsetup_r+0xd8>)
 80047c4:	429c      	cmp	r4, r3
 80047c6:	bf08      	it	eq
 80047c8:	68ec      	ldreq	r4, [r5, #12]
 80047ca:	e7e6      	b.n	800479a <__swsetup_r+0x1e>
 80047cc:	0758      	lsls	r0, r3, #29
 80047ce:	d512      	bpl.n	80047f6 <__swsetup_r+0x7a>
 80047d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047d2:	b141      	cbz	r1, 80047e6 <__swsetup_r+0x6a>
 80047d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047d8:	4299      	cmp	r1, r3
 80047da:	d002      	beq.n	80047e2 <__swsetup_r+0x66>
 80047dc:	4630      	mov	r0, r6
 80047de:	f7ff fde1 	bl	80043a4 <_free_r>
 80047e2:	2300      	movs	r3, #0
 80047e4:	6363      	str	r3, [r4, #52]	; 0x34
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047ec:	81a3      	strh	r3, [r4, #12]
 80047ee:	2300      	movs	r3, #0
 80047f0:	6063      	str	r3, [r4, #4]
 80047f2:	6923      	ldr	r3, [r4, #16]
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	89a3      	ldrh	r3, [r4, #12]
 80047f8:	f043 0308 	orr.w	r3, r3, #8
 80047fc:	81a3      	strh	r3, [r4, #12]
 80047fe:	6923      	ldr	r3, [r4, #16]
 8004800:	b94b      	cbnz	r3, 8004816 <__swsetup_r+0x9a>
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800480c:	d003      	beq.n	8004816 <__swsetup_r+0x9a>
 800480e:	4621      	mov	r1, r4
 8004810:	4630      	mov	r0, r6
 8004812:	f000 fa21 	bl	8004c58 <__smakebuf_r>
 8004816:	89a0      	ldrh	r0, [r4, #12]
 8004818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800481c:	f010 0301 	ands.w	r3, r0, #1
 8004820:	d00a      	beq.n	8004838 <__swsetup_r+0xbc>
 8004822:	2300      	movs	r3, #0
 8004824:	60a3      	str	r3, [r4, #8]
 8004826:	6963      	ldr	r3, [r4, #20]
 8004828:	425b      	negs	r3, r3
 800482a:	61a3      	str	r3, [r4, #24]
 800482c:	6923      	ldr	r3, [r4, #16]
 800482e:	b943      	cbnz	r3, 8004842 <__swsetup_r+0xc6>
 8004830:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004834:	d1ba      	bne.n	80047ac <__swsetup_r+0x30>
 8004836:	bd70      	pop	{r4, r5, r6, pc}
 8004838:	0781      	lsls	r1, r0, #30
 800483a:	bf58      	it	pl
 800483c:	6963      	ldrpl	r3, [r4, #20]
 800483e:	60a3      	str	r3, [r4, #8]
 8004840:	e7f4      	b.n	800482c <__swsetup_r+0xb0>
 8004842:	2000      	movs	r0, #0
 8004844:	e7f7      	b.n	8004836 <__swsetup_r+0xba>
 8004846:	bf00      	nop
 8004848:	20000050 	.word	0x20000050
 800484c:	080055f4 	.word	0x080055f4
 8004850:	08005614 	.word	0x08005614
 8004854:	080055d4 	.word	0x080055d4

08004858 <_close_r>:
 8004858:	b538      	push	{r3, r4, r5, lr}
 800485a:	2300      	movs	r3, #0
 800485c:	4d05      	ldr	r5, [pc, #20]	; (8004874 <_close_r+0x1c>)
 800485e:	4604      	mov	r4, r0
 8004860:	4608      	mov	r0, r1
 8004862:	602b      	str	r3, [r5, #0]
 8004864:	f7fc f803 	bl	800086e <_close>
 8004868:	1c43      	adds	r3, r0, #1
 800486a:	d102      	bne.n	8004872 <_close_r+0x1a>
 800486c:	682b      	ldr	r3, [r5, #0]
 800486e:	b103      	cbz	r3, 8004872 <_close_r+0x1a>
 8004870:	6023      	str	r3, [r4, #0]
 8004872:	bd38      	pop	{r3, r4, r5, pc}
 8004874:	200021a0 	.word	0x200021a0

08004878 <__sflush_r>:
 8004878:	898a      	ldrh	r2, [r1, #12]
 800487a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800487e:	4605      	mov	r5, r0
 8004880:	0710      	lsls	r0, r2, #28
 8004882:	460c      	mov	r4, r1
 8004884:	d458      	bmi.n	8004938 <__sflush_r+0xc0>
 8004886:	684b      	ldr	r3, [r1, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	dc05      	bgt.n	8004898 <__sflush_r+0x20>
 800488c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	dc02      	bgt.n	8004898 <__sflush_r+0x20>
 8004892:	2000      	movs	r0, #0
 8004894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800489a:	2e00      	cmp	r6, #0
 800489c:	d0f9      	beq.n	8004892 <__sflush_r+0x1a>
 800489e:	2300      	movs	r3, #0
 80048a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048a4:	682f      	ldr	r7, [r5, #0]
 80048a6:	602b      	str	r3, [r5, #0]
 80048a8:	d032      	beq.n	8004910 <__sflush_r+0x98>
 80048aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	075a      	lsls	r2, r3, #29
 80048b0:	d505      	bpl.n	80048be <__sflush_r+0x46>
 80048b2:	6863      	ldr	r3, [r4, #4]
 80048b4:	1ac0      	subs	r0, r0, r3
 80048b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048b8:	b10b      	cbz	r3, 80048be <__sflush_r+0x46>
 80048ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048bc:	1ac0      	subs	r0, r0, r3
 80048be:	2300      	movs	r3, #0
 80048c0:	4602      	mov	r2, r0
 80048c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048c4:	4628      	mov	r0, r5
 80048c6:	6a21      	ldr	r1, [r4, #32]
 80048c8:	47b0      	blx	r6
 80048ca:	1c43      	adds	r3, r0, #1
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	d106      	bne.n	80048de <__sflush_r+0x66>
 80048d0:	6829      	ldr	r1, [r5, #0]
 80048d2:	291d      	cmp	r1, #29
 80048d4:	d82c      	bhi.n	8004930 <__sflush_r+0xb8>
 80048d6:	4a2a      	ldr	r2, [pc, #168]	; (8004980 <__sflush_r+0x108>)
 80048d8:	40ca      	lsrs	r2, r1
 80048da:	07d6      	lsls	r6, r2, #31
 80048dc:	d528      	bpl.n	8004930 <__sflush_r+0xb8>
 80048de:	2200      	movs	r2, #0
 80048e0:	6062      	str	r2, [r4, #4]
 80048e2:	6922      	ldr	r2, [r4, #16]
 80048e4:	04d9      	lsls	r1, r3, #19
 80048e6:	6022      	str	r2, [r4, #0]
 80048e8:	d504      	bpl.n	80048f4 <__sflush_r+0x7c>
 80048ea:	1c42      	adds	r2, r0, #1
 80048ec:	d101      	bne.n	80048f2 <__sflush_r+0x7a>
 80048ee:	682b      	ldr	r3, [r5, #0]
 80048f0:	b903      	cbnz	r3, 80048f4 <__sflush_r+0x7c>
 80048f2:	6560      	str	r0, [r4, #84]	; 0x54
 80048f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048f6:	602f      	str	r7, [r5, #0]
 80048f8:	2900      	cmp	r1, #0
 80048fa:	d0ca      	beq.n	8004892 <__sflush_r+0x1a>
 80048fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004900:	4299      	cmp	r1, r3
 8004902:	d002      	beq.n	800490a <__sflush_r+0x92>
 8004904:	4628      	mov	r0, r5
 8004906:	f7ff fd4d 	bl	80043a4 <_free_r>
 800490a:	2000      	movs	r0, #0
 800490c:	6360      	str	r0, [r4, #52]	; 0x34
 800490e:	e7c1      	b.n	8004894 <__sflush_r+0x1c>
 8004910:	6a21      	ldr	r1, [r4, #32]
 8004912:	2301      	movs	r3, #1
 8004914:	4628      	mov	r0, r5
 8004916:	47b0      	blx	r6
 8004918:	1c41      	adds	r1, r0, #1
 800491a:	d1c7      	bne.n	80048ac <__sflush_r+0x34>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0c4      	beq.n	80048ac <__sflush_r+0x34>
 8004922:	2b1d      	cmp	r3, #29
 8004924:	d001      	beq.n	800492a <__sflush_r+0xb2>
 8004926:	2b16      	cmp	r3, #22
 8004928:	d101      	bne.n	800492e <__sflush_r+0xb6>
 800492a:	602f      	str	r7, [r5, #0]
 800492c:	e7b1      	b.n	8004892 <__sflush_r+0x1a>
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004934:	81a3      	strh	r3, [r4, #12]
 8004936:	e7ad      	b.n	8004894 <__sflush_r+0x1c>
 8004938:	690f      	ldr	r7, [r1, #16]
 800493a:	2f00      	cmp	r7, #0
 800493c:	d0a9      	beq.n	8004892 <__sflush_r+0x1a>
 800493e:	0793      	lsls	r3, r2, #30
 8004940:	bf18      	it	ne
 8004942:	2300      	movne	r3, #0
 8004944:	680e      	ldr	r6, [r1, #0]
 8004946:	bf08      	it	eq
 8004948:	694b      	ldreq	r3, [r1, #20]
 800494a:	eba6 0807 	sub.w	r8, r6, r7
 800494e:	600f      	str	r7, [r1, #0]
 8004950:	608b      	str	r3, [r1, #8]
 8004952:	f1b8 0f00 	cmp.w	r8, #0
 8004956:	dd9c      	ble.n	8004892 <__sflush_r+0x1a>
 8004958:	4643      	mov	r3, r8
 800495a:	463a      	mov	r2, r7
 800495c:	4628      	mov	r0, r5
 800495e:	6a21      	ldr	r1, [r4, #32]
 8004960:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004962:	47b0      	blx	r6
 8004964:	2800      	cmp	r0, #0
 8004966:	dc06      	bgt.n	8004976 <__sflush_r+0xfe>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	f04f 30ff 	mov.w	r0, #4294967295
 800496e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	e78e      	b.n	8004894 <__sflush_r+0x1c>
 8004976:	4407      	add	r7, r0
 8004978:	eba8 0800 	sub.w	r8, r8, r0
 800497c:	e7e9      	b.n	8004952 <__sflush_r+0xda>
 800497e:	bf00      	nop
 8004980:	20400001 	.word	0x20400001

08004984 <_fflush_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	690b      	ldr	r3, [r1, #16]
 8004988:	4605      	mov	r5, r0
 800498a:	460c      	mov	r4, r1
 800498c:	b913      	cbnz	r3, 8004994 <_fflush_r+0x10>
 800498e:	2500      	movs	r5, #0
 8004990:	4628      	mov	r0, r5
 8004992:	bd38      	pop	{r3, r4, r5, pc}
 8004994:	b118      	cbz	r0, 800499e <_fflush_r+0x1a>
 8004996:	6983      	ldr	r3, [r0, #24]
 8004998:	b90b      	cbnz	r3, 800499e <_fflush_r+0x1a>
 800499a:	f000 f887 	bl	8004aac <__sinit>
 800499e:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <_fflush_r+0x6c>)
 80049a0:	429c      	cmp	r4, r3
 80049a2:	d11b      	bne.n	80049dc <_fflush_r+0x58>
 80049a4:	686c      	ldr	r4, [r5, #4]
 80049a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0ef      	beq.n	800498e <_fflush_r+0xa>
 80049ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049b0:	07d0      	lsls	r0, r2, #31
 80049b2:	d404      	bmi.n	80049be <_fflush_r+0x3a>
 80049b4:	0599      	lsls	r1, r3, #22
 80049b6:	d402      	bmi.n	80049be <_fflush_r+0x3a>
 80049b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ba:	f000 f915 	bl	8004be8 <__retarget_lock_acquire_recursive>
 80049be:	4628      	mov	r0, r5
 80049c0:	4621      	mov	r1, r4
 80049c2:	f7ff ff59 	bl	8004878 <__sflush_r>
 80049c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049c8:	4605      	mov	r5, r0
 80049ca:	07da      	lsls	r2, r3, #31
 80049cc:	d4e0      	bmi.n	8004990 <_fflush_r+0xc>
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	059b      	lsls	r3, r3, #22
 80049d2:	d4dd      	bmi.n	8004990 <_fflush_r+0xc>
 80049d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049d6:	f000 f908 	bl	8004bea <__retarget_lock_release_recursive>
 80049da:	e7d9      	b.n	8004990 <_fflush_r+0xc>
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <_fflush_r+0x70>)
 80049de:	429c      	cmp	r4, r3
 80049e0:	d101      	bne.n	80049e6 <_fflush_r+0x62>
 80049e2:	68ac      	ldr	r4, [r5, #8]
 80049e4:	e7df      	b.n	80049a6 <_fflush_r+0x22>
 80049e6:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <_fflush_r+0x74>)
 80049e8:	429c      	cmp	r4, r3
 80049ea:	bf08      	it	eq
 80049ec:	68ec      	ldreq	r4, [r5, #12]
 80049ee:	e7da      	b.n	80049a6 <_fflush_r+0x22>
 80049f0:	080055f4 	.word	0x080055f4
 80049f4:	08005614 	.word	0x08005614
 80049f8:	080055d4 	.word	0x080055d4

080049fc <std>:
 80049fc:	2300      	movs	r3, #0
 80049fe:	b510      	push	{r4, lr}
 8004a00:	4604      	mov	r4, r0
 8004a02:	e9c0 3300 	strd	r3, r3, [r0]
 8004a06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a0a:	6083      	str	r3, [r0, #8]
 8004a0c:	8181      	strh	r1, [r0, #12]
 8004a0e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a10:	81c2      	strh	r2, [r0, #14]
 8004a12:	6183      	str	r3, [r0, #24]
 8004a14:	4619      	mov	r1, r3
 8004a16:	2208      	movs	r2, #8
 8004a18:	305c      	adds	r0, #92	; 0x5c
 8004a1a:	f7ff fcbb 	bl	8004394 <memset>
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <std+0x38>)
 8004a20:	6224      	str	r4, [r4, #32]
 8004a22:	6263      	str	r3, [r4, #36]	; 0x24
 8004a24:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <std+0x3c>)
 8004a26:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a28:	4b04      	ldr	r3, [pc, #16]	; (8004a3c <std+0x40>)
 8004a2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <std+0x44>)
 8004a2e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a30:	bd10      	pop	{r4, pc}
 8004a32:	bf00      	nop
 8004a34:	0800462d 	.word	0x0800462d
 8004a38:	0800464f 	.word	0x0800464f
 8004a3c:	08004687 	.word	0x08004687
 8004a40:	080046ab 	.word	0x080046ab

08004a44 <_cleanup_r>:
 8004a44:	4901      	ldr	r1, [pc, #4]	; (8004a4c <_cleanup_r+0x8>)
 8004a46:	f000 b8af 	b.w	8004ba8 <_fwalk_reent>
 8004a4a:	bf00      	nop
 8004a4c:	08004985 	.word	0x08004985

08004a50 <__sfmoreglue>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	2568      	movs	r5, #104	; 0x68
 8004a54:	1e4a      	subs	r2, r1, #1
 8004a56:	4355      	muls	r5, r2
 8004a58:	460e      	mov	r6, r1
 8004a5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a5e:	f7ff fced 	bl	800443c <_malloc_r>
 8004a62:	4604      	mov	r4, r0
 8004a64:	b140      	cbz	r0, 8004a78 <__sfmoreglue+0x28>
 8004a66:	2100      	movs	r1, #0
 8004a68:	e9c0 1600 	strd	r1, r6, [r0]
 8004a6c:	300c      	adds	r0, #12
 8004a6e:	60a0      	str	r0, [r4, #8]
 8004a70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a74:	f7ff fc8e 	bl	8004394 <memset>
 8004a78:	4620      	mov	r0, r4
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}

08004a7c <__sfp_lock_acquire>:
 8004a7c:	4801      	ldr	r0, [pc, #4]	; (8004a84 <__sfp_lock_acquire+0x8>)
 8004a7e:	f000 b8b3 	b.w	8004be8 <__retarget_lock_acquire_recursive>
 8004a82:	bf00      	nop
 8004a84:	2000219c 	.word	0x2000219c

08004a88 <__sfp_lock_release>:
 8004a88:	4801      	ldr	r0, [pc, #4]	; (8004a90 <__sfp_lock_release+0x8>)
 8004a8a:	f000 b8ae 	b.w	8004bea <__retarget_lock_release_recursive>
 8004a8e:	bf00      	nop
 8004a90:	2000219c 	.word	0x2000219c

08004a94 <__sinit_lock_acquire>:
 8004a94:	4801      	ldr	r0, [pc, #4]	; (8004a9c <__sinit_lock_acquire+0x8>)
 8004a96:	f000 b8a7 	b.w	8004be8 <__retarget_lock_acquire_recursive>
 8004a9a:	bf00      	nop
 8004a9c:	20002197 	.word	0x20002197

08004aa0 <__sinit_lock_release>:
 8004aa0:	4801      	ldr	r0, [pc, #4]	; (8004aa8 <__sinit_lock_release+0x8>)
 8004aa2:	f000 b8a2 	b.w	8004bea <__retarget_lock_release_recursive>
 8004aa6:	bf00      	nop
 8004aa8:	20002197 	.word	0x20002197

08004aac <__sinit>:
 8004aac:	b510      	push	{r4, lr}
 8004aae:	4604      	mov	r4, r0
 8004ab0:	f7ff fff0 	bl	8004a94 <__sinit_lock_acquire>
 8004ab4:	69a3      	ldr	r3, [r4, #24]
 8004ab6:	b11b      	cbz	r3, 8004ac0 <__sinit+0x14>
 8004ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004abc:	f7ff bff0 	b.w	8004aa0 <__sinit_lock_release>
 8004ac0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ac4:	6523      	str	r3, [r4, #80]	; 0x50
 8004ac6:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <__sinit+0x68>)
 8004ac8:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <__sinit+0x6c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ace:	42a3      	cmp	r3, r4
 8004ad0:	bf08      	it	eq
 8004ad2:	2301      	moveq	r3, #1
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	bf08      	it	eq
 8004ad8:	61a3      	streq	r3, [r4, #24]
 8004ada:	f000 f81f 	bl	8004b1c <__sfp>
 8004ade:	6060      	str	r0, [r4, #4]
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f000 f81b 	bl	8004b1c <__sfp>
 8004ae6:	60a0      	str	r0, [r4, #8]
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f000 f817 	bl	8004b1c <__sfp>
 8004aee:	2200      	movs	r2, #0
 8004af0:	2104      	movs	r1, #4
 8004af2:	60e0      	str	r0, [r4, #12]
 8004af4:	6860      	ldr	r0, [r4, #4]
 8004af6:	f7ff ff81 	bl	80049fc <std>
 8004afa:	2201      	movs	r2, #1
 8004afc:	2109      	movs	r1, #9
 8004afe:	68a0      	ldr	r0, [r4, #8]
 8004b00:	f7ff ff7c 	bl	80049fc <std>
 8004b04:	2202      	movs	r2, #2
 8004b06:	2112      	movs	r1, #18
 8004b08:	68e0      	ldr	r0, [r4, #12]
 8004b0a:	f7ff ff77 	bl	80049fc <std>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	61a3      	str	r3, [r4, #24]
 8004b12:	e7d1      	b.n	8004ab8 <__sinit+0xc>
 8004b14:	080055d0 	.word	0x080055d0
 8004b18:	08004a45 	.word	0x08004a45

08004b1c <__sfp>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	4607      	mov	r7, r0
 8004b20:	f7ff ffac 	bl	8004a7c <__sfp_lock_acquire>
 8004b24:	4b1e      	ldr	r3, [pc, #120]	; (8004ba0 <__sfp+0x84>)
 8004b26:	681e      	ldr	r6, [r3, #0]
 8004b28:	69b3      	ldr	r3, [r6, #24]
 8004b2a:	b913      	cbnz	r3, 8004b32 <__sfp+0x16>
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f7ff ffbd 	bl	8004aac <__sinit>
 8004b32:	3648      	adds	r6, #72	; 0x48
 8004b34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	d503      	bpl.n	8004b44 <__sfp+0x28>
 8004b3c:	6833      	ldr	r3, [r6, #0]
 8004b3e:	b30b      	cbz	r3, 8004b84 <__sfp+0x68>
 8004b40:	6836      	ldr	r6, [r6, #0]
 8004b42:	e7f7      	b.n	8004b34 <__sfp+0x18>
 8004b44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b48:	b9d5      	cbnz	r5, 8004b80 <__sfp+0x64>
 8004b4a:	4b16      	ldr	r3, [pc, #88]	; (8004ba4 <__sfp+0x88>)
 8004b4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b50:	60e3      	str	r3, [r4, #12]
 8004b52:	6665      	str	r5, [r4, #100]	; 0x64
 8004b54:	f000 f847 	bl	8004be6 <__retarget_lock_init_recursive>
 8004b58:	f7ff ff96 	bl	8004a88 <__sfp_lock_release>
 8004b5c:	2208      	movs	r2, #8
 8004b5e:	4629      	mov	r1, r5
 8004b60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b68:	6025      	str	r5, [r4, #0]
 8004b6a:	61a5      	str	r5, [r4, #24]
 8004b6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b70:	f7ff fc10 	bl	8004394 <memset>
 8004b74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b80:	3468      	adds	r4, #104	; 0x68
 8004b82:	e7d9      	b.n	8004b38 <__sfp+0x1c>
 8004b84:	2104      	movs	r1, #4
 8004b86:	4638      	mov	r0, r7
 8004b88:	f7ff ff62 	bl	8004a50 <__sfmoreglue>
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	6030      	str	r0, [r6, #0]
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d1d5      	bne.n	8004b40 <__sfp+0x24>
 8004b94:	f7ff ff78 	bl	8004a88 <__sfp_lock_release>
 8004b98:	230c      	movs	r3, #12
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	e7ee      	b.n	8004b7c <__sfp+0x60>
 8004b9e:	bf00      	nop
 8004ba0:	080055d0 	.word	0x080055d0
 8004ba4:	ffff0001 	.word	0xffff0001

08004ba8 <_fwalk_reent>:
 8004ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bac:	4606      	mov	r6, r0
 8004bae:	4688      	mov	r8, r1
 8004bb0:	2700      	movs	r7, #0
 8004bb2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bba:	f1b9 0901 	subs.w	r9, r9, #1
 8004bbe:	d505      	bpl.n	8004bcc <_fwalk_reent+0x24>
 8004bc0:	6824      	ldr	r4, [r4, #0]
 8004bc2:	2c00      	cmp	r4, #0
 8004bc4:	d1f7      	bne.n	8004bb6 <_fwalk_reent+0xe>
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bcc:	89ab      	ldrh	r3, [r5, #12]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d907      	bls.n	8004be2 <_fwalk_reent+0x3a>
 8004bd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	d003      	beq.n	8004be2 <_fwalk_reent+0x3a>
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4630      	mov	r0, r6
 8004bde:	47c0      	blx	r8
 8004be0:	4307      	orrs	r7, r0
 8004be2:	3568      	adds	r5, #104	; 0x68
 8004be4:	e7e9      	b.n	8004bba <_fwalk_reent+0x12>

08004be6 <__retarget_lock_init_recursive>:
 8004be6:	4770      	bx	lr

08004be8 <__retarget_lock_acquire_recursive>:
 8004be8:	4770      	bx	lr

08004bea <__retarget_lock_release_recursive>:
 8004bea:	4770      	bx	lr

08004bec <_lseek_r>:
 8004bec:	b538      	push	{r3, r4, r5, lr}
 8004bee:	4604      	mov	r4, r0
 8004bf0:	4608      	mov	r0, r1
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	4d05      	ldr	r5, [pc, #20]	; (8004c0c <_lseek_r+0x20>)
 8004bf8:	602a      	str	r2, [r5, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f7fb fe5b 	bl	80008b6 <_lseek>
 8004c00:	1c43      	adds	r3, r0, #1
 8004c02:	d102      	bne.n	8004c0a <_lseek_r+0x1e>
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	b103      	cbz	r3, 8004c0a <_lseek_r+0x1e>
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	bd38      	pop	{r3, r4, r5, pc}
 8004c0c:	200021a0 	.word	0x200021a0

08004c10 <__swhatbuf_r>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	460e      	mov	r6, r1
 8004c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c18:	4614      	mov	r4, r2
 8004c1a:	2900      	cmp	r1, #0
 8004c1c:	461d      	mov	r5, r3
 8004c1e:	b096      	sub	sp, #88	; 0x58
 8004c20:	da07      	bge.n	8004c32 <__swhatbuf_r+0x22>
 8004c22:	2300      	movs	r3, #0
 8004c24:	602b      	str	r3, [r5, #0]
 8004c26:	89b3      	ldrh	r3, [r6, #12]
 8004c28:	061a      	lsls	r2, r3, #24
 8004c2a:	d410      	bmi.n	8004c4e <__swhatbuf_r+0x3e>
 8004c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c30:	e00e      	b.n	8004c50 <__swhatbuf_r+0x40>
 8004c32:	466a      	mov	r2, sp
 8004c34:	f000 fb5c 	bl	80052f0 <_fstat_r>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	dbf2      	blt.n	8004c22 <__swhatbuf_r+0x12>
 8004c3c:	9a01      	ldr	r2, [sp, #4]
 8004c3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c46:	425a      	negs	r2, r3
 8004c48:	415a      	adcs	r2, r3
 8004c4a:	602a      	str	r2, [r5, #0]
 8004c4c:	e7ee      	b.n	8004c2c <__swhatbuf_r+0x1c>
 8004c4e:	2340      	movs	r3, #64	; 0x40
 8004c50:	2000      	movs	r0, #0
 8004c52:	6023      	str	r3, [r4, #0]
 8004c54:	b016      	add	sp, #88	; 0x58
 8004c56:	bd70      	pop	{r4, r5, r6, pc}

08004c58 <__smakebuf_r>:
 8004c58:	898b      	ldrh	r3, [r1, #12]
 8004c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c5c:	079d      	lsls	r5, r3, #30
 8004c5e:	4606      	mov	r6, r0
 8004c60:	460c      	mov	r4, r1
 8004c62:	d507      	bpl.n	8004c74 <__smakebuf_r+0x1c>
 8004c64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	6123      	str	r3, [r4, #16]
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	6163      	str	r3, [r4, #20]
 8004c70:	b002      	add	sp, #8
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
 8004c74:	466a      	mov	r2, sp
 8004c76:	ab01      	add	r3, sp, #4
 8004c78:	f7ff ffca 	bl	8004c10 <__swhatbuf_r>
 8004c7c:	9900      	ldr	r1, [sp, #0]
 8004c7e:	4605      	mov	r5, r0
 8004c80:	4630      	mov	r0, r6
 8004c82:	f7ff fbdb 	bl	800443c <_malloc_r>
 8004c86:	b948      	cbnz	r0, 8004c9c <__smakebuf_r+0x44>
 8004c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c8c:	059a      	lsls	r2, r3, #22
 8004c8e:	d4ef      	bmi.n	8004c70 <__smakebuf_r+0x18>
 8004c90:	f023 0303 	bic.w	r3, r3, #3
 8004c94:	f043 0302 	orr.w	r3, r3, #2
 8004c98:	81a3      	strh	r3, [r4, #12]
 8004c9a:	e7e3      	b.n	8004c64 <__smakebuf_r+0xc>
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <__smakebuf_r+0x7c>)
 8004c9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ca0:	89a3      	ldrh	r3, [r4, #12]
 8004ca2:	6020      	str	r0, [r4, #0]
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca8:	81a3      	strh	r3, [r4, #12]
 8004caa:	9b00      	ldr	r3, [sp, #0]
 8004cac:	6120      	str	r0, [r4, #16]
 8004cae:	6163      	str	r3, [r4, #20]
 8004cb0:	9b01      	ldr	r3, [sp, #4]
 8004cb2:	b15b      	cbz	r3, 8004ccc <__smakebuf_r+0x74>
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cba:	f000 fb2b 	bl	8005314 <_isatty_r>
 8004cbe:	b128      	cbz	r0, 8004ccc <__smakebuf_r+0x74>
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	f023 0303 	bic.w	r3, r3, #3
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	81a3      	strh	r3, [r4, #12]
 8004ccc:	89a0      	ldrh	r0, [r4, #12]
 8004cce:	4305      	orrs	r5, r0
 8004cd0:	81a5      	strh	r5, [r4, #12]
 8004cd2:	e7cd      	b.n	8004c70 <__smakebuf_r+0x18>
 8004cd4:	08004a45 	.word	0x08004a45

08004cd8 <__malloc_lock>:
 8004cd8:	4801      	ldr	r0, [pc, #4]	; (8004ce0 <__malloc_lock+0x8>)
 8004cda:	f7ff bf85 	b.w	8004be8 <__retarget_lock_acquire_recursive>
 8004cde:	bf00      	nop
 8004ce0:	20002198 	.word	0x20002198

08004ce4 <__malloc_unlock>:
 8004ce4:	4801      	ldr	r0, [pc, #4]	; (8004cec <__malloc_unlock+0x8>)
 8004ce6:	f7ff bf80 	b.w	8004bea <__retarget_lock_release_recursive>
 8004cea:	bf00      	nop
 8004cec:	20002198 	.word	0x20002198

08004cf0 <__sfputc_r>:
 8004cf0:	6893      	ldr	r3, [r2, #8]
 8004cf2:	b410      	push	{r4}
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	6093      	str	r3, [r2, #8]
 8004cfa:	da07      	bge.n	8004d0c <__sfputc_r+0x1c>
 8004cfc:	6994      	ldr	r4, [r2, #24]
 8004cfe:	42a3      	cmp	r3, r4
 8004d00:	db01      	blt.n	8004d06 <__sfputc_r+0x16>
 8004d02:	290a      	cmp	r1, #10
 8004d04:	d102      	bne.n	8004d0c <__sfputc_r+0x1c>
 8004d06:	bc10      	pop	{r4}
 8004d08:	f7ff bcd4 	b.w	80046b4 <__swbuf_r>
 8004d0c:	6813      	ldr	r3, [r2, #0]
 8004d0e:	1c58      	adds	r0, r3, #1
 8004d10:	6010      	str	r0, [r2, #0]
 8004d12:	7019      	strb	r1, [r3, #0]
 8004d14:	4608      	mov	r0, r1
 8004d16:	bc10      	pop	{r4}
 8004d18:	4770      	bx	lr

08004d1a <__sfputs_r>:
 8004d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1c:	4606      	mov	r6, r0
 8004d1e:	460f      	mov	r7, r1
 8004d20:	4614      	mov	r4, r2
 8004d22:	18d5      	adds	r5, r2, r3
 8004d24:	42ac      	cmp	r4, r5
 8004d26:	d101      	bne.n	8004d2c <__sfputs_r+0x12>
 8004d28:	2000      	movs	r0, #0
 8004d2a:	e007      	b.n	8004d3c <__sfputs_r+0x22>
 8004d2c:	463a      	mov	r2, r7
 8004d2e:	4630      	mov	r0, r6
 8004d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d34:	f7ff ffdc 	bl	8004cf0 <__sfputc_r>
 8004d38:	1c43      	adds	r3, r0, #1
 8004d3a:	d1f3      	bne.n	8004d24 <__sfputs_r+0xa>
 8004d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d40 <_vfiprintf_r>:
 8004d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d44:	460d      	mov	r5, r1
 8004d46:	4614      	mov	r4, r2
 8004d48:	4698      	mov	r8, r3
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	b09d      	sub	sp, #116	; 0x74
 8004d4e:	b118      	cbz	r0, 8004d58 <_vfiprintf_r+0x18>
 8004d50:	6983      	ldr	r3, [r0, #24]
 8004d52:	b90b      	cbnz	r3, 8004d58 <_vfiprintf_r+0x18>
 8004d54:	f7ff feaa 	bl	8004aac <__sinit>
 8004d58:	4b89      	ldr	r3, [pc, #548]	; (8004f80 <_vfiprintf_r+0x240>)
 8004d5a:	429d      	cmp	r5, r3
 8004d5c:	d11b      	bne.n	8004d96 <_vfiprintf_r+0x56>
 8004d5e:	6875      	ldr	r5, [r6, #4]
 8004d60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d62:	07d9      	lsls	r1, r3, #31
 8004d64:	d405      	bmi.n	8004d72 <_vfiprintf_r+0x32>
 8004d66:	89ab      	ldrh	r3, [r5, #12]
 8004d68:	059a      	lsls	r2, r3, #22
 8004d6a:	d402      	bmi.n	8004d72 <_vfiprintf_r+0x32>
 8004d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d6e:	f7ff ff3b 	bl	8004be8 <__retarget_lock_acquire_recursive>
 8004d72:	89ab      	ldrh	r3, [r5, #12]
 8004d74:	071b      	lsls	r3, r3, #28
 8004d76:	d501      	bpl.n	8004d7c <_vfiprintf_r+0x3c>
 8004d78:	692b      	ldr	r3, [r5, #16]
 8004d7a:	b9eb      	cbnz	r3, 8004db8 <_vfiprintf_r+0x78>
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	4630      	mov	r0, r6
 8004d80:	f7ff fcfc 	bl	800477c <__swsetup_r>
 8004d84:	b1c0      	cbz	r0, 8004db8 <_vfiprintf_r+0x78>
 8004d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d88:	07dc      	lsls	r4, r3, #31
 8004d8a:	d50e      	bpl.n	8004daa <_vfiprintf_r+0x6a>
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d90:	b01d      	add	sp, #116	; 0x74
 8004d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d96:	4b7b      	ldr	r3, [pc, #492]	; (8004f84 <_vfiprintf_r+0x244>)
 8004d98:	429d      	cmp	r5, r3
 8004d9a:	d101      	bne.n	8004da0 <_vfiprintf_r+0x60>
 8004d9c:	68b5      	ldr	r5, [r6, #8]
 8004d9e:	e7df      	b.n	8004d60 <_vfiprintf_r+0x20>
 8004da0:	4b79      	ldr	r3, [pc, #484]	; (8004f88 <_vfiprintf_r+0x248>)
 8004da2:	429d      	cmp	r5, r3
 8004da4:	bf08      	it	eq
 8004da6:	68f5      	ldreq	r5, [r6, #12]
 8004da8:	e7da      	b.n	8004d60 <_vfiprintf_r+0x20>
 8004daa:	89ab      	ldrh	r3, [r5, #12]
 8004dac:	0598      	lsls	r0, r3, #22
 8004dae:	d4ed      	bmi.n	8004d8c <_vfiprintf_r+0x4c>
 8004db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004db2:	f7ff ff1a 	bl	8004bea <__retarget_lock_release_recursive>
 8004db6:	e7e9      	b.n	8004d8c <_vfiprintf_r+0x4c>
 8004db8:	2300      	movs	r3, #0
 8004dba:	9309      	str	r3, [sp, #36]	; 0x24
 8004dbc:	2320      	movs	r3, #32
 8004dbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dc2:	2330      	movs	r3, #48	; 0x30
 8004dc4:	f04f 0901 	mov.w	r9, #1
 8004dc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dcc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004f8c <_vfiprintf_r+0x24c>
 8004dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dd4:	4623      	mov	r3, r4
 8004dd6:	469a      	mov	sl, r3
 8004dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ddc:	b10a      	cbz	r2, 8004de2 <_vfiprintf_r+0xa2>
 8004dde:	2a25      	cmp	r2, #37	; 0x25
 8004de0:	d1f9      	bne.n	8004dd6 <_vfiprintf_r+0x96>
 8004de2:	ebba 0b04 	subs.w	fp, sl, r4
 8004de6:	d00b      	beq.n	8004e00 <_vfiprintf_r+0xc0>
 8004de8:	465b      	mov	r3, fp
 8004dea:	4622      	mov	r2, r4
 8004dec:	4629      	mov	r1, r5
 8004dee:	4630      	mov	r0, r6
 8004df0:	f7ff ff93 	bl	8004d1a <__sfputs_r>
 8004df4:	3001      	adds	r0, #1
 8004df6:	f000 80aa 	beq.w	8004f4e <_vfiprintf_r+0x20e>
 8004dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dfc:	445a      	add	r2, fp
 8004dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8004e00:	f89a 3000 	ldrb.w	r3, [sl]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 80a2 	beq.w	8004f4e <_vfiprintf_r+0x20e>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e14:	f10a 0a01 	add.w	sl, sl, #1
 8004e18:	9304      	str	r3, [sp, #16]
 8004e1a:	9307      	str	r3, [sp, #28]
 8004e1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e20:	931a      	str	r3, [sp, #104]	; 0x68
 8004e22:	4654      	mov	r4, sl
 8004e24:	2205      	movs	r2, #5
 8004e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e2a:	4858      	ldr	r0, [pc, #352]	; (8004f8c <_vfiprintf_r+0x24c>)
 8004e2c:	f000 fa82 	bl	8005334 <memchr>
 8004e30:	9a04      	ldr	r2, [sp, #16]
 8004e32:	b9d8      	cbnz	r0, 8004e6c <_vfiprintf_r+0x12c>
 8004e34:	06d1      	lsls	r1, r2, #27
 8004e36:	bf44      	itt	mi
 8004e38:	2320      	movmi	r3, #32
 8004e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e3e:	0713      	lsls	r3, r2, #28
 8004e40:	bf44      	itt	mi
 8004e42:	232b      	movmi	r3, #43	; 0x2b
 8004e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e48:	f89a 3000 	ldrb.w	r3, [sl]
 8004e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e4e:	d015      	beq.n	8004e7c <_vfiprintf_r+0x13c>
 8004e50:	4654      	mov	r4, sl
 8004e52:	2000      	movs	r0, #0
 8004e54:	f04f 0c0a 	mov.w	ip, #10
 8004e58:	9a07      	ldr	r2, [sp, #28]
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e60:	3b30      	subs	r3, #48	; 0x30
 8004e62:	2b09      	cmp	r3, #9
 8004e64:	d94e      	bls.n	8004f04 <_vfiprintf_r+0x1c4>
 8004e66:	b1b0      	cbz	r0, 8004e96 <_vfiprintf_r+0x156>
 8004e68:	9207      	str	r2, [sp, #28]
 8004e6a:	e014      	b.n	8004e96 <_vfiprintf_r+0x156>
 8004e6c:	eba0 0308 	sub.w	r3, r0, r8
 8004e70:	fa09 f303 	lsl.w	r3, r9, r3
 8004e74:	4313      	orrs	r3, r2
 8004e76:	46a2      	mov	sl, r4
 8004e78:	9304      	str	r3, [sp, #16]
 8004e7a:	e7d2      	b.n	8004e22 <_vfiprintf_r+0xe2>
 8004e7c:	9b03      	ldr	r3, [sp, #12]
 8004e7e:	1d19      	adds	r1, r3, #4
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	9103      	str	r1, [sp, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bfbb      	ittet	lt
 8004e88:	425b      	neglt	r3, r3
 8004e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8004e8e:	9307      	strge	r3, [sp, #28]
 8004e90:	9307      	strlt	r3, [sp, #28]
 8004e92:	bfb8      	it	lt
 8004e94:	9204      	strlt	r2, [sp, #16]
 8004e96:	7823      	ldrb	r3, [r4, #0]
 8004e98:	2b2e      	cmp	r3, #46	; 0x2e
 8004e9a:	d10c      	bne.n	8004eb6 <_vfiprintf_r+0x176>
 8004e9c:	7863      	ldrb	r3, [r4, #1]
 8004e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004ea0:	d135      	bne.n	8004f0e <_vfiprintf_r+0x1ce>
 8004ea2:	9b03      	ldr	r3, [sp, #12]
 8004ea4:	3402      	adds	r4, #2
 8004ea6:	1d1a      	adds	r2, r3, #4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	9203      	str	r2, [sp, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	bfb8      	it	lt
 8004eb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004eb4:	9305      	str	r3, [sp, #20]
 8004eb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004f9c <_vfiprintf_r+0x25c>
 8004eba:	2203      	movs	r2, #3
 8004ebc:	4650      	mov	r0, sl
 8004ebe:	7821      	ldrb	r1, [r4, #0]
 8004ec0:	f000 fa38 	bl	8005334 <memchr>
 8004ec4:	b140      	cbz	r0, 8004ed8 <_vfiprintf_r+0x198>
 8004ec6:	2340      	movs	r3, #64	; 0x40
 8004ec8:	eba0 000a 	sub.w	r0, r0, sl
 8004ecc:	fa03 f000 	lsl.w	r0, r3, r0
 8004ed0:	9b04      	ldr	r3, [sp, #16]
 8004ed2:	3401      	adds	r4, #1
 8004ed4:	4303      	orrs	r3, r0
 8004ed6:	9304      	str	r3, [sp, #16]
 8004ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004edc:	2206      	movs	r2, #6
 8004ede:	482c      	ldr	r0, [pc, #176]	; (8004f90 <_vfiprintf_r+0x250>)
 8004ee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ee4:	f000 fa26 	bl	8005334 <memchr>
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	d03f      	beq.n	8004f6c <_vfiprintf_r+0x22c>
 8004eec:	4b29      	ldr	r3, [pc, #164]	; (8004f94 <_vfiprintf_r+0x254>)
 8004eee:	bb1b      	cbnz	r3, 8004f38 <_vfiprintf_r+0x1f8>
 8004ef0:	9b03      	ldr	r3, [sp, #12]
 8004ef2:	3307      	adds	r3, #7
 8004ef4:	f023 0307 	bic.w	r3, r3, #7
 8004ef8:	3308      	adds	r3, #8
 8004efa:	9303      	str	r3, [sp, #12]
 8004efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004efe:	443b      	add	r3, r7
 8004f00:	9309      	str	r3, [sp, #36]	; 0x24
 8004f02:	e767      	b.n	8004dd4 <_vfiprintf_r+0x94>
 8004f04:	460c      	mov	r4, r1
 8004f06:	2001      	movs	r0, #1
 8004f08:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f0c:	e7a5      	b.n	8004e5a <_vfiprintf_r+0x11a>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f04f 0c0a 	mov.w	ip, #10
 8004f14:	4619      	mov	r1, r3
 8004f16:	3401      	adds	r4, #1
 8004f18:	9305      	str	r3, [sp, #20]
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f20:	3a30      	subs	r2, #48	; 0x30
 8004f22:	2a09      	cmp	r2, #9
 8004f24:	d903      	bls.n	8004f2e <_vfiprintf_r+0x1ee>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0c5      	beq.n	8004eb6 <_vfiprintf_r+0x176>
 8004f2a:	9105      	str	r1, [sp, #20]
 8004f2c:	e7c3      	b.n	8004eb6 <_vfiprintf_r+0x176>
 8004f2e:	4604      	mov	r4, r0
 8004f30:	2301      	movs	r3, #1
 8004f32:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f36:	e7f0      	b.n	8004f1a <_vfiprintf_r+0x1da>
 8004f38:	ab03      	add	r3, sp, #12
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	462a      	mov	r2, r5
 8004f3e:	4630      	mov	r0, r6
 8004f40:	4b15      	ldr	r3, [pc, #84]	; (8004f98 <_vfiprintf_r+0x258>)
 8004f42:	a904      	add	r1, sp, #16
 8004f44:	f3af 8000 	nop.w
 8004f48:	4607      	mov	r7, r0
 8004f4a:	1c78      	adds	r0, r7, #1
 8004f4c:	d1d6      	bne.n	8004efc <_vfiprintf_r+0x1bc>
 8004f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f50:	07d9      	lsls	r1, r3, #31
 8004f52:	d405      	bmi.n	8004f60 <_vfiprintf_r+0x220>
 8004f54:	89ab      	ldrh	r3, [r5, #12]
 8004f56:	059a      	lsls	r2, r3, #22
 8004f58:	d402      	bmi.n	8004f60 <_vfiprintf_r+0x220>
 8004f5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f5c:	f7ff fe45 	bl	8004bea <__retarget_lock_release_recursive>
 8004f60:	89ab      	ldrh	r3, [r5, #12]
 8004f62:	065b      	lsls	r3, r3, #25
 8004f64:	f53f af12 	bmi.w	8004d8c <_vfiprintf_r+0x4c>
 8004f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f6a:	e711      	b.n	8004d90 <_vfiprintf_r+0x50>
 8004f6c:	ab03      	add	r3, sp, #12
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	462a      	mov	r2, r5
 8004f72:	4630      	mov	r0, r6
 8004f74:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <_vfiprintf_r+0x258>)
 8004f76:	a904      	add	r1, sp, #16
 8004f78:	f000 f882 	bl	8005080 <_printf_i>
 8004f7c:	e7e4      	b.n	8004f48 <_vfiprintf_r+0x208>
 8004f7e:	bf00      	nop
 8004f80:	080055f4 	.word	0x080055f4
 8004f84:	08005614 	.word	0x08005614
 8004f88:	080055d4 	.word	0x080055d4
 8004f8c:	08005634 	.word	0x08005634
 8004f90:	0800563e 	.word	0x0800563e
 8004f94:	00000000 	.word	0x00000000
 8004f98:	08004d1b 	.word	0x08004d1b
 8004f9c:	0800563a 	.word	0x0800563a

08004fa0 <_printf_common>:
 8004fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa4:	4616      	mov	r6, r2
 8004fa6:	4699      	mov	r9, r3
 8004fa8:	688a      	ldr	r2, [r1, #8]
 8004faa:	690b      	ldr	r3, [r1, #16]
 8004fac:	4607      	mov	r7, r0
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	bfb8      	it	lt
 8004fb2:	4613      	movlt	r3, r2
 8004fb4:	6033      	str	r3, [r6, #0]
 8004fb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fba:	460c      	mov	r4, r1
 8004fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fc0:	b10a      	cbz	r2, 8004fc6 <_printf_common+0x26>
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	6033      	str	r3, [r6, #0]
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	0699      	lsls	r1, r3, #26
 8004fca:	bf42      	ittt	mi
 8004fcc:	6833      	ldrmi	r3, [r6, #0]
 8004fce:	3302      	addmi	r3, #2
 8004fd0:	6033      	strmi	r3, [r6, #0]
 8004fd2:	6825      	ldr	r5, [r4, #0]
 8004fd4:	f015 0506 	ands.w	r5, r5, #6
 8004fd8:	d106      	bne.n	8004fe8 <_printf_common+0x48>
 8004fda:	f104 0a19 	add.w	sl, r4, #25
 8004fde:	68e3      	ldr	r3, [r4, #12]
 8004fe0:	6832      	ldr	r2, [r6, #0]
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	42ab      	cmp	r3, r5
 8004fe6:	dc28      	bgt.n	800503a <_printf_common+0x9a>
 8004fe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fec:	1e13      	subs	r3, r2, #0
 8004fee:	6822      	ldr	r2, [r4, #0]
 8004ff0:	bf18      	it	ne
 8004ff2:	2301      	movne	r3, #1
 8004ff4:	0692      	lsls	r2, r2, #26
 8004ff6:	d42d      	bmi.n	8005054 <_printf_common+0xb4>
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005000:	47c0      	blx	r8
 8005002:	3001      	adds	r0, #1
 8005004:	d020      	beq.n	8005048 <_printf_common+0xa8>
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	68e5      	ldr	r5, [r4, #12]
 800500a:	f003 0306 	and.w	r3, r3, #6
 800500e:	2b04      	cmp	r3, #4
 8005010:	bf18      	it	ne
 8005012:	2500      	movne	r5, #0
 8005014:	6832      	ldr	r2, [r6, #0]
 8005016:	f04f 0600 	mov.w	r6, #0
 800501a:	68a3      	ldr	r3, [r4, #8]
 800501c:	bf08      	it	eq
 800501e:	1aad      	subeq	r5, r5, r2
 8005020:	6922      	ldr	r2, [r4, #16]
 8005022:	bf08      	it	eq
 8005024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005028:	4293      	cmp	r3, r2
 800502a:	bfc4      	itt	gt
 800502c:	1a9b      	subgt	r3, r3, r2
 800502e:	18ed      	addgt	r5, r5, r3
 8005030:	341a      	adds	r4, #26
 8005032:	42b5      	cmp	r5, r6
 8005034:	d11a      	bne.n	800506c <_printf_common+0xcc>
 8005036:	2000      	movs	r0, #0
 8005038:	e008      	b.n	800504c <_printf_common+0xac>
 800503a:	2301      	movs	r3, #1
 800503c:	4652      	mov	r2, sl
 800503e:	4649      	mov	r1, r9
 8005040:	4638      	mov	r0, r7
 8005042:	47c0      	blx	r8
 8005044:	3001      	adds	r0, #1
 8005046:	d103      	bne.n	8005050 <_printf_common+0xb0>
 8005048:	f04f 30ff 	mov.w	r0, #4294967295
 800504c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005050:	3501      	adds	r5, #1
 8005052:	e7c4      	b.n	8004fde <_printf_common+0x3e>
 8005054:	2030      	movs	r0, #48	; 0x30
 8005056:	18e1      	adds	r1, r4, r3
 8005058:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005062:	4422      	add	r2, r4
 8005064:	3302      	adds	r3, #2
 8005066:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800506a:	e7c5      	b.n	8004ff8 <_printf_common+0x58>
 800506c:	2301      	movs	r3, #1
 800506e:	4622      	mov	r2, r4
 8005070:	4649      	mov	r1, r9
 8005072:	4638      	mov	r0, r7
 8005074:	47c0      	blx	r8
 8005076:	3001      	adds	r0, #1
 8005078:	d0e6      	beq.n	8005048 <_printf_common+0xa8>
 800507a:	3601      	adds	r6, #1
 800507c:	e7d9      	b.n	8005032 <_printf_common+0x92>
	...

08005080 <_printf_i>:
 8005080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005084:	460c      	mov	r4, r1
 8005086:	7e27      	ldrb	r7, [r4, #24]
 8005088:	4691      	mov	r9, r2
 800508a:	2f78      	cmp	r7, #120	; 0x78
 800508c:	4680      	mov	r8, r0
 800508e:	469a      	mov	sl, r3
 8005090:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005092:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005096:	d807      	bhi.n	80050a8 <_printf_i+0x28>
 8005098:	2f62      	cmp	r7, #98	; 0x62
 800509a:	d80a      	bhi.n	80050b2 <_printf_i+0x32>
 800509c:	2f00      	cmp	r7, #0
 800509e:	f000 80d9 	beq.w	8005254 <_printf_i+0x1d4>
 80050a2:	2f58      	cmp	r7, #88	; 0x58
 80050a4:	f000 80a4 	beq.w	80051f0 <_printf_i+0x170>
 80050a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050b0:	e03a      	b.n	8005128 <_printf_i+0xa8>
 80050b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050b6:	2b15      	cmp	r3, #21
 80050b8:	d8f6      	bhi.n	80050a8 <_printf_i+0x28>
 80050ba:	a001      	add	r0, pc, #4	; (adr r0, 80050c0 <_printf_i+0x40>)
 80050bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80050c0:	08005119 	.word	0x08005119
 80050c4:	0800512d 	.word	0x0800512d
 80050c8:	080050a9 	.word	0x080050a9
 80050cc:	080050a9 	.word	0x080050a9
 80050d0:	080050a9 	.word	0x080050a9
 80050d4:	080050a9 	.word	0x080050a9
 80050d8:	0800512d 	.word	0x0800512d
 80050dc:	080050a9 	.word	0x080050a9
 80050e0:	080050a9 	.word	0x080050a9
 80050e4:	080050a9 	.word	0x080050a9
 80050e8:	080050a9 	.word	0x080050a9
 80050ec:	0800523b 	.word	0x0800523b
 80050f0:	0800515d 	.word	0x0800515d
 80050f4:	0800521d 	.word	0x0800521d
 80050f8:	080050a9 	.word	0x080050a9
 80050fc:	080050a9 	.word	0x080050a9
 8005100:	0800525d 	.word	0x0800525d
 8005104:	080050a9 	.word	0x080050a9
 8005108:	0800515d 	.word	0x0800515d
 800510c:	080050a9 	.word	0x080050a9
 8005110:	080050a9 	.word	0x080050a9
 8005114:	08005225 	.word	0x08005225
 8005118:	680b      	ldr	r3, [r1, #0]
 800511a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800511e:	1d1a      	adds	r2, r3, #4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	600a      	str	r2, [r1, #0]
 8005124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005128:	2301      	movs	r3, #1
 800512a:	e0a4      	b.n	8005276 <_printf_i+0x1f6>
 800512c:	6825      	ldr	r5, [r4, #0]
 800512e:	6808      	ldr	r0, [r1, #0]
 8005130:	062e      	lsls	r6, r5, #24
 8005132:	f100 0304 	add.w	r3, r0, #4
 8005136:	d50a      	bpl.n	800514e <_printf_i+0xce>
 8005138:	6805      	ldr	r5, [r0, #0]
 800513a:	600b      	str	r3, [r1, #0]
 800513c:	2d00      	cmp	r5, #0
 800513e:	da03      	bge.n	8005148 <_printf_i+0xc8>
 8005140:	232d      	movs	r3, #45	; 0x2d
 8005142:	426d      	negs	r5, r5
 8005144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005148:	230a      	movs	r3, #10
 800514a:	485e      	ldr	r0, [pc, #376]	; (80052c4 <_printf_i+0x244>)
 800514c:	e019      	b.n	8005182 <_printf_i+0x102>
 800514e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005152:	6805      	ldr	r5, [r0, #0]
 8005154:	600b      	str	r3, [r1, #0]
 8005156:	bf18      	it	ne
 8005158:	b22d      	sxthne	r5, r5
 800515a:	e7ef      	b.n	800513c <_printf_i+0xbc>
 800515c:	680b      	ldr	r3, [r1, #0]
 800515e:	6825      	ldr	r5, [r4, #0]
 8005160:	1d18      	adds	r0, r3, #4
 8005162:	6008      	str	r0, [r1, #0]
 8005164:	0628      	lsls	r0, r5, #24
 8005166:	d501      	bpl.n	800516c <_printf_i+0xec>
 8005168:	681d      	ldr	r5, [r3, #0]
 800516a:	e002      	b.n	8005172 <_printf_i+0xf2>
 800516c:	0669      	lsls	r1, r5, #25
 800516e:	d5fb      	bpl.n	8005168 <_printf_i+0xe8>
 8005170:	881d      	ldrh	r5, [r3, #0]
 8005172:	2f6f      	cmp	r7, #111	; 0x6f
 8005174:	bf0c      	ite	eq
 8005176:	2308      	moveq	r3, #8
 8005178:	230a      	movne	r3, #10
 800517a:	4852      	ldr	r0, [pc, #328]	; (80052c4 <_printf_i+0x244>)
 800517c:	2100      	movs	r1, #0
 800517e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005182:	6866      	ldr	r6, [r4, #4]
 8005184:	2e00      	cmp	r6, #0
 8005186:	bfa8      	it	ge
 8005188:	6821      	ldrge	r1, [r4, #0]
 800518a:	60a6      	str	r6, [r4, #8]
 800518c:	bfa4      	itt	ge
 800518e:	f021 0104 	bicge.w	r1, r1, #4
 8005192:	6021      	strge	r1, [r4, #0]
 8005194:	b90d      	cbnz	r5, 800519a <_printf_i+0x11a>
 8005196:	2e00      	cmp	r6, #0
 8005198:	d04d      	beq.n	8005236 <_printf_i+0x1b6>
 800519a:	4616      	mov	r6, r2
 800519c:	fbb5 f1f3 	udiv	r1, r5, r3
 80051a0:	fb03 5711 	mls	r7, r3, r1, r5
 80051a4:	5dc7      	ldrb	r7, [r0, r7]
 80051a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051aa:	462f      	mov	r7, r5
 80051ac:	42bb      	cmp	r3, r7
 80051ae:	460d      	mov	r5, r1
 80051b0:	d9f4      	bls.n	800519c <_printf_i+0x11c>
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d10b      	bne.n	80051ce <_printf_i+0x14e>
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	07df      	lsls	r7, r3, #31
 80051ba:	d508      	bpl.n	80051ce <_printf_i+0x14e>
 80051bc:	6923      	ldr	r3, [r4, #16]
 80051be:	6861      	ldr	r1, [r4, #4]
 80051c0:	4299      	cmp	r1, r3
 80051c2:	bfde      	ittt	le
 80051c4:	2330      	movle	r3, #48	; 0x30
 80051c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051ce:	1b92      	subs	r2, r2, r6
 80051d0:	6122      	str	r2, [r4, #16]
 80051d2:	464b      	mov	r3, r9
 80051d4:	4621      	mov	r1, r4
 80051d6:	4640      	mov	r0, r8
 80051d8:	f8cd a000 	str.w	sl, [sp]
 80051dc:	aa03      	add	r2, sp, #12
 80051de:	f7ff fedf 	bl	8004fa0 <_printf_common>
 80051e2:	3001      	adds	r0, #1
 80051e4:	d14c      	bne.n	8005280 <_printf_i+0x200>
 80051e6:	f04f 30ff 	mov.w	r0, #4294967295
 80051ea:	b004      	add	sp, #16
 80051ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f0:	4834      	ldr	r0, [pc, #208]	; (80052c4 <_printf_i+0x244>)
 80051f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051f6:	680e      	ldr	r6, [r1, #0]
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80051fe:	061f      	lsls	r7, r3, #24
 8005200:	600e      	str	r6, [r1, #0]
 8005202:	d514      	bpl.n	800522e <_printf_i+0x1ae>
 8005204:	07d9      	lsls	r1, r3, #31
 8005206:	bf44      	itt	mi
 8005208:	f043 0320 	orrmi.w	r3, r3, #32
 800520c:	6023      	strmi	r3, [r4, #0]
 800520e:	b91d      	cbnz	r5, 8005218 <_printf_i+0x198>
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	f023 0320 	bic.w	r3, r3, #32
 8005216:	6023      	str	r3, [r4, #0]
 8005218:	2310      	movs	r3, #16
 800521a:	e7af      	b.n	800517c <_printf_i+0xfc>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	f043 0320 	orr.w	r3, r3, #32
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	2378      	movs	r3, #120	; 0x78
 8005226:	4828      	ldr	r0, [pc, #160]	; (80052c8 <_printf_i+0x248>)
 8005228:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800522c:	e7e3      	b.n	80051f6 <_printf_i+0x176>
 800522e:	065e      	lsls	r6, r3, #25
 8005230:	bf48      	it	mi
 8005232:	b2ad      	uxthmi	r5, r5
 8005234:	e7e6      	b.n	8005204 <_printf_i+0x184>
 8005236:	4616      	mov	r6, r2
 8005238:	e7bb      	b.n	80051b2 <_printf_i+0x132>
 800523a:	680b      	ldr	r3, [r1, #0]
 800523c:	6826      	ldr	r6, [r4, #0]
 800523e:	1d1d      	adds	r5, r3, #4
 8005240:	6960      	ldr	r0, [r4, #20]
 8005242:	600d      	str	r5, [r1, #0]
 8005244:	0635      	lsls	r5, r6, #24
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	d501      	bpl.n	800524e <_printf_i+0x1ce>
 800524a:	6018      	str	r0, [r3, #0]
 800524c:	e002      	b.n	8005254 <_printf_i+0x1d4>
 800524e:	0671      	lsls	r1, r6, #25
 8005250:	d5fb      	bpl.n	800524a <_printf_i+0x1ca>
 8005252:	8018      	strh	r0, [r3, #0]
 8005254:	2300      	movs	r3, #0
 8005256:	4616      	mov	r6, r2
 8005258:	6123      	str	r3, [r4, #16]
 800525a:	e7ba      	b.n	80051d2 <_printf_i+0x152>
 800525c:	680b      	ldr	r3, [r1, #0]
 800525e:	1d1a      	adds	r2, r3, #4
 8005260:	600a      	str	r2, [r1, #0]
 8005262:	681e      	ldr	r6, [r3, #0]
 8005264:	2100      	movs	r1, #0
 8005266:	4630      	mov	r0, r6
 8005268:	6862      	ldr	r2, [r4, #4]
 800526a:	f000 f863 	bl	8005334 <memchr>
 800526e:	b108      	cbz	r0, 8005274 <_printf_i+0x1f4>
 8005270:	1b80      	subs	r0, r0, r6
 8005272:	6060      	str	r0, [r4, #4]
 8005274:	6863      	ldr	r3, [r4, #4]
 8005276:	6123      	str	r3, [r4, #16]
 8005278:	2300      	movs	r3, #0
 800527a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800527e:	e7a8      	b.n	80051d2 <_printf_i+0x152>
 8005280:	4632      	mov	r2, r6
 8005282:	4649      	mov	r1, r9
 8005284:	4640      	mov	r0, r8
 8005286:	6923      	ldr	r3, [r4, #16]
 8005288:	47d0      	blx	sl
 800528a:	3001      	adds	r0, #1
 800528c:	d0ab      	beq.n	80051e6 <_printf_i+0x166>
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	079b      	lsls	r3, r3, #30
 8005292:	d413      	bmi.n	80052bc <_printf_i+0x23c>
 8005294:	68e0      	ldr	r0, [r4, #12]
 8005296:	9b03      	ldr	r3, [sp, #12]
 8005298:	4298      	cmp	r0, r3
 800529a:	bfb8      	it	lt
 800529c:	4618      	movlt	r0, r3
 800529e:	e7a4      	b.n	80051ea <_printf_i+0x16a>
 80052a0:	2301      	movs	r3, #1
 80052a2:	4632      	mov	r2, r6
 80052a4:	4649      	mov	r1, r9
 80052a6:	4640      	mov	r0, r8
 80052a8:	47d0      	blx	sl
 80052aa:	3001      	adds	r0, #1
 80052ac:	d09b      	beq.n	80051e6 <_printf_i+0x166>
 80052ae:	3501      	adds	r5, #1
 80052b0:	68e3      	ldr	r3, [r4, #12]
 80052b2:	9903      	ldr	r1, [sp, #12]
 80052b4:	1a5b      	subs	r3, r3, r1
 80052b6:	42ab      	cmp	r3, r5
 80052b8:	dcf2      	bgt.n	80052a0 <_printf_i+0x220>
 80052ba:	e7eb      	b.n	8005294 <_printf_i+0x214>
 80052bc:	2500      	movs	r5, #0
 80052be:	f104 0619 	add.w	r6, r4, #25
 80052c2:	e7f5      	b.n	80052b0 <_printf_i+0x230>
 80052c4:	08005645 	.word	0x08005645
 80052c8:	08005656 	.word	0x08005656

080052cc <_read_r>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	4604      	mov	r4, r0
 80052d0:	4608      	mov	r0, r1
 80052d2:	4611      	mov	r1, r2
 80052d4:	2200      	movs	r2, #0
 80052d6:	4d05      	ldr	r5, [pc, #20]	; (80052ec <_read_r+0x20>)
 80052d8:	602a      	str	r2, [r5, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	f7fb faaa 	bl	8000834 <_read>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	d102      	bne.n	80052ea <_read_r+0x1e>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	b103      	cbz	r3, 80052ea <_read_r+0x1e>
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	200021a0 	.word	0x200021a0

080052f0 <_fstat_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	2300      	movs	r3, #0
 80052f4:	4d06      	ldr	r5, [pc, #24]	; (8005310 <_fstat_r+0x20>)
 80052f6:	4604      	mov	r4, r0
 80052f8:	4608      	mov	r0, r1
 80052fa:	4611      	mov	r1, r2
 80052fc:	602b      	str	r3, [r5, #0]
 80052fe:	f7fb fac1 	bl	8000884 <_fstat>
 8005302:	1c43      	adds	r3, r0, #1
 8005304:	d102      	bne.n	800530c <_fstat_r+0x1c>
 8005306:	682b      	ldr	r3, [r5, #0]
 8005308:	b103      	cbz	r3, 800530c <_fstat_r+0x1c>
 800530a:	6023      	str	r3, [r4, #0]
 800530c:	bd38      	pop	{r3, r4, r5, pc}
 800530e:	bf00      	nop
 8005310:	200021a0 	.word	0x200021a0

08005314 <_isatty_r>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	2300      	movs	r3, #0
 8005318:	4d05      	ldr	r5, [pc, #20]	; (8005330 <_isatty_r+0x1c>)
 800531a:	4604      	mov	r4, r0
 800531c:	4608      	mov	r0, r1
 800531e:	602b      	str	r3, [r5, #0]
 8005320:	f7fb fabf 	bl	80008a2 <_isatty>
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	d102      	bne.n	800532e <_isatty_r+0x1a>
 8005328:	682b      	ldr	r3, [r5, #0]
 800532a:	b103      	cbz	r3, 800532e <_isatty_r+0x1a>
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	bd38      	pop	{r3, r4, r5, pc}
 8005330:	200021a0 	.word	0x200021a0

08005334 <memchr>:
 8005334:	4603      	mov	r3, r0
 8005336:	b510      	push	{r4, lr}
 8005338:	b2c9      	uxtb	r1, r1
 800533a:	4402      	add	r2, r0
 800533c:	4293      	cmp	r3, r2
 800533e:	4618      	mov	r0, r3
 8005340:	d101      	bne.n	8005346 <memchr+0x12>
 8005342:	2000      	movs	r0, #0
 8005344:	e003      	b.n	800534e <memchr+0x1a>
 8005346:	7804      	ldrb	r4, [r0, #0]
 8005348:	3301      	adds	r3, #1
 800534a:	428c      	cmp	r4, r1
 800534c:	d1f6      	bne.n	800533c <memchr+0x8>
 800534e:	bd10      	pop	{r4, pc}

08005350 <_init>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	bf00      	nop
 8005354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005356:	bc08      	pop	{r3}
 8005358:	469e      	mov	lr, r3
 800535a:	4770      	bx	lr

0800535c <_fini>:
 800535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535e:	bf00      	nop
 8005360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005362:	bc08      	pop	{r3}
 8005364:	469e      	mov	lr, r3
 8005366:	4770      	bx	lr
